{
  "metadata": {
    "purpose": "Phase 3: Operator Integration in Admin Environment (Hierarchical Architecture)",
    "updated": "2025-09-06",
    "project_status": "Phase 3: Admin Environment Complete - Ready for Operator Integration", 
    "critical_focus": "Integrate operator controls within existing admin environment with role-based restrictions",
    "database_source_of_truth": "/home/veranoby/sports-bets/backend/database-analysis/*.json",
    "phase_2b_completed": "✅ SSE architecture fully functional, RTMP streaming operational",
    "architecture_corrected": "❌ Operator separate dashboard eliminated ✅ Hierarchical admin integration",
    "lessons_learned": "Operators use same admin environment with limited access based on user.role hierarchy"
  },
  
  "admin_environment_analysis": {
    "current_status": "✅ ADMIN ENVIRONMENT 100% COMPLETE FOR ALL REQUIRED PROCESSES",
    "crud_verification": {
      "usuarios": "✅ Users.tsx - Complete CRUD with approval system",
      "eventos": "✅ Events.tsx - Complete event management with fights",
      "articulos_noticias": "✅ Articles.tsx - Complete article/news management",
      "wallet_finanzas": "✅ Finance.tsx + Requests.tsx - Complete financial management",
      "bets_apuestas": "✅ Integrated within Events.tsx - Complete betting management",
      "venues_galleras": "✅ Venues.tsx - Complete venue management",
      "operadores": "✅ Operators.tsx - Operator management system"
    },
    "streaming_verification": {
      "sistema_monitoreo": "✅ SystemMonitoring.tsx with SSE real-time updates",
      "control_peleas": "✅ FightControl.tsx component ready for integration",
      "sse_endpoints": "✅ All 5 SSE endpoints functional and tested",
      "backend_temporal_logic": "✅ Fight status transitions fully implemented",
      "rtmp_server": "✅ Operational on ports 1935/8000 with OBS integration",
      "stream_monitor": "✅ StreamStatusMonitor.tsx available for integration"
    },
    "navigation_system": {
      "admin_sidebar": "✅ Complete navigation with all required sections",
      "role_support": "✅ useAuth hook provides user.role for permission checks",
      "layout_system": "✅ AdminLayout.tsx handles admin environment structure"
    }
  },

  "hierarchical_architecture": {
    "correct_model": {
      "admin_role": "Full access to all admin environment pages and tools",
      "operator_role": "Limited access within same admin environment - hierarchy-based restrictions",
      "shared_environment": "Single /admin environment with conditional rendering based on user.role"
    },
    "permission_matrix": {
      "dashboard": { "admin": "✅ Full metrics", "operator": "✅ Event-focused metrics only" },
      "usuarios": { "admin": "✅ All user management", "operator": "❌ No access" },
      "venues": { "admin": "✅ All venue management", "operator": "❌ No access" },
      "articles": { "admin": "✅ All article management", "operator": "❌ No access" },
      "events": { "admin": "✅ Full event management", "operator": "✅ Assigned events only" },
      "requests": { "admin": "✅ All financial requests", "operator": "❌ No access" },
      "finance": { "admin": "✅ All financial data", "operator": "❌ No access" },
      "monitoring": { "admin": "✅ Full system monitoring", "operator": "✅ Stream monitoring only" }
    },
    "operator_limitations": {
      "cannot_create_other_admins": "Operators cannot create/edit admin or operator users",
      "cannot_access_finances": "No access to financial management or withdrawal requests",
      "assigned_events_only": "Can only manage events where event.operatorId === user.id",
      "limited_monitoring": "Only stream/event monitoring, not full system monitoring"
    }
  },

  "integration_priorities_p0": {
    "sidebar_role_restrictions": {
      "duration": "2-3 hours",
      "business_critical": "Operators must see only allowed navigation options",
      
      "file_to_modify": "frontend/src/components/admin/AdminSidebar.tsx",
      "current_implementation": "All navItems visible to everyone",
      "required_changes": [
        "Add role-based filtering of navItems array",
        "Hide 'Usuarios', 'Finanzas', 'Solicitudes' for operators", 
        "Show 'Eventos', 'Monitoreo' with restricted access for operators",
        "Add visual indicator of role (Admin vs Operator) in sidebar header"
      ],
      "implementation_pattern": {
        "role_check": "const isAdmin = user?.role === 'admin'",
        "conditional_nav": "navItems.filter(item => isAdmin || allowedForOperator.includes(item.path))",
        "allowed_operator_paths": "['/admin', '/admin/events', '/admin/monitoring']"
      }
    },

    "events_page_operator_controls": {
      "duration": "3-4 hours", 
      "business_critical": "Operators need fight management controls within Events page",
      
      "file_to_modify": "frontend/src/pages/admin/Events.tsx",
      "current_status": "Complete events management for admin",
      "required_integration": [
        "Add FightControl.tsx component to event detail view",
        "Integrate SSE real-time updates for fight status changes",
        "Add operator-specific event filtering (only assigned events)",
        "Show/hide admin-only features based on user.role"
      ],
      "component_integration": {
        "import_fight_control": "import FightControl from '../../components/admin/FightControl';",
        "sse_integration": "Use existing useSSE hook for real-time fight updates",
        "role_based_rendering": "Show FightControl only for events where user is assigned operator"
      }
    },

    "monitoring_page_role_separation": {
      "duration": "2-3 hours",
      "business_critical": "Operators need monitoring but limited to streaming only",
      
      "file_to_modify": "frontend/src/pages/admin/Monitoring.tsx", 
      "current_status": "Full system monitoring with SystemMonitoring.tsx",
      "required_changes": [
        "Split monitoring into admin vs operator views",
        "Admin: Full SystemMonitoring + server stats + database monitoring",
        "Operator: StreamStatusMonitor + event-specific monitoring only",
        "Use same page with conditional rendering based on user.role"
      ],
      "component_usage": {
        "admin_components": ["SystemMonitoring", "DatabaseMonitor", "ServerStats"],
        "operator_components": ["StreamStatusMonitor", "EventMonitoring"],
        "conditional_render": "user.role === 'admin' ? <FullMonitoring /> : <StreamMonitoring />"
      }
    }
  },

  "secondary_priorities_p1": {
    "dashboard_role_customization": {
      "duration": "2-3 hours",
      "description": "Customize admin dashboard metrics based on user role",
      
      "file_to_modify": "frontend/src/pages/admin/AdminDashboard.tsx",
      "operator_dashboard_focus": [
        "Show only assigned events in 'Eventos de Hoy'",
        "Hide financial metrics (withdrawals, revenue)",
        "Hide user approval metrics", 
        "Focus on streaming status and event management metrics",
        "Add quick access to assigned events and streaming controls"
      ]
    },

    "sse_integration_optimization": {
      "duration": "1-2 hours",
      "description": "Optimize SSE connections based on user role and permissions",
      
      "role_based_sse": {
        "admin_sse_endpoints": ["system-status", "admin/notifications", "all events"],
        "operator_sse_endpoints": ["assigned events only", "stream status", "fight updates"],
        "connection_optimization": "Subscribe only to relevant SSE endpoints based on user role"
      }
    }
  },

  "implementation_workflow": {
    "phase_3a_sidebar_restrictions": {
      "duration": "2-3 hours",
      "focus": "Implement role-based navigation in AdminSidebar.tsx",
      "deliverables": [
        "Operators see only allowed menu items",
        "Role indicator in sidebar header",
        "Clean navigation experience for both roles"
      ],
      "validation": [
        "Admin login shows full navigation",
        "Operator login shows restricted navigation",
        "No broken routes or access errors"
      ]
    },

    "phase_3b_events_integration": {
      "duration": "3-4 hours",
      "focus": "Integrate FightControl within Events.tsx for operators",
      "deliverables": [
        "FightControl component working in Events page",
        "Real-time fight status updates via SSE", 
        "Operator-only event filtering working",
        "Admin/operator feature separation"
      ],
      "validation": [
        "Operator can control assigned event fights",
        "Fight status transitions work in real-time",
        "Admin sees all events, operator sees assigned only"
      ]
    },

    "phase_3c_monitoring_separation": {
      "duration": "2-3 hours",
      "focus": "Role-based monitoring page customization",
      "deliverables": [
        "Admin monitoring: full system oversight",
        "Operator monitoring: streaming focus only", 
        "Same page with conditional rendering",
        "All monitoring components working correctly"
      ],
      "validation": [
        "Admin sees SystemMonitoring + full stats",
        "Operator sees StreamStatusMonitor only",
        "Both roles have functional monitoring experience"
      ]
    }
  },

  "technical_specifications": {
    "role_permission_system": {
      "user_roles": ["admin", "operator", "venue", "user"],
      "hierarchy": "admin > operator > venue > user",
      "permission_check_pattern": "const canAccess = user?.role === 'admin' || (user?.role === 'operator' && allowedForOperator)",
      "authentication": "Use existing useAuth hook from AuthContext"
    },

    "component_integration_patterns": {
      "conditional_rendering": "user?.role === 'admin' ? <AdminComponent /> : <OperatorComponent />",
      "navigation_filtering": "navItems.filter(item => hasPermission(user.role, item.path))",
      "event_filtering": "events.filter(event => user.role === 'admin' || event.operatorId === user.id)",
      "sse_conditional": "useSSE(user.role === 'admin' ? '/admin/all-events' : `/admin/events/${userEventId}`)"
    },

    "existing_components_reuse": {
      "fight_control": "✅ FightControl.tsx ready for integration in Events.tsx",
      "system_monitoring": "✅ SystemMonitoring.tsx working with SSE",
      "stream_monitor": "✅ StreamStatusMonitor.tsx available for operator monitoring",
      "sse_hook": "✅ useSSE hook functional and tested"
    }
  },

  "validation_requirements": {
    "role_based_testing": [
      "Admin login → full access to all admin pages and features",
      "Operator login → restricted access, only allowed pages visible",
      "Operator can manage assigned events and control fights",
      "Operator cannot access user management, finances, or system admin features",
      "SSE updates work correctly for both admin and operator roles"
    ],

    "functionality_testing": [
      "Fight status transitions work from operator controls",
      "Real-time updates via SSE reach both admin and operator interfaces",
      "Navigation restrictions prevent unauthorized access",
      "All existing admin functionality remains intact",
      "No broken routes or permission errors"
    ],

    "integration_testing": [
      "Admin and operator can work simultaneously on same events",
      "SSE broadcasts reach appropriate users based on permissions",
      "Fight management workflow complete for operators",
      "All CRUD operations work correctly with role restrictions"
    ]
  },

  "success_criteria": {
    "phase_3_completion": [
      "✅ Operators use same admin environment with hierarchical restrictions",
      "✅ Navigation sidebar shows role-appropriate menu items only",
      "✅ Events page integrates FightControl for operator fight management",
      "✅ Monitoring page provides role-specific system oversight",
      "✅ All existing admin functionality preserved and working",
      "✅ Real-time SSE updates work for both admin and operator roles"
    ],

    "business_validation": [
      "Operator daily workflow: Login → See assigned events → Manage fights → Monitor stream",
      "Admin oversight: Full platform management + operator activity monitoring",
      "No security issues or unauthorized access between roles",
      "Hierarchical permissions enforced throughout admin environment",
      "System ready for production operator usage"
    ]
  },

  "files_to_modify": {
    "primary_modifications": [
      "frontend/src/components/admin/AdminSidebar.tsx - Add role-based navigation filtering",
      "frontend/src/pages/admin/Events.tsx - Integrate FightControl for operators",
      "frontend/src/pages/admin/Monitoring.tsx - Role-based monitoring customization",
      "frontend/src/pages/admin/AdminDashboard.tsx - Role-specific dashboard metrics"
    ],
    "no_new_files_needed": "All required components and infrastructure already exist",
    "existing_components_to_integrate": [
      "components/admin/FightControl.tsx",
      "components/admin/StreamStatusMonitor.tsx",
      "hooks/useSSE.ts",
      "hooks/useAuth.ts"
    ]
  },

  "risk_mitigation": {
    "permission_security": "Always check user.role before rendering sensitive components",
    "navigation_security": "Filter navigation based on permissions, not just hide UI elements", 
    "sse_performance": "Subscribe only to relevant SSE endpoints based on user role",
    "existing_functionality": "Preserve all existing admin functionality while adding operator integration"
  },

  "development_notes": {
    "architecture_principle": "Single admin environment, hierarchical permissions, not separate interfaces",
    "code_reuse": "Maximum reuse of existing components with conditional rendering",
    "user_experience": "Seamless experience for both admin and operator within same interface",
    "maintainability": "Role-based logic centralized and easy to modify",
    "scalability": "Permission system ready for additional roles (venue, gallera) if needed"
  }
}