# GalloBets - Reglas de Desarrollo Optimizadas V9

## Arquitectura Moderna React + Anti Memory Leaks

## üéØ ESPECIALIZACI√ìN T√âCNICA

**DOMINIO EXPERTO**: React 19, Node.js, Express, PostgreSQL, WebSockets (Socket.io), Streaming Media (Nginx-RTMP), Kushki Payment Gateway, Real-time P2P Betting Systems

**ARQUITECTURA V9**:

- Frontend: React 19 + TypeScript + Vite + Tailwind CSS + Layouts Persistentes
- Styling: CSS Variables Est√°ticas (NO Context thrashing)
- Backend: Node.js + Express + PostgreSQL (Neon.tech) + Socket.io Singleton
- Streaming: Nginx-RTMP + CDN optimizado + OBS Studio integration
- Payments: Kushki integration + virtual wallet + manual withdrawals

---

## üö® ARQUITECTURA LAYOUTS PERSISTENTES - OBLIGATORIA

### **‚úÖ ESTRUCTURA CORRECTA - SIEMPRE USAR**

```typescript
// ‚úÖ App.tsx estructura con layouts persistentes
<Route
  element={
    <ProtectedRoute>
      <UserLayout />
    </ProtectedRoute>
  }
>
  <Route path="/dashboard" element={<UserDashboard />} />
  <Route path="/wallet" element={<Wallet />} />
  // Headers NUNCA se desmontan entre navegaciones
</Route>;

// ‚úÖ Layout componente estructura
const UserLayout = memo(() => (
  <div className="min-h-screen flex flex-col">
    <UserHeader /> {/* ‚≠ê PERSISTENTE - monta UNA VEZ */}
    <main className="flex-1">
      <Outlet /> {/* Solo esto cambia */}
    </main>
    <Navigation /> {/* ‚≠ê PERSISTENTE */}
  </div>
));
```

### **‚ùå PATRONES PROHIBIDOS - CAUSAN RE-MOUNTING**

```typescript
// ‚ùå NUNCA: Header en cada p√°gina individual
const Dashboard = () => (
  <div>
    <UserHeader /> {/* ‚ùå Se desmonta/monta en cada navegaci√≥n */}
    <div>Dashboard content</div>
  </div>
);

// ‚ùå NUNCA: Contextos que manipulan DOM
const ThemeProvider = ({ children }) => {
  useEffect(() => {
    document.documentElement.style.setProperty(...); // ‚ùå PROHIBIDO
  }, [theme]);
};
```

### **üé® STYLING RULES - ANTI CONTEXT THRASHING**

```css
/* ‚úÖ SIEMPRE: CSS Variables est√°ticas en index.css */
:root {
  --color-primary: #596c95;
  --color-bg-main: #1a1f37e3;
  /* etc... */
}

.btn-primary {
  background-color: var(--color-primary);
}
```

```typescript
// ‚ùå NUNCA: Context para themes din√°micos
const ThemeContext = createContext(); // ‚ùå PROHIBIDO

// ‚úÖ SIEMPRE: Clases CSS directas
className = "btn-primary text-theme-primary"; // ‚úÖ CORRECTO
```

---

## üö® WEBSOCKET DEVELOPMENT RULES V9 - CR√çTICAS

### **‚ùå PATRONES PROHIBIDOS - CAUSAN MEMORY LEAKS**

```typescript
// ‚ùå NUNCA: Polling redundante con WebSocket
const useHeaderData = (pollingInterval = 30000) => {
  useEffect(() => {
    const interval = setInterval(fetchData, pollingInterval); // ‚ùå PROHIBIDO
  }, []);
};

// ‚ùå NUNCA: Dependencies inestables en useEffect WebSocket
useEffect(() => {
  addListener("event", handler);
}, [addListener, removeListener, handler, fetchFunction]); // ‚ùå PROHIBIDO

// ‚ùå NUNCA: Handlers inline sin useCallback
addListener("event", (data) => { /* ... */ }); // ‚ùå PROHIBIDO

// ‚ùå NUNCA: Context que re-renderiza por DOM manipulation
useEffect(() => {
  document.documentElement.style.setProperty(...); // ‚ùå PROHIBIDO
}, [theme]);
```

### **‚úÖ PATRONES OBLIGATORIOS - WEBSOCKET V9**

```typescript
// ‚úÖ PATR√ìN 1: Singleton WebSocket Context
const WebSocketProvider = ({ children }) => {
  const socketRef = useRef<Socket | null>(null); // ‚úÖ Una sola instancia
  const listenersRegistryRef = useRef<Map<string, Set<Function>>>(new Map());

  // ‚úÖ Cleanup autom√°tico con l√≠mites
  const addListener = useCallback((event: string, handler: Function) => {
    if (eventListeners.size >= MAX_LISTENERS_PER_EVENT) {
      console.warn(`‚ö†Ô∏è Demasiados listeners para '${event}'`);
      return () => {};
    }
    // ... registro con cleanup
  }, []);
};

// ‚úÖ PATR√ìN 2: Header datos con WebSocket directo (NO polling)
const UserHeader = memo(() => {
  const [headerData, setHeaderData] = useState(initialData);

  // ‚úÖ Fetch inicial √öNICO
  useEffect(() => {
    fetchInitialData();
  }, []);

  // ‚úÖ WebSocket listeners para updates
  useWebSocketListener(
    "wallet_updated",
    useCallback((data) => {
      setHeaderData((prev) => ({ ...prev, walletBalance: data.balance }));
    }, [])
  );
});

// ‚úÖ PATR√ìN 3: Hook especializado anti-thrashing
useWebSocketListener(
  "event",
  useCallback((data) => {
    setState(data);
  }, []), // ‚úÖ SOLO dependencies primitivas
  [eventId] // ‚úÖ Re-suscribir solo si eventId cambia
);
```

### **üõ°Ô∏è REGLAS ANTI-THRASHING OBLIGATORIAS**

1. **HANDLER STABILITY**: Todos los handlers WebSocket DEBEN usar useCallback con dependencies vac√≠as []
2. **NO POLLING**: ELIMINAR setInterval para datos que vienen por WebSocket
3. **SINGLETON SOCKET**: Una sola conexi√≥n Socket.io global por aplicaci√≥n
4. **EFFECT DEPENDENCIES**: useEffect WebSocket SOLO [isConnected] y handlers estables
5. **NO FUNCTION DEPS**: NUNCA incluir addListener, removeListener como dependencies
6. **COMPONENT ID**: Cada componente que use WebSocket debe tener ID √∫nico para debugging
7. **CLEANUP FORZADO**: Cleanup en useEffect return + componentWillUnmount
8. **REGISTRY LIMITS**: M√°ximo 10 listeners por evento, limpieza autom√°tica cada 5 min

---

## üí∞ SISTEMA FINANCIERO - REGLAS ESTRICTAS

### **TRANSACCIONES AT√ìMICAS OBLIGATORIAS**

```typescript
// ‚úÖ SIEMPRE usar transacciones para operaciones financieras
const transaction = await sequelize.transaction();
try {
  await Wallet.update(
    { balance: newBalance },
    { where: { userId }, transaction }
  );
  await Transaction.create({ amount, type, userId }, { transaction });
  await transaction.commit();
} catch (error) {
  await transaction.rollback();
  throw error;
}
```

### **VALIDACIONES FINANCIERAS CR√çTICAS**

1. **SALDO SUFICIENTE**: Verificar antes de congelar fondos
2. **DOUBLE SPENDING**: Prevenir m√∫ltiples apuestas con mismos fondos
3. **COMMISSION CALCULATION**: 5% comisi√≥n por apuesta ganada, calculada exacta
4. **KUSHKI INTEGRATION**: Trasladar costos de transacci√≥n (3-5%) al usuario
5. **AUDIT TRAIL**: Registrar TODA operaci√≥n financiera con metadata completa

---

## üé∞ SISTEMA P2P APUESTAS - REGLAS ESPEC√çFICAS

### **L√ìGICA DOY/PAGO IMPLEMENTATION**

```typescript
// ‚úÖ T√©rminos de apuesta estructura est√°ndar
interface BetTerms {
  ratio: number;
  isOffer: boolean;
  pagoAmount?: number; // Para propuestas PAGO
  doyAmount?: number; // Para apuestas DOY
  proposedBy?: string; // Para tracking propuestas
}

// ‚úÖ Validaci√≥n de t√©rminos obligatoria
if (betType === "doy" && !terms?.doyAmount) {
  throw new Error("DOY bets require doyAmount");
}
```

### **MATCHING ALGORITHM RULES**

1. **ANTI-SELF-MATCH**: NUNCA permitir apostar contra s√≠ mismo
2. **COMPATIBLE SIDES**: Solo emparejar lados opuestos (red vs blue)
3. **AMOUNT VALIDATION**: Verificar compatibilidad de montos
4. **TIME WINDOW**: Apuestas solo durante ventana abierta
5. **INSTANT FREEZE**: Congelar fondos inmediatamente al match

---

## üé® FRONTEND DEVELOPMENT RULES V9

### **COMPONENT PATTERNS OBLIGATORIOS**

```typescript
// ‚úÖ Estructura est√°ndar de componente V9
interface ComponentProps {
  // Props tipadas exactas
}

const Component: React.FC<ComponentProps> = memo(({ ...props }) => {
  // 1. Estados locales con useState
  const [state, setState] = useState(initialValue);

  // 2. Referencias estables
  const isMountedRef = useRef(true);

  // 3. Handlers con useCallback Y dependencies estables
  const handleAction = useCallback((data) => {
    if (!isMountedRef.current) return;
    setState(data);
  }, []); // ‚úÖ Dependencies vac√≠as o primitivas

  // 4. WebSocket listeners V9
  useWebSocketListener("event", handleAction);

  // 5. Cleanup en useEffect
  useEffect(() => {
    return () => {
      isMountedRef.current = false;
    };
  }, []);

  // 6. Return JSX con clases CSS est√°ticas
  return (
    <div className="btn-primary text-theme-primary">
      {/* NO usar theme context */}
    </div>
  );
});

Component.displayName = "Component";
export default Component;
```

### **PERFORMANCE RULES V9**

1. **REACT.MEMO**: OBLIGATORIO para componentes que reciben props complejas
2. **USECALLBACK**: OBLIGATORIO para handlers pasados como props O WebSocket
3. **USEMEMO**: Solo para c√°lculos costosos, NO para objetos simples
4. **LAYOUTS PERSISTENTES**: Headers/Navigation en Layout, NO en p√°ginas
5. **CSS VARIABLES**: Usar var(--color-primary), NO Context din√°mico
6. **ERROR BOUNDARIES**: Wrapper obligatorio para p√°ginas principales
7. **ISNMOUNTED REF**: Para prevenir setState en componentes desmontados

### **STATE MANAGEMENT PATTERNS V9**

```typescript
// ‚úÖ Estados locales simples
const [state, setState] = useState(initialValue);

// ‚úÖ Estados complejos con reducer
const [state, dispatch] = useReducer(reducer, initialState);

// ‚úÖ Global state SOLO para: auth, websocket connection
// ‚ùå NO usar Context para: themes, data temporal, UI state

// ‚úÖ Datos de header con WebSocket directo
const useHeaderDataOptimized = () => {
  const [data, setData] = useState(initialData);

  useEffect(() => {
    fetchInitialData(); // ‚úÖ Una sola vez
  }, []);

  useWebSocketListener(
    "wallet_updated",
    useCallback((data) => {
      setData((prev) => ({ ...prev, walletBalance: data.balance }));
    }, [])
  ); // ‚úÖ No polling
};
```

---

## üì∫ STREAMING OPTIMIZATION - RULES

### **NGINX-RTMP CONFIGURATION**

```nginx
# ‚úÖ Configuraci√≥n optimizada para 8+ horas
worker_processes auto;
rtmp {
    server {
        listen 1935;
        chunk_size 4096;
        application live {
            live on;
            hls on;
            hls_path /tmp/hls;
            hls_fragment 3s;
            hls_playlist_length 20s;
            # ‚úÖ CR√çTICO: prevent memory leaks
            drop_idle_publisher 10s;
        }
    }
}
```

### **OBS STUDIO SETTINGS STANDARD**

- **Resolution**: 720p m√°ximo (cost optimization)
- **Bitrate**: 2000-4000 kbps adaptativo
- **Keyframe**: 2 segundos
- **CPU Preset**: medium (balance calidad/performance)
- **Profile**: main (compatibility)

---

## üóÑÔ∏è BACKEND API STANDARDS

### **ESTRUCTURA DE RESPUESTA OBLIGATORIA**

```typescript
// ‚úÖ Response format est√°ndar
interface APIResponse<T> {
  success: boolean;
  message?: string;
  data: T;
  error?: string;
  timestamp: string;
}

// ‚úÖ Error handling est√°ndar
try {
  const result = await operation();
  res.json({
    success: true,
    data: result,
    timestamp: new Date().toISOString(),
  });
} catch (error) {
  logger.error("Operation failed:", error);
  next(error); // Let errorHandler middleware handle it
}
```

---

## üîí SECURITY & COMPLIANCE REQUIREMENTS

### **JWT IMPLEMENTATION**

```typescript
// ‚úÖ Token structure est√°ndar
const token = jwt.sign({ userId, role, sessionId }, process.env.JWT_SECRET, {
  expiresIn: "7d",
  issuer: "gallobets",
});
```

### **DATA PROTECTION RULES**

1. **PASSWORD HASHING**: bcrypt 12 rounds m√≠nimo
2. **SENSITIVE DATA**: NUNCA logear datos financieros
3. **API KEYS**: Environment variables √∫nicamente
4. **CORS POLICY**: Restrictivo para dominios espec√≠ficos
5. **HTTPS ONLY**: Certificados SSL/TLS obligatorios en producci√≥n

---

## ‚ö†Ô∏è CRITICAL DO NOT'S V9

### **‚ùå NUNCA HACER - CAUSA MEMORY LEAKS**

1. **NO** usar polling (setInterval) para datos que vienen por WebSocket
2. **NO** crear Context para themes que manipulen DOM
3. **NO** poner Headers/Navigation en p√°ginas individuales
4. **NO** usar localStorage para datos financieros
5. **NO** permitir apuestas sin verificar saldo
6. **NO** hacer operaciones financieras sin transacciones
7. **NO** usar WebSocket patterns anteriores a V9
8. **NO** incluir funciones como dependencies en useEffect WebSocket
9. **NO** usar handlers inline en WebSocket sin useCallback
10. **NO** deployar sin tests de memory leaks

### **üö® CRITICAL ERROR INDICATORS V9**

- Console messages: "‚ö†Ô∏è Demasiados listeners para evento"
- Console warnings sobre WebSocket "thrashing"
- Memory usage increasing durante navigation
- Multiple WebSocket connections del mismo cliente
- Headers que se desmontan/montan en navegaci√≥n
- Context re-renders por manipulaci√≥n DOM
- setInterval corriendo junto con WebSocket para mismos datos

---

## üìã CODE REVIEW CHECKLIST V9

### **ANTES DE CADA COMMIT - ANTI MEMORY LEAKS**

- [ ] ‚úÖ Headers est√°n en Layout, NO en p√°ginas individuales
- [ ] ‚úÖ WebSocket usage sigue patrones V9 (useCallback + deps estables)
- [ ] ‚úÖ NO hay polling para datos que vienen por WebSocket
- [ ] ‚úÖ Context NO manipula DOM (usa CSS variables est√°ticas)
- [ ] ‚úÖ Handlers WebSocket usan useCallback con deps vac√≠as []
- [ ] ‚úÖ useEffect WebSocket solo depende de [isConnected]
- [ ] ‚úÖ Financial operations use transactions
- [ ] ‚úÖ All user inputs validated and sanitized
- [ ] ‚úÖ TypeScript errors resolved
- [ ] ‚úÖ No console warnings sobre memory leaks
- [ ] ‚úÖ Performance impact evaluated
- [ ] ‚úÖ isMountedRef usado para prevenir setState despu√©s de unmount

### **TESTING WEBSOCKET MEMORY LEAKS**

```javascript
// ‚úÖ Test obligatorio para cada componente WebSocket
describe("WebSocket Component V9", () => {
  it("should handle listeners without memory leaks", async () => {
    const { unmount } = render(<Component />);

    // Verificar no hay thrashing messages
    expect(console.warn).not.toHaveBeenCalledWith(
      expect.stringContaining("Demasiados listeners")
    );

    // Simular navegaci√≥n
    unmount();

    // Verificar cleanup correcto
    // WebSocket connections should remain stable
  });

  it("should not poll when WebSocket provides data", () => {
    render(<Component />);

    // Verificar NO hay setInterval activos
    expect(setInterval).not.toHaveBeenCalled();
  });
});
```

---

**RECUERDA V9**: Este proyecto maneja dinero real y eventos en vivo. Los memory leaks y re-renders innecesarios causan p√©rdida de conexiones WebSocket, datos financieros inconsistentes, y experiencia de usuario degradada. La arquitectura V9 con layouts persistentes y WebSocket optimizado es CR√çTICA para estabilidad.

## üéØ ARQUITECTURA V9 SUMMARY

- **LAYOUTS**: Persistentes, Headers montan UNA VEZ
- **STYLING**: CSS variables est√°ticas, NO Context DOM manipulation
- **WEBSOCKET**: Singleton + useCallback handlers + deps estables
- **DATA**: WebSocket real-time, NO polling redundante
- **PERFORMANCE**: React.memo + useCallback + persistent layouts
- **MEMORY**: Zero leaks, automated cleanup, registry limits
