# GalloBets - Reglas de Desarrollo Optimizadas

## üéØ ESPECIALIZACI√ìN T√âCNICA

**DOMINIO EXPERTO**: React, Node.js, Express, PostgreSQL, WebSockets (Socket.io), Streaming Media (Nginx-RTMP), Kushki Payment Gateway, Real-time P2P Betting Systems

**ARQUITECTURA CORE**:

- Frontend: React 19 + TypeScript + Vite + Tailwind CSS + PWA
- Backend: Node.js + Express + PostgreSQL (Neon.tech) + Socket.io
- Streaming: Nginx-RTMP + BunnyCDN + OBS Studio integration
- Payments: Kushki integration + virtual wallet + manual withdrawals

---

## üö® WEBSOCKET DEVELOPMENT RULES - CR√çTICAS

### **‚ùå PATRONES PROHIBIDOS - CAUSAN MEMORY LEAKS**

```typescript
// ‚ùå NUNCA: Dependencies inestables en useEffect WebSocket
useEffect(() => {
  addListener("event", handler);
}, [addListener, removeListener, handler, fetchFunction]); // ‚ùå PROHIBIDO

// ‚ùå NUNCA: Handlers inline sin useCallback
addListener("event", (data) => {
  /* ... */
}); // ‚ùå PROHIBIDO

// ‚ùå NUNCA: Referencias a funciones que cambian
const handler = () => fetchData(); // fetchData cambia ‚Üí memory leak
```

### **‚úÖ PATRONES OBLIGATORIOS - WEBSOCKET V9**

```typescript
// ‚úÖ PATR√ìN 1: Hook principal con listeners objeto
const { isConnected } = useWebSocket(roomId, {
  event_name: useCallback((data) => {
    // Handler estable
  }, []), // ‚úÖ Sin dependencies o solo primitivos
});

// ‚úÖ PATR√ìN 2: Hook especializado para listener √∫nico
useWebSocketListener(
  "event",
  useCallback((data) => {
    setState(data);
  }, []),
  [eventId]
); // ‚úÖ Dependencies solo para re-suscribir

// ‚úÖ PATR√ìN 3: Control granular con dependencies m√≠nimas
useEffect(() => {
  if (!isConnected) return;
  addListener("event", stableHandler);
  return () => removeListener("event", stableHandler);
}, [isConnected]); // ‚úÖ SOLO isConnected
```

### **üõ°Ô∏è REGLAS ANTI-THRASHING**

1. **HANDLER STABILITY**: Todos los handlers WebSocket DEBEN usar useCallback con dependencies vac√≠as o primitivas
2. **EFFECT DEPENDENCIES**: useEffect WebSocket SOLO puede depender de [isConnected] y handlers estables
3. **NO FUNCTION DEPS**: NUNCA incluir addListener, removeListener, o funciones API como dependencies
4. **COMPONENT ID**: Cada componente que use WebSocket debe tener identificador √∫nico para debugging
5. **ROOM MANAGEMENT**: Un componente = una room m√°ximo, join/leave en useEffect separado

---

## üí∞ SISTEMA FINANCIERO - REGLAS ESTRICTAS

### **TRANSACCIONES AT√ìMICAS OBLIGATORIAS**

```typescript
// ‚úÖ SIEMPRE usar transacciones para operaciones financieras
const transaction = await sequelize.transaction();
try {
  await Wallet.update(
    { balance: newBalance },
    { where: { userId }, transaction }
  );
  await Transaction.create({ amount, type, userId }, { transaction });
  await transaction.commit();
} catch (error) {
  await transaction.rollback();
  throw error;
}
```

### **VALIDACIONES FINANCIERAS CR√çTICAS**

1. **SALDO SUFICIENTE**: Verificar antes de congelar fondos
2. **DOUBLE SPENDING**: Prevenir m√∫ltiples apuestas con mismos fondos
3. **COMMISSION CALCULATION**: 5% comisi√≥n por apuesta ganada, calculada exacta
4. **KUSHKI INTEGRATION**: Trasladar costos de transacci√≥n (3-5%) al usuario
5. **AUDIT TRAIL**: Registrar TODA operaci√≥n financiera con metadata completa

---

## üé∞ SISTEMA P2P APUESTAS - REGLAS ESPEC√çFICAS

### **L√ìGICA DOY/PAGO IMPLEMENTATION**

```typescript
// ‚úÖ T√©rminos de apuesta estructura est√°ndar
interface BetTerms {
  ratio: number;
  isOffer: boolean;
  pagoAmount?: number; // Para propuestas PAGO
  doyAmount?: number; // Para apuestas DOY
  proposedBy?: string; // Para tracking propuestas
}

// ‚úÖ Validaci√≥n de t√©rminos obligatoria
if (betType === "doy" && !terms?.doyAmount) {
  throw new Error("DOY bets require doyAmount");
}
```

### **MATCHING ALGORITHM RULES**

1. **ANTI-SELF-MATCH**: NUNCA permitir apostar contra s√≠ mismo
2. **COMPATIBLE SIDES**: Solo emparejar lados opuestos (red vs blue)
3. **AMOUNT VALIDATION**: Verificar compatibilidad de montos
4. **TIME WINDOW**: Apuestas solo durante ventana abierta
5. **INSTANT FREEZE**: Congelar fondos inmediatamente al match

---

## üì∫ STREAMING OPTIMIZATION - RULES

### **NGINX-RTMP CONFIGURATION**

```nginx
# ‚úÖ Configuraci√≥n optimizada para 8+ horas
worker_processes auto;
rtmp {
    server {
        listen 1935;
        chunk_size 4096;
        application live {
            live on;
            hls on;
            hls_path /tmp/hls;
            hls_fragment 3s;
            hls_playlist_length 20s;
            # ‚úÖ CR√çTICO: prevent memory leaks
            drop_idle_publisher 10s;
        }
    }
}
```

### **OBS STUDIO SETTINGS STANDARD**

- **Resolution**: 720p m√°ximo (cost optimization)
- **Bitrate**: 2000-4000 kbps adaptativo
- **Keyframe**: 2 segundos
- **CPU Preset**: medium (balance calidad/performance)
- **Profile**: main (compatibility)

---

## üé® FRONTEND DEVELOPMENT RULES

### **COMPONENT PATTERNS OBLIGATORIOS**

```typescript
// ‚úÖ Estructura est√°ndar de componente
interface ComponentProps {
  // Props tipadas
}

const Component: React.FC<ComponentProps> = ({ ...props }) => {
  // 1. Hooks en orden: useState, useEffect, custom hooks
  // 2. Handlers con useCallback
  // 3. WebSocket usando patrones V9
  // 4. Return JSX limpio
};

export default Component;
```

### **PERFORMANCE RULES**

1. **REACT.MEMO**: Usar para componentes que reciben props complejas
2. **USECALLBACK**: Obligatorio para handlers pasados como props
3. **USEMEMO**: Para c√°lculos costosos √∫nicamente
4. **LAZY LOADING**: Para componentes grandes no cr√≠ticos
5. **ERROR BOUNDARIES**: Wrapper obligatorio para p√°ginas principales

### **STATE MANAGEMENT PATTERNS**

```typescript
// ‚úÖ Estados locales simples
const [state, setState] = useState(initialValue);

// ‚úÖ Estados complejos con reducer
const [state, dispatch] = useReducer(reducer, initialState);

// ‚úÖ Global state solo para: auth, theme, websocket
// ‚ùå NO usar Context para datos temporales
```

---

## üóÑÔ∏è BACKEND API STANDARDS

### **ESTRUCTURA DE RESPUESTA OBLIGATORIA**

```typescript
// ‚úÖ Response format est√°ndar
interface APIResponse<T> {
  success: boolean;
  message?: string;
  data: T;
  error?: string;
  timestamp: string;
}

// ‚úÖ Error handling est√°ndar
try {
  const result = await operation();
  res.json({
    success: true,
    data: result,
    timestamp: new Date().toISOString(),
  });
} catch (error) {
  logger.error("Operation failed:", error);
  next(error); // Let errorHandler middleware handle it
}
```

### **VALIDATION RULES**

1. **EXPRESS-VALIDATOR**: Obligatorio en todos los endpoints
2. **SANITIZATION**: Sanitizar TODAS las entradas
3. **TYPE CHECKING**: TypeScript strict mode habilitado
4. **AUTH MIDDLEWARE**: Verificar permisos en cada ruta protegida
5. **RATE LIMITING**: Implementar en endpoints cr√≠ticos

---

## üîí SECURITY & COMPLIANCE REQUIREMENTS

### **JWT IMPLEMENTATION**

```typescript
// ‚úÖ Token structure est√°ndar
const token = jwt.sign({ userId, role, sessionId }, process.env.JWT_SECRET, {
  expiresIn: "7d",
  issuer: "gallobets",
});
```

### **DATA PROTECTION RULES**

1. **PASSWORD HASHING**: bcrypt 12 rounds m√≠nimo
2. **SENSITIVE DATA**: NUNCA logear datos financieros
3. **API KEYS**: Environment variables √∫nicamente
4. **CORS POLICY**: Restrictivo para dominios espec√≠ficos
5. **HTTPS ONLY**: Certificados SSL/TLS obligatorios en producci√≥n

---

## üì± PWA REQUIREMENTS - PR√ìXIMA FASE

### **MANIFEST.JSON STRUCTURE**

```json
{
  "name": "GalloBets - Apuestas Deportivas",
  "short_name": "GalloBets",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#1a1f37",
  "theme_color": "#cd6263",
  "icons": [
    // Standard PWA icons
  ]
}
```

### **SERVICE WORKER STRATEGY**

1. **CACHE FIRST**: Para assets est√°ticos
2. **NETWORK FIRST**: Para API calls
3. **NO CACHE**: Para operaciones financieras
4. **OFFLINE FALLBACK**: Para p√°ginas principales √∫nicamente

---

## üé® UI/UX DESIGN SYSTEM

### **COLOR PALETTE STANDARD**

```css
/* Theme colors obligatorios */
--primary-bg: #1a1f37; /* Dark blue background */
--secondary-bg: #2a325c; /* Medium blue */
--accent-red: #cd6263; /* Red accent */
--border-color: #596c95; /* Light blue borders */
--success-green: #10b981; /* Success states */
--warning-yellow: #f59e0b; /* Warning states */
```

### **RESPONSIVE BREAKPOINTS**

```css
/* Mobile first approach */
@media (min-width: 640px) {
  /* sm */
}
@media (min-width: 768px) {
  /* md */
}
@media (min-width: 1024px) {
  /* lg */
}
@media (min-width: 1280px) {
  /* xl */
}
```

---

## üß™ TESTING REQUIREMENTS

### **TESTING HIERARCHY**

1. **UNIT TESTS**: Funciones puras y utilities
2. **INTEGRATION TESTS**: API endpoints y WebSocket events
3. **E2E TESTS**: Flujos cr√≠ticos (login, apuestas, pagos)
4. **LOAD TESTS**: Sistema bajo 2000 usuarios concurrentes

### **WEBSOCKET TESTING MANDATORY**

```javascript
// ‚úÖ Test para cada componente WebSocket
describe("WebSocket Component", () => {
  it("should handle listeners without memory leaks", async () => {
    const { unmount } = render(<Component />);
    // Verify no thrashing messages
    expect(console.warn).not.toHaveBeenCalledWith(
      expect.stringContaining("thrashing")
    );
    unmount();
    // Verify cleanup
  });
});
```

---

## üöÄ DEPLOYMENT & MONITORING

### **ENVIRONMENT SETUP**

```bash
# Development
NODE_ENV=development
VITE_API_URL=http://localhost:3001/api
VITE_WS_URL=http://localhost:3001

# Production
NODE_ENV=production
DATABASE_URL=postgresql://...
JWT_SECRET=... # 256-bit random
KUSHKI_PUBLIC_KEY=...
```

### **MONITORING REQUIREMENTS**

1. **WEBSOCKET METRICS**: Connection count, message rate, error rate
2. **FINANCIAL METRICS**: Transaction volume, failed payments, commissions
3. **PERFORMANCE METRICS**: Response time, memory usage, CPU usage
4. **BUSINESS METRICS**: Active users, events, total bets

---

## ‚ö†Ô∏è CRITICAL DO NOT'S

### **‚ùå NUNCA HACER**

1. **NO** usar localStorage para datos financieros
2. **NO** permitir apuestas sin verificar saldo
3. **NO** hacer operaciones financieras sin transacciones
4. **NO** usar WebSocket patterns V8 (causan memory leaks)
5. **NO** deployar sin tests de carga
6. **NO** exponer APIs sin autenticaci√≥n
7. **NO** hardcodear configuraciones sensibles
8. **NO** usar resolution >720p para streaming
9. **NO** permitir autoplay de video sin user interaction
10. **NO** hacer commits directos a main branch

### **üö® CRITICAL ERROR INDICATORS**

- Console messages: "üõ°Ô∏è bloqueado para prevenir thrashing"
- Memory usage increasing during navigation
- Multiple WebSocket connections from same client
- Financial transactions without audit logs
- Streaming interruptions during events
- Login without proper session management

---

## üìã CODE REVIEW CHECKLIST

### **ANTES DE CADA COMMIT**

- [ ] ‚úÖ WebSocket usage follows V9 patterns
- [ ] ‚úÖ No memory leaks in useEffect dependencies
- [ ] ‚úÖ Financial operations use transactions
- [ ] ‚úÖ All user inputs validated and sanitized
- [ ] ‚úÖ Error handling implemented properly
- [ ] ‚úÖ TypeScript errors resolved
- [ ] ‚úÖ Console warnings addressed
- [ ] ‚úÖ Performance impact evaluated
- [ ] ‚úÖ Security implications reviewed
- [ ] ‚úÖ Documentation updated if needed

### **PULL REQUEST REQUIREMENTS**

1. **DESCRIPTION**: Clear explanation of changes
2. **TESTING**: Evidence of testing completed
3. **PERFORMANCE**: No degradation in key metrics
4. **SECURITY**: Security review if touching auth/payments
5. **DOCUMENTATION**: Updated if API/behavior changes

---

**RECUERDA**: Este proyecto maneja dinero real y eventos en vivo. La calidad del c√≥digo y la estabilidad del sistema son CR√çTICAS para el √©xito del negocio y la confianza de los usuarios.
