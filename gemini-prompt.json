{
  "task_assignment": "GEMINI CLI - ESLint Warning Cleanup Continuation (Stage 2 of 3-AI Pipeline)",
  "priority": "MEDIUM - Code quality improvement with token efficiency focus",
  "tool": "GEMINI CLI (External AI Tool)",
  "pipeline_position": "QWEN CLI (35% done) → GEMINI CLI (50% target) → Claude (15% validation)",
  "token_savings_target": "40-50% through specialized TypeScript/React expertise with MCP timeout strategies",

  "mcp_timeout_prevention": {
    "lessons_from_qwen_cli": "60% of QWEN CLI session failed due to MCP timeouts (error -32001)",
    "gemini_strategies": {
      "native_tools_first": "Use Gemini CLI native tools before attempting complex operations",
      "immediate_fallback": "Switch to alternative approach when MCP operations timeout",
      "micro_sessions": "25-30 minute focused sessions to prevent MCP exhaustion",
      "single_focus": "Complete one warning category per session, never multi-task"
    },
    "unknown_mcp_behavior": "Gemini CLI MCP timeout behavior unknown - apply defensive strategies from QWEN CLI experience"
  },

  "recommended_agents": {
    "primary_agent": "--refactoring-expert --focus typescript --safe-mode",
    "support_agent": "--frontend-architect --scope module --validate",
    "validation_agent": "--quality-engineer --focus testing --safe-mode",
    "agent_rationale": {
      "refactoring_expert": "Specialized in systematic TypeScript cleanup, perfect for ESLint warning reduction",
      "frontend_architect": "React/TypeScript domain knowledge for context-aware type replacements",
      "quality_engineer": "Validates changes don't break functionality, ensures safety"
    },
    "forbidden_agents": [
      "--backend-architect (frontend ESLint task only)",
      "--security-engineer (could over-complicate simple type fixes)",
      "--performance-engineer (not performance optimization)",
      "--system-architect (too broad scope for focused cleanup)"
    ]
  },

  "gemini_cli_workflow": {
    "session_1_explicit_any": "--refactoring-expert --focus typescript --safe-mode",
    "session_2_unused_vars": "--refactoring-expert --frontend-architect --scope module",
    "session_3_exhaustive_deps": "--frontend-architect --quality-engineer --validate",
    "session_validation": "--quality-engineer --focus testing --safe-mode",
    "execution_pattern": "Single warning type completion → validate → commit → next session"
  },

  "current_eslint_status": {
    "baseline_from_qwen_cli": {
      "total_warnings": "200 remaining (down from 309)",
      "qwen_progress": "63 warnings fixed (18% completion)",
      "remaining_categories": {
        "no_explicit_any": "84 remaining (was ~150)",
        "no_unused_vars": "104 remaining (was ~45)",
        "exhaustive_deps": "10 remaining (was ~40)",
        "only_export_components": "2 remaining (was ~29)"
      }
    },
    "gemini_target_work": {
      "focus_categories": ["no_explicit_any", "no_unused_vars", "exhaustive_deps"],
      "expected_reduction": "200 → 75-100 warnings (50% additional reduction)",
      "session_targets": {
        "session_1": "84 → 30-40 explicit-any warnings",
        "session_2": "104 → 40-50 unused-vars warnings",
        "session_3": "10 → 0-2 exhaustive-deps warnings"
      }
    },
    "files_already_modified_by_qwen": [
      "Multiple files with unused imports removed",
      "Various files with any → unknown in catch blocks",
      "useEffect dependencies partially fixed",
      "Some eslint-disable comments added"
    ]
  },

  "gemini_cli_session_decomposition": {
    "session_1_explicit_any": {
      "id": "gemini_session_1",
      "focus": "Replace remaining 84 'no-explicit-any' warnings with proper TypeScript types",
      "duration": "25-30 minutes",
      "gemini_tools": {
        "preferred": "Use Gemini CLI native search/edit tools",
        "fallback": "Switch to alternative commands if MCP timeouts occur",
        "validation": "Defer npm run lint to session end"
      },
      "success_criteria": "84 → 30-40 explicit-any warnings, no functionality breaks",
      "patterns_to_fix": [
        "catch (error: any) → catch (error: unknown)",
        "event: any → event: React.ChangeEvent<HTMLInputElement>",
        "props: any → props: ComponentProps",
        "data: any → data: ApiResponse<T>"
      ],
      "mcp_fallback_strategy": "If search fails, provide exact grep commands for manual execution"
    },
    "session_2_unused_vars": {
      "id": "gemini_session_2",
      "focus": "Remove remaining 104 'no-unused-vars' warnings",
      "duration": "25-30 minutes",
      "gemini_tools": {
        "preferred": "Systematic file-by-file unused import removal",
        "fallback": "Manual sed commands for import cleanup",
        "validation": "Check compilation still works"
      },
      "success_criteria": "104 → 40-50 unused-vars warnings, zero compilation errors",
      "approach": "Conservative removal - only obviously unused imports/variables",
      "risk_mitigation": "Don't remove imports that might be used by other files"
    },
    "session_3_exhaustive_deps": {
      "id": "gemini_session_3",
      "focus": "Fix remaining 10 'exhaustive-deps' warnings",
      "duration": "25-30 minutes",
      "gemini_tools": {
        "preferred": "React hooks expertise for proper dependency arrays",
        "fallback": "Add missing dependencies conservatively",
        "validation": "Ensure no infinite re-render loops"
      },
      "success_criteria": "10 → 0-2 exhaustive-deps warnings, React behavior preserved",
      "approach": "Add missing dependencies or wrap functions in useCallback",
      "high_risk": "Changes to useEffect can break component behavior"
    },
    "total_estimated_duration": "75-90 minutes across 3 focused sessions",
    "execution_order": "Sequential sessions with validation between each"
  },

  "purpose_and_requirements": {
    "specific_purpose": "Continue ESLint warning cleanup from QWEN CLI baseline (200 warnings) using Gemini CLI specialized TypeScript/React expertise to achieve 50% additional reduction",
    "functional_requirements": [
      "Reduce no-explicit-any warnings from 84 to 30-40 using proper TypeScript types",
      "Remove unused variables/imports from 104 to 40-50 without breaking functionality",
      "Fix useEffect dependency arrays from 10 to 0-2 warnings safely",
      "Maintain all existing component functionality and behavior",
      "Preserve React hook patterns and avoid infinite re-render loops"
    ],
    "non_functional_requirements": [
      "TypeScript compilation must succeed after all changes",
      "React development server must start without errors",
      "No new console warnings or errors introduced",
      "Component behavior preserved - no functional regressions",
      "Build process must complete successfully"
    ]
  },

  "inputs_and_outputs": {
    "inputs": {
      "eslint_baseline": {
        "type": "Current warning state from QWEN CLI",
        "total_warnings": "200 remaining",
        "categories": {
          "no_explicit_any": "84 warnings",
          "no_unused_vars": "104 warnings",
          "exhaustive_deps": "10 warnings",
          "only_export_components": "2 warnings"
        },
        "validation": "Must build on QWEN CLI progress without reverting fixes"
      },
      "typescript_context": {
        "type": "React/TypeScript project",
        "framework": "React 18 with TypeScript, Tailwind CSS",
        "patterns": "Existing interfaces and type definitions in codebase",
        "validation": "Must follow established typing patterns"
      }
    },
    "expected_outputs": {
      "reduced_warnings": {
        "format": "Significantly reduced ESLint warning count",
        "targets": {
          "no_explicit_any": "84 → 30-40 warnings",
          "no_unused_vars": "104 → 40-50 warnings",
          "exhaustive_deps": "10 → 0-2 warnings"
        },
        "validation": "npm run lint shows measurable improvement"
      },
      "maintained_functionality": {
        "format": "All components continue to work as before",
        "structure": "No breaking changes to component behavior",
        "api_compatibility": "TypeScript compilation succeeds"
      }
    },
    "edge_cases": [
      "Type changes that break component interfaces",
      "Removing imports that other files depend on",
      "useEffect changes causing infinite re-renders",
      "Gemini CLI MCP timeouts during long operations"
    ]
  },

  "constraints_and_restrictions": {
    "technical_limitations": [
      "TypeScript compilation must not break during or after changes",
      "React component behavior must remain identical after type changes",
      "Cannot remove imports that might be used by other files in project",
      "useEffect dependency changes must not create infinite re-render loops"
    ],
    "gemini_cli_limitations": [
      "MCP timeout behavior unknown - assume similar to QWEN CLI issues",
      "Must work with native Gemini CLI tools as primary approach",
      "Sessions must be kept under 30 minutes to prevent MCP exhaustion",
      "Cannot rely on continuous MCP availability during work"
    ],
    "safety_requirements": [
      "No functional changes to component logic allowed",
      "Must preserve all existing React hook patterns",
      "Cannot modify component interfaces or prop types",
      "Must maintain backward compatibility with all existing code"
    ],
    "coordination_requirements": [
      "Must build upon QWEN CLI work without reverting previous fixes",
      "Must prepare clean handoff to Claude for final validation",
      "Must document any MCP timeout issues encountered",
      "Must report exact warning count reductions achieved"
    ]
  },

  "apis_and_integrations": {
    "internal_apis": [
      {
        "endpoint": "PUT /api/users/profile",
        "purpose": "Update user profile with venue/gallera fields",
        "current_issue": "Returns 400 for venue/gallera profile updates",
        "required_fields": "businessName, businessAddress, businessPhone, taxId, licenseNumber, identificationNumber",
        "expected_response": "200 status with updated profile data"
      }
    ],
    "external_dependencies": [
      {
        "library": "ReactQuill 3.x",
        "purpose": "WYSIWYG editor for article creation",
        "migration_required": "Upgrade from 2.0.0 to fix findDOMNode compatibility",
        "css_imports": "react-quill/dist/quill.snow.css (single import location)"
      }
    ],
    "database_schema": {
      "users_table": "Contains profileInfo JSONB field for venue/gallera additional data",
      "profile_fields": "businessName, businessAddress, businessPhone, taxId, licenseNumber for venues; identificationNumber for galleras",
      "validation": "Backend validates role-specific required fields"
    }
  },

  "test_driven_development": {
    "unit_tests_before_implementation": [
      {
        "test": "ArticleEditor renders without console errors",
        "file": "src/tests/components/ArticleEditor.test.tsx",
        "assertion": "expect(console.error).not.toHaveBeenCalled()",
        "setup": "Mock ReactQuill component, render ArticleEditor"
      },
      {
        "test": "Profile form shows venue fields for venue users",
        "file": "src/tests/pages/Profile.test.tsx",
        "assertion": "expect(screen.getByLabelText('Business Name')).toBeInTheDocument()",
        "setup": "Mock user with role='venue', render Profile component"
      },
      {
        "test": "Profile form hides venue fields for regular users",
        "file": "src/tests/pages/Profile.test.tsx",
        "assertion": "expect(screen.queryByLabelText('Business Name')).not.toBeInTheDocument()",
        "setup": "Mock user with role='user', render Profile component"
      },
      {
        "test": "Profile update succeeds for venue users",
        "file": "src/tests/pages/Profile.test.tsx",
        "assertion": "expect(mockApiCall).toHaveBeenCalledWith(expect.objectContaining({ businessName: 'Test Business' }))",
        "setup": "Mock successful API response, submit venue profile form"
      }
    ],
    "integration_tests": [
      {
        "test": "Article creation flow works end-to-end",
        "scenario": "Click crear articulo → ReactQuill loads → Type content → Save article",
        "success_criteria": "Article saved without errors, redirects to article list"
      },
      {
        "test": "Venue profile update flow works end-to-end",
        "scenario": "Venue user → Profile page → Fill business fields → Save → Success message",
        "success_criteria": "Profile updated, no 400 errors, success notification shown"
      }
    ],
    "mock_data": {
      "venue_user": {
        "id": "test-venue-001",
        "role": "venue",
        "email": "venue@test.com",
        "profileInfo": {
          "fullName": "Test Venue Owner",
          "businessName": "Test Venue",
          "businessAddress": "123 Test St",
          "businessPhone": "+1234567890"
        }
      },
      "gallera_user": {
        "id": "test-gallera-001",
        "role": "gallera",
        "email": "gallera@test.com",
        "profileInfo": {
          "fullName": "Test Gallera Owner",
          "identificationNumber": "ID123456789"
        }
      }
    },
    "coverage_criteria": "Minimum 80% test coverage for modified components"
  },

  "development_phases": {
    "phase_1_setup_and_tests": {
      "duration": "10 minutes",
      "tasks": [
        "Create failing unit tests for ReactQuill compatibility",
        "Create failing tests for venue/gallera profile fields",
        "Set up test mocks for user roles and API responses"
      ],
      "checkpoint": "All tests written and failing as expected"
    },
    "phase_2_minimal_implementation": {
      "duration": "20 minutes",
      "tasks": [
        "Fix ReactQuill findDOMNode error (upgrade to 3.x or ref-based solution)",
        "Add conditional venue/gallera fields to Profile component",
        "Extend UserProfileForm validation for new fields"
      ],
      "checkpoint": "All unit tests passing, components compile without errors"
    },
    "phase_3_integration_and_refinement": {
      "duration": "10 minutes",
      "tasks": [
        "Test end-to-end article creation flow",
        "Test end-to-end venue/gallera profile update flow",
        "Refine error handling and validation messages"
      ],
      "checkpoint": "Integration tests passing, no console errors, 400 errors resolved"
    }
  },

  "coding_conventions": {
    "react_patterns": [
      "Use functional components with hooks",
      "Implement proper TypeScript interfaces for props",
      "Use conditional rendering for role-specific fields: {user.role === 'venue' && <VenueFields />}",
      "Follow existing form validation patterns from EditVenueGalleraModal.tsx"
    ],
    "styling_approach": [
      "Use existing Tailwind CSS classes",
      "Maintain consistent form field spacing and layout",
      "Follow existing modal and form styling patterns",
      "Ensure responsive design for all form fields"
    ],
    "file_structure": [
      "Keep ArticleEditor.tsx in components/articles/",
      "Profile.tsx remains in pages/user/",
      "UserProfileForm.tsx in components/forms/",
      "Tests in src/tests/ matching component structure"
    ]
  },

  "context_injection": {
    "existing_patterns_to_follow": [
      {
        "file": "frontend/src/components/admin/EditVenueGalleraModal.tsx",
        "pattern": "Venue/gallera field handling and validation",
        "specific_code": "businessName, businessAddress, businessPhone, taxId, licenseNumber fields",
        "usage": "Copy validation patterns and field structure for Profile extension"
      },
      {
        "file": "frontend/src/components/forms/UserProfileForm.tsx",
        "pattern": "Form validation and submission",
        "specific_code": "Form validation using react-hook-form or similar",
        "usage": "Extend existing validation schema for venue/gallera fields"
      },
      {
        "file": "frontend/src/components/articles/ArticleEditor.tsx",
        "pattern": "Current ReactQuill integration",
        "specific_code": "ReactQuill component usage and configuration",
        "usage": "Understand current implementation before fixing compatibility issues"
      }
    ],
    "architectural_decisions": [
      "Role-based conditional rendering established in admin components",
      "Form validation using consistent patterns across the app",
      "TypeScript interfaces defined in types/index.ts",
      "API calls using services/api.ts with proper error handling"
    ],
    "technical_constraints": [
      "React 18 strict mode requires ReactQuill 3.x compatibility",
      "Existing CSS classes should not be modified",
      "ProfileInfo JSONB structure in database must be respected",
      "Authentication context provides user role information"
    ]
  },

  "risk_mitigation": {
    "gemini_specific_failure_patterns": [
      {
        "pattern": "Over-engineering simple fixes",
        "prevention": "Focus on minimal changes to fix ReactQuill compatibility, don't redesign entire component",
        "detection": "If implementation includes >20 lines of new code for ReactQuill fix, it's over-engineered"
      },
      {
        "pattern": "Breaking existing functionality",
        "prevention": "Test existing article creation flow before and after changes",
        "rollback": "git checkout -- components/articles/ if article creation breaks"
      },
      {
        "pattern": "Incorrect form validation logic",
        "prevention": "Follow exact patterns from EditVenueGalleraModal.tsx for field validation",
        "detection": "If venue users can save profiles without required business fields, validation is wrong"
      },
      {
        "pattern": "CSS conflicts with ReactQuill styles",
        "prevention": "Import react-quill/dist/quill.snow.css only once, check for conflicts",
        "detection": "If editor styling breaks, CSS conflict occurred"
      }
    ],
    "system_integration_risks": [
      {
        "risk": "Profile API returns 400 after changes",
        "mitigation": "Test with actual API calls, ensure backend expects new fields",
        "fallback": "Revert to original Profile.tsx if API integration fails"
      },
      {
        "risk": "ReactQuill upgrade breaks other components",
        "mitigation": "Search for other ReactQuill usage before upgrading",
        "fallback": "Use ref-based solution instead of library upgrade"
      }
    ],
    "rollback_plan": [
      "Phase 1: Revert specific component files if tests fail",
      "Phase 2: Rollback package.json changes if ReactQuill upgrade breaks build",
      "Phase 3: Full git checkout if system integration fails"
    ]
  },

  "success_criteria": {
    "objective_metrics": [
      "no-explicit-any warnings: 84 → 30-40 (40-50% reduction)",
      "no-unused-vars warnings: 104 → 40-50 (50-60% reduction)",
      "exhaustive-deps warnings: 10 → 0-2 (80-100% reduction)",
      "Total warnings: 200 → 75-100 (50% reduction overall)",
      "TypeScript compilation: 0 errors after all changes"
    ],
    "functional_validation": [
      "npm run build completes successfully after all changes",
      "npm run dev starts without errors or new warnings",
      "All React components render and behave identically",
      "No new console errors or warnings introduced",
      "No infinite re-render loops in components with useEffect changes"
    ],
    "pipeline_success": [
      "Clean handoff to Claude with documented progress",
      "Measurable improvement over QWEN CLI baseline",
      "Clear remaining work identified for Claude completion",
      "MCP timeout strategies documented if issues encountered",
      "All git commits properly documented with warning counts"
    ]
  },

  "recommended_agents": {
    "primary_agent": "--frontend-architect --focus accessibility --safe-mode",
    "support_agent": "--quality-engineer --validate --scope module",
    "testing_agent": "--quality-engineer --focus testing --validate",
    "agent_rationale": {
      "frontend_architect": "Expert in React/TypeScript frontend issues, ReactQuill compatibility, component interfaces",
      "quality_engineer": "Validates component functionality and form handling without breaking existing patterns",
      "focus_accessibility": "Ensures form enhancements maintain accessibility standards for venue/gallera users"
    },
    "forbidden_agents": [
      "--backend-architect (frontend-only task)",
      "--security-engineer (could over-secure forms)",
      "--performance-engineer (not performance issue)",
      "--system-architect (too broad for component fixes)"
    ]
  },

  "agent_workflow": {
    "phase_1_reactquill_fix": "--frontend-architect --focus accessibility --safe-mode",
    "phase_2_profile_enhancement": "--frontend-architect --quality-engineer --scope module",
    "phase_3_form_validation": "--quality-engineer --focus testing --validate",
    "execution_pattern": "Fix ReactQuill first, then enhance Profile component with proper form validation"
  },

  "gemini_cli_execution_workflow": {
    "pre_session_checklist": [
      "Verify current ESLint warning count: npm run lint | tail -5",
      "Check git status and create feature branch",
      "Review QWEN CLI changes to understand baseline",
      "Plan single warning category focus for session"
    ],
    "session_execution_pattern": [
      "Use Gemini CLI native tools for search/edit operations",
      "If MCP timeouts occur, switch immediately to fallback strategy",
      "Focus on single warning type completion per session",
      "NO npm run lint validation during active work",
      "Commit changes at session end with warning count documentation"
    ],
    "mcp_fallback_procedures": [
      "Document which MCP operations timed out",
      "Provide exact shell commands as alternatives",
      "Continue with available tools rather than stopping work",
      "Report MCP issues for future Gemini CLI optimization"
    ],
    "session_end_validation": [
      "npm run lint to verify warning count reduction",
      "npm run build to ensure TypeScript compilation",
      "git add . && git commit with descriptive message",
      "Document progress for Claude handoff"
    ]
  },

  "final_deliverables": {
    "warning_reduction": [
      "Measurable reduction in ESLint warnings from 200 → 75-100",
      "Specific category improvements documented",
      "TypeScript compilation maintained throughout",
      "No functional regressions introduced"
    ],
    "documentation": [
      "Session-by-session progress report",
      "MCP timeout issues encountered (if any)",
      "Remaining work clearly identified for Claude",
      "Git commit history with warning count tracking"
    ],
    "handoff_package": [
      "Clean codebase ready for Claude final validation",
      "All changes properly committed and documented",
      "Remaining 75-100 warnings categorized for Claude completion",
      "No blocking issues or broken functionality"
    ]
  },

  "forbidden_files": [
    "frontend/src/pages/user/Profile.tsx (unless ESLint-related)",
    "frontend/src/contexts/AuthContext.tsx (unless ESLint-related)",
    "backend/src/routes/auth.ts (backend - not in scope)",
    "Any database files (not in scope)",
    "Any authentication business logic (not in scope)"
  ]
}