{
  "metadata": {
    "created": "2025-09-27T03:57:00Z",
    "priority": "HIGH - Streaming tests in 1 hour",
    "session_type": "Profile Enhancement + Membership Management",
    "estimated_duration": "30-45 minutes",
    "brain_references": ["api_endpoints_reference.json", "sdd_system.json", "multi_ai_coordination_strategy.json"],
    "validation_required": "Claude post-session validation"
  },

  "context_overview": {
    "project_status": "âœ… CRITICAL ISSUES RESOLVED - System ready for streaming tests",
    "recent_fixes_by_claude": [
      "âœ… Fixed profile edit validation errors (businessName validation)",
      "âœ… Fixed venues/galleras 403 Forbidden (corrected API endpoints)",
      "âœ… Fixed article creation 500 errors (route ordering)",
      "âœ… Backend restarted with updated compiled code",
      "âœ… Created comprehensive API endpoints documentation"
    ],
    "current_system_health": "ðŸŸ¢ GREEN - All critical APIs working",
    "streaming_readiness": "Ready for tests in 1 hour",
    "backend_url": "http://localhost:3001 (running)",
    "frontend_url": "http://localhost:5174 (assumed running)"
  },

  "your_mission": {
    "primary_goals": [
      "1. Fix profile field labels based on user role (user vs venue/gallera)",
      "2. Add membership management section to user profile"
    ],
    "success_criteria": [
      "Profile shows 'Nombre completo' for regular users",
      "Profile shows 'Nombre del representante' for venue/gallera users",
      "Membership section displays current subscription status",
      "Request membership change functionality present",
      "All changes work without breaking existing profile functionality"
    ],
    "constraints": [
      "DO NOT change any API endpoints (documented in brain/api_endpoints_reference.json)",
      "DO NOT modify backend code - frontend changes only",
      "DO NOT break existing profile edit functionality",
      "USE ONLY documented API endpoints from brain documentation"
    ]
  },

  "critical_brain_documentation": {
    "api_endpoints": {
      "file": "brain/api_endpoints_reference.json",
      "purpose": "Complete API reference - MUST READ FIRST",
      "critical_endpoints": {
        "profile_get": "GET /api/users/profile",
        "profile_update": "PUT /api/users/profile",
        "users_list": "GET /api/users (admin/operator only)",
        "venues_list": "GET /api/venues (NOT /users?role=venue)",
        "galleras_list": "GET /api/galleras (NOT /users?role=gallera)"
      },
      "NEVER_USE": [
        "/api/users?role=venue (USE /api/venues instead)",
        "/api/users?role=gallera (USE /api/galleras instead)"
      ]
    },
    "system_architecture": {
      "file": "brain/sdd_system.json",
      "relevant_sections": ["application_components", "user_roles", "frontend_architecture"]
    },
    "coordination_strategy": {
      "file": "brain/multi_ai_coordination_strategy.json",
      "focus": "frontend_patterns and gemini_ownership sections"
    }
  },

  "target_files_to_modify": {
    "primary": [
      "frontend/src/pages/user/Profile.tsx",
      "frontend/src/components/user/ProfileEditModal.tsx (if exists)"
    ],
    "potentially_needed": [
      "frontend/src/components/user/MembershipSection.tsx (create new)",
      "frontend/src/types/index.ts (if type updates needed)"
    ],
    "DO_NOT_TOUCH": [
      "backend files (any .ts files in backend/)",
      "frontend/src/services/api.ts (API endpoints already correct)",
      "Authentication-related files"
    ]
  },

  "detailed_requirements": {
    "task_1_profile_labels": {
      "description": "Update profile field labels based on user role AND add specific fields for venue/gallera",
      "current_problem": "All users see 'Nombre del representante' regardless of role + missing business-specific fields",
      "required_logic": {
        "regular_users": "Show 'Nombre completo' for role='user' - standard profile fields only",
        "business_users": "Show 'Nombre del representante' for role='venue' or role='gallera' + additional business fields",
        "implementation": "Conditional rendering based on user.role from profile API + fetch business entity data"
      },
      "user_data_structure": {
        "source": "GET /api/users/profile response",
        "structure": {
          "success": true,
          "data": {
            "user": {
              "id": "uuid",
              "username": "string",
              "email": "string",
              "role": "user|venue|gallera|admin|operator",
              "profileInfo": {
                "fullName": "string",
                "businessName": "string|null",
                "phoneNumber": "string",
                "address": "string"
              }
            }
          }
        }
      },
      "field_mapping": {
        "fullName_label": {
          "user": "Nombre completo",
          "venue": "Nombre del representante",
          "gallera": "Nombre del representante",
          "admin": "Nombre completo",
          "operator": "Nombre completo"
        }
      },
      "business_specific_fields": {
        "venue_additional_fields": {
          "api_source": "GET /api/venues (find by owner.id === user.id)",
          "fields_to_display": {
            "name": "Nombre del venue",
            "location": "UbicaciÃ³n",
            "description": "DescripciÃ³n",
            "status": "Estado",
            "isVerified": "Verificado",
            "contactInfo": {
              "email": "Email de contacto",
              "phone": "TelÃ©fono de contacto",
              "website": "Sitio web",
              "address": "DirecciÃ³n completa"
            }
          },
          "note": "These fields are READ-ONLY in profile, edit via admin panel"
        },
        "gallera_additional_fields": {
          "api_source": "GET /api/galleras (find by owner.id === user.id)",
          "fields_to_display": {
            "name": "Nombre de la gallera",
            "location": "UbicaciÃ³n",
            "description": "DescripciÃ³n",
            "status": "Estado",
            "isVerified": "Verificado",
            "specialties": "Especialidades",
            "activeRoosters": "Gallos activos",
            "fightRecord": "RÃ©cord de peleas",
            "contactInfo": {
              "email": "Email de contacto",
              "phone": "TelÃ©fono de contacto",
              "website": "Sitio web",
              "address": "DirecciÃ³n completa"
            }
          },
          "note": "These fields are READ-ONLY in profile, edit via admin panel"
        }
      }
    },

    "task_2_membership_section": {
      "description": "Add membership management section to profile",
      "location": "Below profile information, above edit button",
      "components_needed": [
        "Current subscription display",
        "Expiration date",
        "Request change button (opens modal or shows instructions)"
      ],
      "subscription_data": {
        "source": "user.subscription from profile API",
        "fields": {
          "manual_expires_at": "Date string or null",
          "membership_type": "string|null",
          "status": "active|expired|pending"
        }
      },
      "ui_requirements": {
        "current_plan": "Display current subscription type",
        "expiration": "Show expiration date in friendly format",
        "change_request": "Button to request membership change",
        "admin_note": "Note that admin must approve changes",
        "styling": "Consistent with existing profile design"
      }
    }
  },

  "agent_usage_instructions": {
    "recommended_agents": [
      {
        "agent": "frontend-architect",
        "purpose": "Design the profile modifications and membership UI components",
        "command": "--frontend-architect"
      },
      {
        "agent": "learning-guide",
        "purpose": "Understand existing profile patterns before modifying",
        "command": "--learning-guide"
      }
    ],
    "workflow": [
      "1. Activate learning-guide to understand current profile implementation",
      "2. Read brain/api_endpoints_reference.json for API constraints",
      "3. Activate frontend-architect for UI modifications",
      "4. Test changes without breaking existing functionality"
    ]
  },

  "current_profile_context": {
    "known_working": [
      "âœ… Profile loading works (GET /api/users/profile)",
      "âœ… Profile editing works (PUT /api/users/profile)",
      "âœ… BusinessName validation fixed for optional fields",
      "âœ… Authentication and user data retrieval working",
      "âœ… Venues API working (GET /api/venues)",
      "âœ… Galleras API working (GET /api/galleras)"
    ],
    "user_roles_in_system": {
      "user": "Regular betting users",
      "venue": "Venue owners with business information",
      "gallera": "Gallera owners with business information",
      "admin": "System administrators",
      "operator": "Event operators"
    },
    "business_entity_relationships": {
      "venue_users": {
        "relationship": "User with role='venue' owns a Venue entity",
        "data_flow": "GET /api/venues â†’ find venue where owner.id === user.id",
        "display_pattern": "Show venue-specific fields in separate section"
      },
      "gallera_users": {
        "relationship": "User with role='gallera' owns a Gallera entity",
        "data_flow": "GET /api/galleras â†’ find gallera where owner.id === user.id",
        "display_pattern": "Show gallera-specific fields in separate section"
      }
    }
  },

  "implementation_details": {
    "profile_enhancement_strategy": {
      "step_1": "Update field labels based on user.role",
      "step_2": "For venue/gallera users, fetch additional business entity data",
      "step_3": "Display business information in read-only section",
      "step_4": "Add note that business details are managed by admin"
    },
    "data_fetching_pattern": {
      "for_venue_users": {
        "api_call": "venuesAPI.getAll()",
        "filter_logic": "venues.find(venue => venue.owner.id === user.id)",
        "fallback": "Show message if no venue found for this user"
      },
      "for_gallera_users": {
        "api_call": "gallerasAPI.getAll()",
        "filter_logic": "galleras.find(gallera => gallera.owner.id === user.id)",
        "fallback": "Show message if no gallera found for this user"
      }
    },
    "ui_structure": {
      "profile_sections": [
        "1. User Information (existing - with corrected labels)",
        "2. Business Information (NEW - for venue/gallera only)",
        "3. Membership Management (NEW - for all users)",
        "4. Edit Profile Button (existing)"
      ]
    }
  },

  "validation_checklist": {
    "functional_testing": [
      "Profile loads correctly for all user types",
      "Field labels change based on user role",
      "Membership section displays correctly",
      "Profile editing still works after changes",
      "No console errors in browser"
    ],
    "role_specific_testing": [
      "Test with user role: should see 'Nombre completo' + standard fields only",
      "Test with venue role: should see 'Nombre del representante' + venue business section",
      "Test with gallera role: should see 'Nombre del representante' + gallera business section",
      "Test business sections load venue/gallera data correctly",
      "Test fallback when venue/gallera entity not found"
    ],
    "api_validation": [
      "No new API calls to wrong endpoints",
      "Uses only documented endpoints from brain/api_endpoints_reference.json",
      "Profile update still works correctly"
    ]
  },

  "streaming_readiness_check": {
    "time_constraint": "Must complete in 45 minutes for streaming tests",
    "critical_dependencies": [
      "Profile system must remain functional",
      "User authentication must not break",
      "Admin environment must remain operational"
    ],
    "success_handoff": [
      "All TODO items marked complete",
      "Profile works for all user types",
      "Membership section implemented",
      "System ready for streaming tests"
    ]
  },

  "error_prevention": {
    "common_mistakes_to_avoid": [
      "DO NOT use /api/users?role=venue (use /api/venues)",
      "DO NOT use /api/users?role=gallera (use /api/galleras)",
      "DO NOT modify backend routes or API endpoints",
      "DO NOT change authentication logic",
      "DO NOT break existing profile edit functionality"
    ],
    "validation_commands": [
      "Test profile loading: curl http://localhost:3001/api/users/profile",
      "Check frontend compilation: npm run build",
      "Verify no ESLint errors: npm run lint"
    ]
  },

  "code_example_pattern": {
    "profile_component_structure": {
      "pseudo_code": `
// Profile.tsx enhancement pattern
const Profile = () => {
  const [user, setUser] = useState(null);
  const [venueData, setVenueData] = useState(null);
  const [galleraData, setGalleraData] = useState(null);

  useEffect(() => {
    // Load user profile
    loadUserProfile();

    // Load business entity data based on role
    if (user?.role === 'venue') {
      loadVenueData();
    } else if (user?.role === 'gallera') {
      loadGalleraData();
    }
  }, [user?.role]);

  const loadVenueData = async () => {
    const venues = await venuesAPI.getAll();
    const userVenue = venues.data.venues.find(v => v.owner.id === user.id);
    setVenueData(userVenue);
  };

  const getFieldLabel = (field) => {
    if (field === 'fullName') {
      return ['venue', 'gallera'].includes(user.role)
        ? 'Nombre del representante'
        : 'Nombre completo';
    }
    return field;
  };

  return (
    <div>
      {/* Standard Profile Section */}
      <ProfileSection user={user} getFieldLabel={getFieldLabel} />

      {/* Business Information Section - Only for venue/gallera */}
      {user.role === 'venue' && venueData && (
        <BusinessSection type="venue" data={venueData} />
      )}
      {user.role === 'gallera' && galleraData && (
        <BusinessSection type="gallera" data={galleraData} />
      )}

      {/* Membership Section - All users */}
      <MembershipSection user={user} />
    </div>
  );
};`
    }
  },

  "final_deliverables": {
    "code_changes": [
      "Updated Profile.tsx with role-based field labels",
      "New business information sections for venue/gallera users",
      "New MembershipSection component (or integrated into Profile)",
      "Conditional rendering based on user.role",
      "Business entity data fetching for venue/gallera roles",
      "Membership display and change request functionality"
    ],
    "documentation": [
      "Brief summary of changes made",
      "Any new components created",
      "Testing instructions for different user roles"
    ],
    "validation": [
      "Profile works for user/venue/gallera roles",
      "Membership section displays correctly",
      "No breaking changes to existing functionality",
      "Ready for streaming tests in 1 hour"
    ]
  },

  "emergency_escalation": {
    "if_blocked": "Escalate to Claude immediately - streaming tests cannot be delayed",
    "if_api_errors": "Do NOT modify APIs - check brain/api_endpoints_reference.json",
    "if_auth_issues": "STOP immediately and escalate to Claude",
    "time_limit": "If not 80% complete in 30 minutes, escalate to Claude"
  }
}