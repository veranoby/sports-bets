{
  "CRITICAL_GEMINI_BEHAVIORAL_RULES": {
    "ANTI_LOOP_PROTOCOL": {
      "MAX_ATTEMPTS_PER_TASK": 3,
      "IF_STUCK": "STOP and report exact blocker - DO NOT retry infinitely",
      "IF_ERROR": "Read error message, fix ONCE, test, move on",
      "IF_UNCERTAIN": "Ask user - DO NOT guess or assume"
    },
    "ANTI_DESTRUCTIVE_PROTOCOL": {
      "NEVER_DELETE_CODE": "Add code, modify code, but NEVER delete entire functions/components",
      "NEVER_REWRITE_FROM_SCRATCH": "Modify existing code incrementally - DO NOT start over",
      "ALWAYS_PRESERVE": "Keep all existing props, imports, state, functions",
      "IF_BROKEN": "Undo your change and try different approach - DO NOT delete everything"
    },
    "MANDATORY_READING": {
      "BEFORE_ANY_CODE": [
        "Read /backend/database-analysis/membership-change-requests-table.json COMPLETELY",
        "Read /frontend/src/pages/admin/Requests.tsx to understand withdrawal request pattern",
        "Read /frontend/src/components/user/MembershipSection.tsx current structure",
        "Read /backend/src/routes/wallet.ts withdrawal request endpoints as reference"
      ],
      "VERIFY_PATTERNS": "Confirm exact patterns before replicating",
      "CITE_LINE_NUMBERS": "Reference specific lines when making claims"
    },
    "STOP_CONDITIONS": {
      "IF_SAME_ERROR_3_TIMES": "STOP - report to user",
      "IF_TYPESCRIPT_ERRORS_PERSIST": "STOP - don't infinite loop fixing types",
      "IF_COMPONENT_BREAKS": "Revert change, report issue, STOP"
    }
  },

  "metadata": {
    "task_id": "membership-change-request-system",
    "ai_agent": "Gemini",
    "priority": "HIGH",
    "estimated_duration": "60-90 minutes",
    "execution_order": "AFTER Claude completes database migration",
    "date_created": "2025-10-05",
    "WARNING": "READ ANTI_LOOP_PROTOCOL AND ANTI_DESTRUCTIVE_PROTOCOL ABOVE BEFORE STARTING",
    "dependencies": [
      "Database table 'membership_change_requests' ALREADY CREATED by Claude",
      "Migration executed successfully on Neon PostgreSQL",
      "Indexes and foreign keys configured"
    ]
  },

  "updated_requirements_from_user": {
    "requirement_1": {
      "description": "Only users with registered phone numbers can request membership changes",
      "validation": "Check user.profileInfo.phoneNumber exists and is not empty before allowing request",
      "error_message": "Debes tener un número de teléfono registrado para solicitar cambios de membresía"
    },
    "requirement_2": {
      "description": "User can upload payment proof (comprobante) in the request - OPTIONAL",
      "implementation": [
        "Add payment_proof_url field to request (optional)",
        "User uploads image via /api/uploads/image first",
        "Include URL in request creation payload",
        "Display proof image in admin view if exists"
      ],
      "field_name": "paymentProofUrl"
    },
    "requirement_3": {
      "description": "Display bank account information where user should transfer/deposit",
      "bank_info": {
        "bank_name": "Banco Pichincha",
        "account_type": "Cuenta Corriente",
        "account_number": "2100123456",
        "account_holder": "GalloBets S.A.",
        "ruc": "1792345678001",
        "note": "Store in environment variable or config, display in request modal"
      },
      "display_location": "Show in request modal BEFORE user fills form"
    },
    "requirement_4": {
      "description": "Admin manages requests via existing EditUserModal, NOT separate approval/reject",
      "workflow_change": [
        "Admin clicks on membership request in /admin/requests",
        "Opens EditUserModal with user data pre-filled",
        "Admin changes membership in 'Subscription' tab",
        "On save, auto-update request status to 'completed'",
        "NO separate approve/reject buttons in requests page"
      ],
      "implementation_notes": [
        "Add requestId prop to EditUserModal (optional)",
        "If requestId provided, on successful save, update request status",
        "Call new endpoint: PATCH /api/membership-requests/:id/complete"
      ]
    }
  },

  "revised_database_schema": {
    "note": "Migration already executed, but need to add payment_proof_url via new migration",
    "new_migration_required": {
      "file": "20251005000001-add-payment-proof-to-membership-requests.js",
      "action": "ALTER TABLE membership_change_requests ADD COLUMN payment_proof_url VARCHAR(500) NULL",
      "note": "Claude should create and run this migration"
    },
    "final_columns": [
      "id (uuid)",
      "user_id (uuid NOT NULL)",
      "current_membership_type (varchar(50))",
      "requested_membership_type (varchar(50) NOT NULL)",
      "status (enum: 'pending', 'approved', 'rejected', 'completed')",
      "request_notes (text)",
      "payment_proof_url (varchar(500)) - NEW",
      "requested_at (timestamp)",
      "processed_at (timestamp)",
      "processed_by (uuid)",
      "rejection_reason (text)",
      "admin_notes (text)",
      "created_at, updated_at (timestamps)"
    ],
    "status_workflow_updated": {
      "pending": "Initial state when user creates request",
      "completed": "Admin updated user membership via EditUserModal (final state)",
      "rejected": "Admin rejected request with reason (final state)",
      "approved": "DEPRECATED - now goes directly to 'completed'"
    }
  },

  "implementation_checklist": {
    "backend": [
      {
        "step": 1,
        "task": "Create Sequelize Model",
        "file": "/backend/src/models/MembershipChangeRequest.ts",
        "requirements": [
          "Import from sequelize and define MembershipChangeRequest model",
          "Include payment_proof_url field (VARCHAR 500, nullable)",
          "Status enum: ['pending', 'completed', 'rejected']",
          "Add associations: belongsTo User (for user_id and processed_by)",
          "Include toPublicJSON() method",
          "Use underscored: true for snake_case mapping"
        ],
        "critical_notes": [
          "DO NOT modify User model",
          "Ensure timestamps: true for created_at/updated_at"
        ]
      },
      {
        "step": 2,
        "task": "Export Model from Index",
        "file": "/backend/src/models/index.ts",
        "requirements": [
          "Import MembershipChangeRequest",
          "Export with other models",
          "DO NOT modify existing exports"
        ]
      },
      {
        "step": 3,
        "task": "Create API Routes",
        "file": "/backend/src/routes/membership-requests.ts",
        "requirements": [
          "Import Router, authenticate, authorize middleware",
          "Import MembershipChangeRequest, User models",
          "Implement 5 endpoints (see below)",
          "Use asyncHandler for all routes",
          "Apply proper authorization"
        ],
        "endpoints": [
          {
            "method": "POST",
            "path": "/api/membership-requests",
            "auth": "authenticate (any user)",
            "description": "Create new membership change request",
            "validation": [
              "Check user.profileInfo.phoneNumber exists (required)",
              "requested_membership_type: required, string, max 50 chars",
              "request_notes: optional, string, max 1000 chars",
              "payment_proof_url: optional, string, max 500 chars (valid URL)"
            ],
            "logic": [
              "1. Validate user has phoneNumber registered",
              "2. Get current_membership_type from user.subscription?.type or null",
              "3. Check no pending requests exist for this user",
              "4. Create request with status='pending', requested_at=NOW()",
              "5. Include payment_proof_url if provided",
              "6. Return created request with user data"
            ],
            "error_handling": [
              "400: If phoneNumber missing → 'Debes tener un número de teléfono registrado'",
              "409: If pending request exists → 'Ya tienes una solicitud pendiente'",
              "500: Database errors"
            ]
          },
          {
            "method": "GET",
            "path": "/api/membership-requests/my-requests",
            "auth": "authenticate (any user)",
            "description": "Get current user's membership change requests",
            "query_params": [
              "status: optional filter",
              "limit: optional, default 20",
              "offset: optional, default 0"
            ],
            "logic": [
              "1. Query WHERE user_id = req.user.id",
              "2. Apply status filter if provided",
              "3. Order by requested_at DESC",
              "4. Include processor info if exists",
              "5. Return paginated results"
            ]
          },
          {
            "method": "GET",
            "path": "/api/membership-requests/pending",
            "auth": "authorize(['admin', 'operator'])",
            "description": "Admin: Get all pending membership requests",
            "query_params": [
              "search: optional (username, email)",
              "limit: optional, default 100"
            ],
            "logic": [
              "1. Query WHERE status = 'pending'",
              "2. Include user (username, email, profileInfo)",
              "3. Apply search if provided",
              "4. Order by requested_at ASC",
              "5. Return with total count"
            ]
          },
          {
            "method": "PATCH",
            "path": "/api/membership-requests/:id/complete",
            "auth": "authorize(['admin'])",
            "description": "Mark request as completed (called from EditUserModal after membership update)",
            "validation": [
              "admin_notes: optional, string, max 500 chars"
            ],
            "logic": [
              "1. Find request by ID",
              "2. Check status === 'pending'",
              "3. Update: status='completed', processed_at=NOW(), processed_by=req.user.id",
              "4. Save admin_notes if provided",
              "5. Return updated request"
            ],
            "note": "This is called automatically by EditUserModal after successful membership change"
          },
          {
            "method": "PATCH",
            "path": "/api/membership-requests/:id/reject",
            "auth": "authorize(['admin'])",
            "description": "Admin: Reject membership change request",
            "validation": [
              "rejection_reason: required, string, min 10 chars",
              "admin_notes: optional, string, max 500 chars"
            ],
            "logic": [
              "1. Find request by ID",
              "2. Check status === 'pending'",
              "3. Update: status='rejected', processed_at=NOW(), processed_by=req.user.id",
              "4. Save rejection_reason and admin_notes",
              "5. Return updated request"
            ]
          }
        ],
        "critical_notes": [
          "NO transaction needed - single table updates only",
          "NEVER modify wallet routes",
          "Spanish error messages for user-facing errors"
        ]
      },
      {
        "step": 4,
        "task": "Register Routes in Server",
        "file": "/backend/src/server.ts",
        "requirements": [
          "Import membership-requests routes",
          "Register with app.use('/api/membership-requests', router)",
          "Place AFTER wallet routes"
        ]
      }
    ],
    "frontend": [
      {
        "step": 5,
        "task": "Add API Service Methods",
        "file": "/frontend/src/services/api.ts",
        "requirements": [
          "Create membershipRequestsAPI object",
          "5 methods matching backend endpoints",
          "Use apiRequest helper",
          "Proper TypeScript types"
        ],
        "methods": [
          "createRequest({ requestedMembershipType, requestNotes?, paymentProofUrl? })",
          "getMyRequests({ status?, limit?, offset? })",
          "getPendingRequests({ search?, limit? })",
          "completeRequest({ requestId, adminNotes? })",
          "rejectRequest({ requestId, rejectionReason, adminNotes? })"
        ]
      },
      {
        "step": 6,
        "task": "Create TypeScript Interface",
        "file": "/frontend/src/types/index.ts",
        "interface": {
          "MembershipChangeRequest": {
            "id": "string",
            "userId": "string",
            "currentMembershipType": "string | null",
            "requestedMembershipType": "string",
            "status": "'pending' | 'completed' | 'rejected'",
            "requestNotes": "string | null",
            "paymentProofUrl": "string | null",
            "requestedAt": "string",
            "processedAt": "string | null",
            "processedBy": "string | null",
            "rejectionReason": "string | null",
            "adminNotes": "string | null",
            "user": "{ username: string, email: string, profileInfo?: { fullName?: string, phoneNumber?: string } }",
            "processor": "{ username: string } | null"
          }
        }
      },
      {
        "step": 7,
        "task": "Implement Request Modal in MembershipSection",
        "file": "/frontend/src/components/user/MembershipSection.tsx",
        "requirements": [
          "Create modal for membership change request",
          "Display bank account info at top of modal",
          "Form fields: membership type selector, request notes, optional payment proof upload",
          "Validate phoneNumber exists before allowing submission",
          "Show success/error messages"
        ],
        "bank_info_display": {
          "title": "Información para Transferencia",
          "fields": [
            "Banco: Banco Pichincha",
            "Tipo: Cuenta Corriente",
            "Número: 2100123456",
            "Beneficiario: GalloBets S.A.",
            "RUC: 1792345678001"
          ],
          "note": "Realiza tu transferencia y opcionalmente sube el comprobante"
        },
        "form_fields": [
          {
            "name": "requestedMembershipType",
            "type": "select",
            "options": ["basic", "premium", "vip"],
            "label": "Tipo de membresía solicitada",
            "required": true
          },
          {
            "name": "requestNotes",
            "type": "textarea",
            "label": "Motivo de la solicitud (opcional)",
            "rows": 3
          },
          {
            "name": "paymentProof",
            "type": "file",
            "label": "Comprobante de pago (opcional)",
            "accept": "image/*",
            "note": "Upload image via uploadsAPI.uploadImage() first, then include URL"
          }
        ],
        "validation": [
          "phoneNumber must exist: if (!user.profileInfo?.phoneNumber) show error",
          "requestedMembershipType required",
          "paymentProof: validate image type/size if provided",
          "Upload proof to /api/uploads/image, get URL, include in request"
        ],
        "workflow": [
          "1. User clicks 'Solicitar Cambio de Membresía'",
          "2. Modal opens, shows bank info",
          "3. User selects membership type",
          "4. User optionally uploads payment proof",
          "5. User adds notes, submits",
          "6. If paymentProof file selected: upload to /api/uploads/image first",
          "7. Create request with all data including paymentProofUrl",
          "8. Show success message, close modal"
        ]
      },
      {
        "step": 8,
        "task": "Extend Admin Requests Page",
        "file": "/frontend/src/pages/admin/Requests.tsx",
        "requirements": [
          "Add 'Membresías' tab",
          "Display pending membership requests",
          "On click: open EditUserModal with user data",
          "Pass requestId to EditUserModal",
          "NO approve/reject buttons - EditUserModal handles completion"
        ],
        "request_card_display": [
          "user.username",
          "currentMembershipType → requestedMembershipType (with arrow)",
          "requestNotes (truncated)",
          "paymentProofUrl (show thumbnail if exists)",
          "requestedAt (formatted date)",
          "Action: 'Gestionar Usuario' button → opens EditUserModal"
        ],
        "modal_integration": {
          "note": "EditUserModal receives requestId prop",
          "on_save": "If requestId exists, call membershipRequestsAPI.completeRequest(requestId)",
          "auto_complete": "Request marked 'completed' when membership successfully updated"
        }
      },
      {
        "step": 9,
        "task": "Update EditUserModal for Request Completion",
        "file": "/frontend/src/components/admin/EditUserModal.tsx",
        "requirements": [
          "Add optional requestId prop",
          "On successful save in Subscription tab",
          "If requestId provided, call completeRequest API",
          "Show confirmation: 'Usuario actualizado y solicitud completada'"
        ],
        "implementation": [
          "Add requestId?: string to component props",
          "In handleSave for subscription tab:",
          "  1. Update user subscription (existing logic)",
          "  2. If (requestId) { await membershipRequestsAPI.completeRequest(requestId) }",
          "  3. Show success message including request completion"
        ]
      }
    ]
  },

  "error_mitigation_strategy": {
    "prevent_destructive_edits": [
      "NEVER modify wallet withdrawal request files",
      "DO NOT change User, Wallet, Transaction models",
      "ONLY add MembershipChangeRequest model and routes",
      "Do NOT 'improve' existing patterns - copy exactly"
    ],
    "database_safety": [
      "Migration already executed by Claude",
      "Only single-table updates (no transactions needed)",
      "Validate user.profileInfo.phoneNumber before allowing request",
      "Check for existing pending requests before creating new one"
    ],
    "typescript_safety": [
      "Define MembershipChangeRequest interface first",
      "Match backend snake_case to frontend camelCase",
      "Proper typing for all API responses",
      "Avoid 'any' types"
    ]
  },

  "validation_checklist": {
    "before_completion": [
      "✅ MembershipChangeRequest model created with payment_proof_url",
      "✅ 5 API endpoints implemented",
      "✅ Routes registered in server.ts",
      "✅ membershipRequestsAPI added to api.ts",
      "✅ MembershipChangeRequest interface in types",
      "✅ Request modal in MembershipSection with bank info display",
      "✅ Payment proof upload working",
      "✅ PhoneNumber validation enforced",
      "✅ Membership tab in admin/requests",
      "✅ EditUserModal updated with requestId handling",
      "✅ NO separate approve/reject buttons",
      "✅ Request auto-completes when admin updates membership",
      "✅ NO modifications to wallet files",
      "✅ TypeScript compiles without errors"
    ]
  },

  "testing_requirements": {
    "user_flow_tests": [
      "1. User WITHOUT phone number tries to request → shows error",
      "2. User WITH phone number requests membership change",
      "3. User uploads optional payment proof",
      "4. Request appears in admin pending tab",
      "5. Admin clicks 'Gestionar Usuario', EditUserModal opens",
      "6. Admin changes membership in Subscription tab, saves",
      "7. Request status auto-updates to 'completed'",
      "8. User sees completed request in their history"
    ],
    "edge_cases": [
      "User with pending request tries to create another → 409 error",
      "User without phoneNumber → validation error",
      "Admin rejects request → status = 'rejected', rejection_reason saved",
      "Payment proof upload fails → show error, allow retry",
      "EditUserModal opened without requestId → normal behavior (no auto-complete)"
    ]
  },

  "spanish_text_requirements": {
    "bank_info_section": {
      "title": "Información para Transferencia Bancaria",
      "subtitle": "Realiza tu depósito o transferencia a la siguiente cuenta:",
      "fields": {
        "bank": "Banco: Banco Pichincha",
        "type": "Tipo de Cuenta: Corriente",
        "number": "Número de Cuenta: 2100123456",
        "holder": "Beneficiario: GalloBets S.A.",
        "ruc": "RUC: 1792345678001"
      },
      "note": "Luego de realizar la transferencia, puedes subir tu comprobante (opcional)"
    },
    "form_labels": {
      "membership_type": "Tipo de Membresía Solicitada",
      "request_notes": "Motivo de la Solicitud (opcional)",
      "payment_proof": "Comprobante de Pago (opcional)",
      "upload_proof": "Subir Comprobante"
    },
    "error_messages": {
      "no_phone": "Debes tener un número de teléfono registrado en tu perfil para solicitar cambios de membresía",
      "pending_exists": "Ya tienes una solicitud de cambio de membresía pendiente",
      "invalid_proof": "El comprobante debe ser una imagen válida (JPG, PNG o WebP)",
      "upload_failed": "Error al subir el comprobante. Intenta de nuevo"
    },
    "success_messages": {
      "request_created": "Solicitud de cambio de membresía enviada correctamente",
      "request_completed": "Usuario actualizado y solicitud de membresía completada"
    }
  },

  "files_summary": {
    "new_files": [
      "/backend/src/models/MembershipChangeRequest.ts",
      "/backend/src/routes/membership-requests.ts"
    ],
    "modified_files": [
      "/backend/src/models/index.ts (export only)",
      "/backend/src/server.ts (route registration)",
      "/frontend/src/services/api.ts (add membershipRequestsAPI)",
      "/frontend/src/types/index.ts (add interface)",
      "/frontend/src/components/user/MembershipSection.tsx (add modal)",
      "/frontend/src/pages/admin/Requests.tsx (add tab)",
      "/frontend/src/components/admin/EditUserModal.tsx (add requestId handling)"
    ],
    "unchanged_files_verify": [
      "/backend/src/routes/wallet.ts (MUST NOT CHANGE)",
      "/backend/src/models/User.ts (MUST NOT CHANGE)",
      "/backend/src/models/Wallet.ts (MUST NOT CHANGE)"
    ]
  },

  "final_instructions": {
    "BEFORE_STARTING_CHECKLIST": [
      "☐ Read /backend/database-analysis/membership-change-requests-table.json",
      "☐ Read /frontend/src/pages/admin/Requests.tsx withdrawal pattern",
      "☐ Read /frontend/src/components/admin/EditUserModal.tsx structure",
      "☐ Understand: NO separate approve/reject, use EditUserModal instead",
      "☐ Understand: phoneNumber validation REQUIRED",
      "☐ Understand: payment proof is OPTIONAL",
      "☐ Promise: if stuck 3x, STOP and report"
    ],
    "workflow": [
      "1. Complete BEFORE_STARTING_CHECKLIST",
      "2. Use TodoWrite to track 9 implementation steps",
      "3. Implement backend (steps 1-4) first",
      "4. Test backend endpoints via Postman/curl",
      "5. Implement frontend (steps 5-9)",
      "6. Test complete user flow",
      "7. Verify NO changes to wallet files",
      "8. Provide summary of changes"
    ],
    "ERROR_RECOVERY_PROTOCOL": [
      "Attempt 1: Read error, fix",
      "Attempt 2: Different approach",
      "Attempt 3: Last try - if fails, REVERT and REPORT",
      "NEVER Attempt 4+: you're in a loop"
    ]
  }
}
