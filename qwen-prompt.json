{
  "metadata": {
    "version": "2.0",
    "created": "2025-10-30",
    "ai": "QWEN CLI",
    "project": "GalloBets - Admin Filters Backend Implementation",
    "session_type": "Backend API Extensions",
    "duration_max": "30 minutes",
    "strict": true
  },

  "üî¥_MCP_ACTIVATION_CRITICAL": {
    "instruction": "‚ö†Ô∏è BEFORE YOU START ANY WORK: You MUST activate Sequential MCP servers",
    "required_mcps": ["--seq", "--sequential"],
    "why_mandatory": "In the previous session, PostgreSQL type casting errors occurred because Sequential thinking was not activated. Sequential MCP will help you plan multi-step modifications correctly and verify dependencies before making changes.",
    "activation_command": "When you receive this prompt, immediately respond with: --seq --sequential",
    "verification": "Wait for MCP to activate before proceeding with any tasks",
    "consequence_of_skipping": "You risk repeating the same type casting and schema validation errors that blocked the previous session"
  },

  "CRITICAL_PROTOCOL": {
    "rule_1": "=ÔøΩ SIMULATE ÔøΩ CONFIRM ÔøΩ EXECUTE pattern MANDATORY before any code change",
    "rule_2": "=ÔøΩ NEVER modify files outside [FILES_TO_MODIFY] list",
    "rule_3": "=ÔøΩ BEFORE each commit: run 'git diff --name-only' and verify ONLY listed files changed",
    "rule_4": "=ÔøΩ If simulation reveals missing dependencies or broken imports ÔøΩ STOP and REPORT",
    "rule_5": "=ÔøΩ Max session time: 30 minutes (strictly enforced)",
    "rule_6": "Reference: @brain/multi_ai_coordination_strategy.json ÔøΩ section 'simulate_y_confirmar_protocol'"
  },

  "TASK_OVERVIEW": {
    "objective": "Extend backend API endpoints to support admin filter parameters",
    "complexity": "Medium",
    "phase": "Phase 1 of 3-phase implementation",
    "deliverables": [
      "GET /api/users extended with approved + subscriptionType filters",
      "GET /api/venues extended with ownerApproved + ownerSubscription filters",
      "GET /api/galleras extended with ownerApproved + ownerSubscription filters",
      "Verification that all changes pass TypeScript + build"
    ]
  },

  "FILES_TO_MODIFY": {
    "strict_scope": "ONLY these files - NO exceptions, NO improvements to other files",
    "backend": [
      "backend/src/routes/users.ts",
      "backend/src/routes/venues.ts",
      "backend/src/routes/galleras.ts"
    ],
    "danger_if_modified": [
      "backend/src/middleware/auth.ts (NEVER without explicit instruction)",
      "backend/src/models/* (NEVER without explicit instruction)",
      "Any database migration files (NEVER without explicit instruction)"
    ]
  },

  "FILES_TO_CONSULT": {
    "mandatory": [
      {
        "file": "@brain/multi_ai_coordination_strategy.json",
        "sections": [
          "simulate_y_confirmar_protocol - MANDATORY before each change",
          "qwen_cli_optimizations - understand your role and limitations",
          "critical_safety_restrictions - know what you're NOT allowed to do"
        ],
        "purpose": "Understand safety protocols and error prevention"
      },
      {
        "file": "@brain/api_endpoints_reference.json",
        "sections": [
          "GET /api/users (line 1-50) - understand current parameters",
          "GET /api/venues (line 100-150) - understand current parameters",
          "GET /api/galleras (line 200-250) - understand current parameters"
        ],
        "purpose": "Know exact current API contract before modifying"
      },
      {
        "file": "FILTERS_IMPLEMENTATION_PLAN.md",
        "sections": [
          "Section 3.1 - Extend GET /api/users with new filters",
          "Section 3.2 - Extend GET /api/venues with new filters",
          "Section 3.3 - Extend GET /api/galleras with new filters",
          "Section 4 - Backend API Extensions (Detailed Implementation)"
        ],
        "purpose": "Exact specification of what to implement"
      },
      {
        "file": "backend/database-analysis/CURRENT_TABLES.json",
        "sections": [
          "users table structure - verify all columns including subscriptionType handling",
          "venues table structure - understand entity relationships",
          "subscriptions table columns - understand how to JOIN for subscription filtering"
        ],
        "purpose": "Understand actual database schema (contains all column definitions)"
      }
    ],
    "reference": [
      "@brain/typescript_interfaces_reference.json - Review Subscription interface",
      "backend/src/models/Subscription.ts - Understand Subscription model"
    ]
  },

  "RECOMMENDED_MCP_SERVERS": {
    "primary": ["--seq", "--sequential"],
    "reasoning": "Sequential thinking for multi-step API modifications with dependency analysis",
    "usage": "Use Sequential to plan filter logic + dependency verification before coding"
  },

  "IMPLEMENTATION_SPECIFICATION": {
    "task_1_get_api_users_filters": {
      "file": "backend/src/routes/users.ts",
      "current_state": "Line 54: Supports role, isActive, search parameters",
      "required_additions": [
        "approved (boolean) - filter users by approval status",
        "subscriptionType (enum: 'free' | 'daily' | 'monthly') - filter by subscription"
      ],
      "simulation_template": [
        "[SIMULATE] Adding approved filter to users.ts:",
        "  1. Parameter: const approved = req.query.approved",
        "  2. Logic: if (approved) where.approved = approved === 'true'",
        "  3. No new imports needed? Check line 3-10 for existing Op",
        "  4. Testing: curl 'http://localhost:3001/api/users?approved=true'",
        "",
        "[CONFIRM] Before modifying:",
        "   Op is imported from sequelize (grep 'import.*Op')",
        "   where clause pattern exists (grep 'where\\.approved')",
        "   No circular dependencies",
        "",
        "[EXECUTE] Make changes"
      ],
      "implementation_challenge": "subscriptionType filtering requires Subscription model JOIN",
      "reference": "FILTERS_IMPLEMENTATION_PLAN.md Section 4 for subscription filtering solution",
      "testing": "curl 'http://localhost:3001/api/users?subscriptionType=monthly'"
    },

    "task_2_get_api_venues_filters": {
      "file": "backend/src/routes/venues.ts",
      "current_state": "Line 40: Supports status parameter only",
      "required_additions": [
        "ownerApproved (boolean) - filter by user.approved status",
        "ownerSubscription (enum: 'free' | 'daily' | 'monthly') - filter by owner subscription",
        "search (string) - search by venue name or owner username"
      ],
      "note": "Same challenge as users.ts but filtering USER properties via JOIN",
      "reference": "FILTERS_IMPLEMENTATION_PLAN.md Section 3.2 for detailed code example",
      "testing": "curl 'http://localhost:3001/api/venues?ownerApproved=true&ownerSubscription=monthly'"
    },

    "task_3_get_api_galleras_filters": {
      "file": "backend/src/routes/galleras.ts",
      "current_state": "Line 18: Supports status parameter only",
      "required_additions": "Identical to venues.ts - same filter parameters",
      "note": "Copy pattern from venues.ts - should be straightforward",
      "reference": "FILTERS_IMPLEMENTATION_PLAN.md Section 3.3",
      "testing": "curl 'http://localhost:3001/api/galleras?ownerApproved=true&ownerSubscription=monthly'"
    }
  },

  "ERROR_PREVENTION_PROTOCOL": {
    "before_each_modification": {
      "step_1": "Read the target file completely - understand full context",
      "step_2": "Identify ALL imports at top - verify needed models are imported",
      "step_3": "Simulate change - describe exactly what you'll add",
      "step_4": "Grep actual code - confirm assumptions (grep -n 'import.*Subscription' backend/src/routes/users.ts)",
      "step_5": "If grep returns nothing - STOP and REPORT: '[SIMULATION FAILED] Subscription not imported'",
      "step_6": "Only proceed if CONFIRM step succeeds"
    },
    "validation_gates": [
      "npm install (if package.json changed - should NOT happen)",
      "npx tsc --noEmit (zero TypeScript errors required)",
      "npm run build (must succeed completely)",
      "git diff --name-only (verify ONLY target files modified)"
    ],
    "on_error": {
      "situation": "Any validation gate fails",
      "action": "REVERT changes immediately - do NOT attempt fix",
      "report_format": "[IMPLEMENTATION FAILED] in [filename]:\nError: [exact error message]\nRoots cause analysis: [why it happened]\nRecommendation: [what should be done instead]"
    }
  },

  "QUALITY_CHECKLIST": {
    "before_commit": [
      " Simulate ÔøΩ Confirm protocol completed for each change",
      " All TypeScript types correct (Query parameters, response types)",
      " No new dependencies added without npm install",
      " npx tsc --noEmit passes with zero errors",
      " npm run build succeeds",
      " git diff --name-only shows ONLY users.ts, venues.ts, galleras.ts",
      " Commit message includes [SIMULATED] [CONFIRMED] tags",
      " Test commands documented in commit message"
    ]
  },

  "TESTING_COMMANDS": {
    "unit_tests": [
      "curl 'http://localhost:3001/api/users?role=user&approved=true'",
      "curl 'http://localhost:3001/api/users?subscriptionType=monthly'",
      "curl 'http://localhost:3001/api/venues?ownerApproved=true'",
      "curl 'http://localhost:3001/api/venues?ownerSubscription=monthly'",
      "curl 'http://localhost:3001/api/galleras?status=pending&ownerApproved=true'"
    ],
    "build_validation": [
      "npx tsc --noEmit",
      "npm run build",
      "npm run lint"
    ]
  },

  "GIT_WORKFLOW": {
    "branch": "Always work on feature branch, never main",
    "commit_message_format": "feat: Add filter parameters to admin API endpoints\n\n[SIMULATED]\n- Added approved filter to GET /api/users\n- Added subscriptionType filter to GET /api/users\n- Added ownerApproved filter to GET /api/venues\n- Added ownerSubscription filter to GET /api/venues/galleras\n- Added search parameter to GET /api/venues/galleras\n\n[CONFIRMED]\n Subscription model imported\n Sequelize Op imported\n No circular dependencies\n All filters follow existing pattern\n\n[TESTED]\n npx tsc --noEmit passes\n npm run build succeeds\n Verified with curl commands\n\n> Generated with QWEN CLI\nCo-Authored-By: QWEN <noreply@anthropic.com>",
    "scope_validation": "Run 'git diff --name-only' before commit - output must be:\nbackend/src/routes/users.ts\nbackend/src/routes/venues.ts\nbackend/src/routes/galleras.ts"
  },

  "WHAT_NOT_TO_DO": {
    "never": [
      "L Modify auth.ts, User.ts, or database migration files",
      "L Change database schema (that's for SQL migrations)",
      "L Add new dependencies without npm install",
      "L Skip TypeScript compilation validation",
      "L Commit changes that fail build",
      "L Modify files outside [FILES_TO_MODIFY] list",
      "L Attempt 'improvements' to other files (no scope creep)",
      "L Commit without [SIMULATED] [CONFIRMED] tags"
    ],
    "if_tempted": "Pause and document the opportunity in [OUT_OF_SCOPE] format instead of making changes"
  },

  "HANDOFF_REQUIREMENTS": {
    "when_complete": "Provide Claude with:",
    "deliverables": [
      "List of exact changes made (git diff output)",
      "TypeScript compilation status (output of npx tsc --noEmit)",
      "Build status (output of npm run build)",
      "Test command results (curl commands executed)",
      "Any blockers or issues encountered",
      "Commit hash and branch name"
    ],
    "session_summary": {
      "ai_used": "QWEN",
      "duration_actual": "[actual time spent]",
      "files_modified": "[list with line count changes]",
      "validation_status": "[all gates passed / failed with details]",
      "next_ai_context": "Frontend implementation ready to start (Gemini)"
    }
  },

  "SUCCESS_CRITERIA": {
    "task_complete": [
      " GET /api/users supports approved + subscriptionType filters",
      " GET /api/venues supports ownerApproved + ownerSubscription + search",
      " GET /api/galleras supports ownerApproved + ownerSubscription + search",
      " TypeScript compilation passes",
      " npm run build succeeds",
      " Test commands return correct filtered results",
      " git diff shows ONLY approved files modified",
      " Commit message includes simulation/confirmation tags"
    ]
  }
}
