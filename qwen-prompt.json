{
  "metadata": {
    "session_id": "optimization-testing-documentation-2025-10-12",
    "created_by": "Claude",
    "assigned_to": "QWEN",
    "purpose": "Create testing scripts, execute load tests, document optimizations",
    "estimated_duration": "6 hours over 2 days",
    "coordination": "QWEN (scripts/tests/docs) → Claude (validation)",
    "version": "1.0"
  },

  "CRITICAL_INSTRUCTION": {
    "task_type": "TESTING & DOCUMENTATION ONLY - NO CODE MODIFICATIONS",
    "forbidden": "NEVER modify backend or frontend code",
    "allowed": "Create scripts, run tests, write documentation",
    "progress_tracking": "Update progress_log after EACH task",
    "validation": "Claude reviews all scripts before execution"
  },

  "task_summary": {
    "total_tasks": 6,
    "estimated_hours": 6,
    "scripts": "Load testing scripts (tasks 1-2)",
    "testing": "Execute performance tests (task 3-4)",
    "documentation": "Optimization summary report (tasks 5-6)"
  },

  "allowed_operations": [
    "Create new files in scripts/ directory",
    "Create documentation in claudedocs/",
    "Execute read-only commands (tests, curl, monitoring)",
    "Update this JSON's progress_log"
  ],

  "forbidden_operations": [
    "Modify ANY backend code (.ts, .js files in backend/src/)",
    "Modify ANY frontend code (files in frontend/src/)",
    "Run database migrations",
    "Modify configuration files",
    "Execute destructive commands (rm, DROP, DELETE)"
  ],

  "task_decomposition": [
    {
      "task_id": "qwen-1",
      "title": "Create load testing script for optimized APIs",
      "description": "Create autocannon-based load test script for performance validation",
      "estimated_hours": 1.5,
      "file_to_create": "scripts/load-test-optimized.sh",
      "dependencies": [],
      "script_requirements": {
        "tool": "autocannon (npm install -g autocannon)",
        "endpoints_to_test": [
          "GET /api/events (50 concurrent users, 30 seconds)",
          "GET /api/fights (50 concurrent users, 30 seconds)",
          "GET /api/bets (25 concurrent users, 30 seconds)",
          "GET /api/venues (25 concurrent users, 30 seconds)"
        ],
        "metrics_to_capture": [
          "Requests per second (throughput)",
          "Average response time",
          "p95 response time",
          "p99 response time",
          "Error rate"
        ],
        "output_format": "Save results to claudedocs/load-test-results.json"
      },
      "script_template": "#!/bin/bash\n\necho 'Testing Events API...'\nautocannon -c 50 -d 30 -j http://localhost:3001/api/events > claudedocs/load-test-events.json\n\necho 'Testing Fights API...'\nautocannon -c 50 -d 30 -j http://localhost:3001/api/fights > claudedocs/load-test-fights.json\n\n# Add other endpoints...\n\necho 'Load tests complete. Results saved to claudedocs/'"
    },

    {
      "task_id": "qwen-2",
      "title": "Create Redis monitoring script",
      "description": "Create script to monitor Redis cache performance",
      "estimated_hours": 1,
      "file_to_create": "scripts/monitor-redis.sh",
      "dependencies": [],
      "script_requirements": {
        "redis_commands": [
          "INFO stats (get hit/miss rates)",
          "INFO memory (get memory usage)",
          "DBSIZE (get key count)",
          "SLOWLOG GET 10 (get slow queries)"
        ],
        "output": "Save Redis stats to claudedocs/redis-stats.json every 10 seconds during testing",
        "duration": "Run for 5 minutes during load tests"
      },
      "script_template": "#!/bin/bash\n\nfor i in {1..30}; do\n  redis-cli INFO stats | grep -E 'keyspace_hits|keyspace_misses'\n  redis-cli INFO memory | grep 'used_memory_human'\n  redis-cli DBSIZE\n  sleep 10\ndone"
    },

    {
      "task_id": "qwen-3",
      "title": "Execute baseline performance tests (BEFORE optimizations)",
      "description": "Run load tests on current system to establish baseline",
      "estimated_hours": 0.5,
      "dependencies": ["qwen-1"],
      "commands_to_run": [
        "bash scripts/load-test-optimized.sh",
        "Save results with prefix 'before-'"
      ],
      "deliverable": {
        "files": [
          "claudedocs/before-load-test-events.json",
          "claudedocs/before-load-test-fights.json",
          "claudedocs/before-load-test-bets.json",
          "claudedocs/before-load-test-venues.json"
        ],
        "summary": "Extract key metrics (p95 response time, throughput) into summary table"
      },
      "wait_for": "Claude to confirm baseline testing can begin"
    },

    {
      "task_id": "qwen-4",
      "title": "Execute performance tests AFTER optimizations",
      "description": "Run load tests after Claude completes optimizations",
      "estimated_hours": 0.5,
      "dependencies": ["qwen-3", "WAIT FOR CLAUDE to complete all optimizations"],
      "commands_to_run": [
        "bash scripts/load-test-optimized.sh",
        "bash scripts/monitor-redis.sh (in parallel)",
        "Save results with prefix 'after-'"
      ],
      "deliverable": {
        "files": [
          "claudedocs/after-load-test-events.json",
          "claudedocs/after-load-test-fights.json",
          "claudedocs/after-load-test-bets.json",
          "claudedocs/after-load-test-venues.json",
          "claudedocs/redis-stats.json"
        ],
        "comparison": "Create before/after comparison table"
      }
    },

    {
      "task_id": "qwen-5",
      "title": "Analyze performance improvements",
      "description": "Compare before/after results and calculate improvements",
      "estimated_hours": 1,
      "dependencies": ["qwen-3", "qwen-4"],
      "file_to_create": "claudedocs/OPTIMIZATION_PERFORMANCE_ANALYSIS.md",
      "analysis_requirements": {
        "metrics_to_compare": [
          "Response time (p95): before → after → % improvement",
          "Throughput (req/s): before → after → % improvement",
          "Database queries: before → after → % reduction",
          "Cache hit rate: N/A → after → percentage",
          "Redis memory usage: baseline → actual"
        ],
        "visualizations": "Create ASCII tables for comparisons",
        "format": "Markdown with tables and clear conclusions"
      },
      "expected_improvements": {
        "response_time": "60-80% faster",
        "db_queries": "70-80% reduction",
        "cache_hit_rate": ">75%"
      }
    },

    {
      "task_id": "qwen-6",
      "title": "Create comprehensive optimization summary",
      "description": "Compile all findings into executive summary",
      "estimated_hours": 1.5,
      "dependencies": ["qwen-5"],
      "file_to_create": "claudedocs/OPTIMIZATION_EXECUTIVE_SUMMARY.md",
      "required_sections": [
        {
          "section": "Executive Summary",
          "content": "2-3 paragraph overview of optimizations and results"
        },
        {
          "section": "Optimizations Implemented",
          "content": "List all changes made by Claude (database, caching)"
        },
        {
          "section": "Performance Improvements",
          "content": "Before/after metrics table from qwen-5 analysis"
        },
        {
          "section": "Cost Savings Validation",
          "content": "Verify $16K-$17K monthly savings based on query reduction"
        },
        {
          "section": "Redis Cache Analysis",
          "content": "Hit rate, memory usage, effectiveness"
        },
        {
          "section": "Recommendations",
          "content": "Next optimization opportunities"
        },
        {
          "section": "Production Readiness",
          "content": "Checklist for deploying to production"
        }
      ],
      "deliverable": "Final report for user review"
    }
  ],

  "test_execution_guidelines": {
    "before_running_tests": [
      "Verify backend is running (curl http://localhost:3001/api/health)",
      "Verify Redis is running (redis-cli PING)",
      "Clear Redis cache (redis-cli FLUSHALL) for clean baseline",
      "Wait for Claude approval to begin"
    ],
    "during_tests": [
      "Monitor server logs for errors",
      "Monitor system resources (CPU, memory)",
      "Capture any error messages"
    ],
    "after_tests": [
      "Save all results immediately",
      "Calculate summary metrics",
      "Update progress_log in this JSON"
    ]
  },

  "safety_protocols": {
    "read_only_commands": {
      "allowed": [
        "curl (GET requests only)",
        "redis-cli INFO, DBSIZE, MONITOR",
        "autocannon (load testing)",
        "grep, cat, ls (file reading)",
        "npm run test (execute tests)"
      ],
      "forbidden": [
        "redis-cli FLUSHALL (unless explicitly instructed)",
        "rm (file deletion)",
        "Any database commands (psql, DROP, DELETE)",
        "npm run migrate (database changes)",
        "pm2 stop/restart (service management)"
      ]
    },
    "file_creation_rules": {
      "allowed_directories": [
        "scripts/",
        "claudedocs/"
      ],
      "forbidden_directories": [
        "backend/src/",
        "frontend/src/",
        "backend/migrations/"
      ],
      "file_naming": "Use descriptive names with dates (e.g., load-test-2025-10-12.sh)"
    }
  },

  "progress_log": {
    "INSTRUCTION": "QWEN: Update IMMEDIATELY after each task",
    "format": {
      "timestamp": "2025-10-12T10:00:00Z",
      "task_id": "qwen-1",
      "file_created": "scripts/load-test-optimized.sh",
      "status": "completed",
      "next_task": "qwen-2",
      "issues": "None"
    },
    "entries": []
  },

  "validation_criteria": {
    "scripts_quality": [
      "Scripts are executable (chmod +x)",
      "Scripts have error handling",
      "Scripts save results to correct location",
      "No destructive commands"
    ],
    "test_execution": [
      "All tests completed without errors",
      "Results saved in correct format",
      "Metrics calculated correctly"
    ],
    "documentation_quality": [
      "Clear, concise writing",
      "Tables formatted correctly",
      "Metrics accurately represent test results",
      "Conclusions supported by data"
    ]
  },

  "coordination_with_claude": {
    "handoff_points": [
      "After qwen-2: Claude reviews scripts before execution",
      "After qwen-3: Claude reviews baseline results",
      "After qwen-5: Claude validates analysis accuracy",
      "After qwen-6: Claude reviews final summary"
    ],
    "communication": "Update progress_log → Claude reviews within 30 minutes"
  }
}
