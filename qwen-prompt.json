{
  "task_id": "SUBSCRIPTION_CREATE_MODE_FIX_2025_11_01",
  "task_type": "BUG_FIX + VALIDATION_ANALYSIS",
  "complexity": "MEDIUM (5/10)",
  "session_model_required": "QWEN2.5-Coder 32B Instruct",
  "estimated_time": "60-90 minutes",
  "git_branch": "main",

  "üî¥_CRITICAL_PROTOCOLS": {
    "session_start_declaration": {
      "MANDATORY_FIRST_MESSAGE": "Model: qwen2.5-coder-32b-instruct | Task: Fix SubscriptionTabs CREATE mode + Profile validation | Activating: --c7 --context7 + --seq --sequential | Branch: main | Time: 60-90min"
    },
    "mcp_activation": {
      "--c7 --context7": "React TypeScript patterns",
      "--seq --sequential": "Multi-step analysis + fixes"
    },
    "simulate_confirm_protocol": {
      "PHASE_1_SIMULATE": "Describe changes: which files, which lines, what logic",
      "PHASE_2_CONFIRM": "Read files to verify structure exists",
      "PHASE_3_EXECUTE": "Make changes incrementally",
      "PHASE_4_VALIDATE": "npx tsc --noEmit after EACH file"
    },
    "infinite_loop_prevention": {
      "same_file_3_times": "STOP - report to user",
      "command_fails_twice": "STOP - report error"
    }
  },

  "üìã_TASK_OVERVIEW": {
    "problem_statement": "UserModal CREATE mode shows wrong button in Subscription tab ('Actualizar Membres√≠a' should be 'Crear Usuario'). Also need deep validation of /profile, /galleras, /venues pages.",
    "root_cause": "SubscriptionTabs.tsx hardcoded button text without mode awareness",
    "solution": "Pass mode prop to SubscriptionTabs, conditional button text, validate CREATE flow saves subscription AFTER user creation"
  },

  "üéØ_DELIVERABLES": [
    "1. Fix SubscriptionTabs.tsx to accept mode prop and render correct button",
    "2. Update UserModal.tsx to pass mode to SubscriptionTabs",
    "3. Unify 'membres√≠a' ‚Üí 'suscripci√≥n' terminology everywhere",
    "4. Deep validation: /profile page for user/gallera/venue roles",
    "5. Deep validation: Public /galleras and /venues pages",
    "6. Report findings in chat text AND append to brain/backlog.json"
  ],

  "üîß_STEP_0_PRE_IMPLEMENTATION_READS": {
    "MANDATORY": "Read these files BEFORE Step 1",
    "files": [
      "frontend/src/components/admin/SubscriptionTabs.tsx (understand current structure)",
      "frontend/src/components/admin/UserModal.tsx (see how SubscriptionTabs is called)",
      "frontend/src/hooks/useUserForm.ts (understand CREATE flow saves subscription)",
      "frontend/src/pages/user/Profile.tsx (validate profileInfo display logic)",
      "frontend/src/pages/user/Galleras.tsx (validate gallera card rendering)",
      "frontend/src/pages/user/Venues.tsx (validate venue card rendering)"
    ],
    "output_required": {
      "summary": "OUTPUT: 'SubscriptionTabs currently: [structure]. UserModal passes: [props]. CREATE flow: [how subscription saved]'",
      "validation": "Confirm mode prop will work with existing structure"
    }
  },

  "üìù_STEP_BY_STEP_IMPLEMENTATION": {

    "STEP_1_FIX_SUBSCRIPTION_TABS": {
      "action": "MODIFY existing file",
      "file": "frontend/src/components/admin/SubscriptionTabs.tsx",
      "purpose": "Add mode prop and conditional button text",
      "simulate": "Will add mode: 'create' | 'edit' to SubscriptionTabsProps interface (line ~25). Will update button text at line ~250 to check mode.",
      "confirm_before_modifying": [
        "Read SubscriptionTabsProps interface (line ~25-30)",
        "Find button with 'Actualizar Membres√≠a' text (line ~250)",
        "Verify onSave callback structure"
      ],
      "changes": [
        {
          "location": "Line ~25-30 (SubscriptionTabsProps interface)",
          "change": "Add: mode: 'create' | 'edit';",
          "reasoning": "Need to pass mode from UserModal to determine button text"
        },
        {
          "location": "Line ~250 (button text)",
          "old": "\"Actualizar Membres√≠a\"",
          "new": "{mode === 'create' ? 'Crear Usuario' : 'Actualizar Suscripci√≥n'}",
          "reasoning": "CREATE mode creates user+subscription, EDIT mode updates existing subscription"
        }
      ],
      "validate_after_modification": [
        "npx tsc --noEmit frontend/src/components/admin/SubscriptionTabs.tsx",
        "grep 'mode.*create.*edit' frontend/src/components/admin/SubscriptionTabs.tsx",
        "Verify: SubscriptionTabsProps has mode prop"
      ],
      "if_errors": "STOP - Report TypeScript errors - DO NOT continue"
    },

    "STEP_2_UPDATE_USER_MODAL": {
      "action": "MODIFY existing file",
      "file": "frontend/src/components/admin/UserModal.tsx",
      "purpose": "Pass mode prop to SubscriptionTabs component",
      "simulate": "Will find SubscriptionTabs component instantiation (line ~503) and add mode={mode} prop.",
      "confirm_before_modifying": [
        "Read UserModal.tsx line ~500-530 (SubscriptionTabs usage)",
        "Verify mode variable is available in scope",
        "Check if other props are passed correctly"
      ],
      "changes": [
        {
          "location": "Line ~503 (SubscriptionTabs component)",
          "change": "Add prop: mode={mode}",
          "code_example": "<SubscriptionTabs\n  mode={mode}\n  userId={user?.id || ''}\n  subscription={subscription || user?.subscription}\n  onSave={...}\n  onCancel={onClose}\n/>",
          "reasoning": "SubscriptionTabs needs mode to render correct button text"
        }
      ],
      "validate_after_modification": [
        "npx tsc --noEmit frontend/src/components/admin/UserModal.tsx",
        "grep 'mode={mode}' frontend/src/components/admin/UserModal.tsx",
        "Verify: mode prop passed to SubscriptionTabs"
      ],
      "if_errors": "STOP - Report TypeScript errors"
    },

    "STEP_3_UNIFY_TERMINOLOGY": {
      "action": "FIND AND REPLACE across files",
      "files": [
        "frontend/src/components/admin/SubscriptionTabs.tsx",
        "frontend/src/components/admin/UserModal.tsx",
        "frontend/src/pages/user/Profile.tsx"
      ],
      "purpose": "Standardize 'membres√≠a' ‚Üí 'suscripci√≥n' for consistency",
      "simulate": "Will search for 'membres√≠a', 'Membres√≠a', 'membership' and replace with 'suscripci√≥n', 'Suscripci√≥n', 'subscription' variants.",
      "confirm_before_replacing": [
        "grep -i 'membres√≠a\\|membership' frontend/src/components/admin/SubscriptionTabs.tsx",
        "List all occurrences to understand context"
      ],
      "replacements": [
        {"old": "Membres√≠a", "new": "Suscripci√≥n"},
        {"old": "membres√≠a", "new": "suscripci√≥n"},
        {"old": "Actualizar Membres√≠a", "new": "Actualizar Suscripci√≥n"},
        {"old": "Gestionar Membres√≠a", "new": "Gestionar Suscripci√≥n"}
      ],
      "validate_after_replacement": [
        "grep -i 'membres√≠a' frontend/src/components/admin/SubscriptionTabs.tsx",
        "Expected: 0 results (all replaced with suscripci√≥n)",
        "npx tsc --noEmit (verify no type errors introduced)"
      ],
      "if_errors": "Report if terminology inconsistencies remain"
    },

    "CHECKPOINT_A_TYPESCRIPT_BUILD": {
      "description": "Validate Steps 1-3 before proceeding to validation analysis",
      "commands": [
        "cd frontend && npx tsc --noEmit",
        "npm run build"
      ],
      "expected_results": [
        "TypeScript: ‚úÖ ZERO errors in SubscriptionTabs.tsx and UserModal.tsx",
        "Build: ‚úÖ SUCCESS"
      ],
      "if_fail": "STOP - Fix TypeScript errors before continuing to Step 4"
    },

    "STEP_4_VALIDATE_PROFILE_PAGE": {
      "action": "DEEP ANALYSIS (no code changes unless bugs found)",
      "file": "frontend/src/pages/user/Profile.tsx",
      "purpose": "Validate profileInfo architecture for user/gallera/venue roles",
      "analysis_checklist": [
        "A1. Does Profile.tsx correctly read user.profileInfo.verificationLevel?",
        "A2. For role='gallera': Does it display galleraName, galleraLocation, galleraDescription, galleraSpecialties, galleraActiveRoosters?",
        "A3. For role='venue': Does it display venueName, venueLocation, venueDescription, venueEmail, venueWebsite?",
        "A4. For role='user': Does it display only fullName, phoneNumber, address, identificationNumber?",
        "A5. Are images displayed correctly from user.profileInfo.images array?",
        "A6. Is there conditional rendering based on role (venue fields only show for venues)?",
        "A7. Does edit flow use userAPI.updateProfile({ profileInfo: {...} })?",
        "A8. Are form handlers properly saving nested profileInfo fields?"
      ],
      "validation_commands": [
        "grep 'profileInfo.galleraName\\|profileInfo.venueName' frontend/src/pages/user/Profile.tsx",
        "grep 'role.*venue\\|role.*gallera' frontend/src/pages/user/Profile.tsx",
        "grep 'updateProfile' frontend/src/pages/user/Profile.tsx"
      ],
      "output_required": {
        "format": "PROFILE PAGE VALIDATION:\n‚úÖ A1: [YES/NO with line number]\n‚úÖ A2: [YES/NO with evidence]\n...\n‚ùå ISSUES: [List any problems found]"
      },
      "if_issues_found": "Document in findings, propose fixes if needed"
    },

    "STEP_5_VALIDATE_PUBLIC_GALLERAS_PAGE": {
      "action": "DEEP ANALYSIS",
      "file": "frontend/src/pages/user/Galleras.tsx",
      "purpose": "Validate public gallera listing shows profileInfo correctly",
      "analysis_checklist": [
        "B1. Does page query users with role='gallera'?",
        "B2. Are gallera cards displaying user.profileInfo.galleraName?",
        "B3. Are gallera cards displaying user.profileInfo.galleraLocation?",
        "B4. Are gallera cards displaying user.profileInfo.galleraSpecialties (array)?",
        "B5. Are gallera images from user.profileInfo.images displayed?",
        "B6. Does detail view (click on gallera) show full profileInfo?",
        "B7. Is GalleraDetailPage component properly rendering all fields?",
        "B8. Are there any references to OLD Gallera table/model that should be removed?"
      ],
      "validation_commands": [
        "grep 'role.*gallera' frontend/src/pages/user/Galleras.tsx",
        "grep 'profileInfo.gallera' frontend/src/pages/user/Galleras.tsx",
        "grep -i 'gallera.*table\\|Gallera.findAll' frontend/src/pages/user/Galleras.tsx"
      ],
      "output_required": {
        "format": "GALLERAS PAGE VALIDATION:\n‚úÖ B1-B8: [YES/NO with evidence]\n‚ùå ISSUES: [List problems]"
      },
      "if_old_code_found": "Report OLD Gallera table references for removal"
    },

    "STEP_6_VALIDATE_PUBLIC_VENUES_PAGE": {
      "action": "DEEP ANALYSIS",
      "file": "frontend/src/pages/user/Venues.tsx",
      "purpose": "Validate public venue listing shows profileInfo correctly",
      "analysis_checklist": [
        "C1. Does page query users with role='venue'?",
        "C2. Are venue cards displaying user.profileInfo.venueName?",
        "C3. Are venue cards displaying user.profileInfo.venueLocation?",
        "C4. Are venue cards displaying user.profileInfo.venueDescription?",
        "C5. Are venue images from user.profileInfo.images displayed?",
        "C6. Does detail view (click on venue) show full profileInfo?",
        "C7. Is VenueDetailPage component properly rendering all fields?",
        "C8. Are there any references to OLD Venue table/model that should be removed?"
      ],
      "validation_commands": [
        "grep 'role.*venue' frontend/src/pages/user/Venues.tsx",
        "grep 'profileInfo.venue' frontend/src/pages/user/Venues.tsx",
        "grep -i 'venue.*table\\|Venue.findAll' frontend/src/pages/user/Venues.tsx"
      ],
      "output_required": {
        "format": "VENUES PAGE VALIDATION:\n‚úÖ C1-C8: [YES/NO with evidence]\n‚ùå ISSUES: [List problems]"
      },
      "if_old_code_found": "Report OLD Venue table references for removal"
    },

    "CHECKPOINT_B_VALIDATION_SUMMARY": {
      "description": "Summarize all validation findings from Steps 4-6",
      "output_format": {
        "section_1_profile_page": "Status: ‚úÖ READY / ‚ö†Ô∏è ISSUES / ‚ùå BROKEN",
        "section_2_galleras_page": "Status: ‚úÖ READY / ‚ö†Ô∏è ISSUES / ‚ùå BROKEN",
        "section_3_venues_page": "Status: ‚úÖ READY / ‚ö†Ô∏è ISSUES / ‚ùå BROKEN",
        "critical_issues": "List any blocking issues found",
        "minor_issues": "List non-blocking improvements needed",
        "recommendation": "READY FOR TESTING / NEEDS FIXES"
      }
    },

    "STEP_7_REPORT_TO_BACKLOG": {
      "action": "UPDATE brain/backlog.json with work report",
      "purpose": "Centralized work tracking for multi-AI coordination",
      "no_file_creation": "DO NOT create .md files, DO NOT update api_endpoints_reference.json or typescript_interfaces_reference.json with work logs",
      "file_to_update": "brain/backlog.json",
      "append_location": "Add new section: recent_achievements_2025_11_01_subscription_create_fix",
      "report_structure": {
        "executor": "QWEN 2.5-Coder 32B Instruct with --c7 --context7 + --seq --sequential",
        "date": "2025-11-01",
        "task": "Fix SubscriptionTabs CREATE mode button + Deep validation of Profile/Galleras/Venues pages",
        "files_modified": ["List with line numbers"],
        "validation_status": {
          "typescript_compilation": "‚úÖ ZERO errors",
          "build_process": "‚úÖ SUCCESS",
          "terminology_unified": "membres√≠a ‚Üí suscripci√≥n (X replacements)"
        },
        "validation_findings": {
          "profile_page": "A1-A8 checklist results",
          "galleras_page": "B1-B8 checklist results",
          "venues_page": "C1-C8 checklist results"
        },
        "impact": "Description of changes and improvements",
        "commit": "Hash and message"
      },
      "use_template_from_line_313": "Follow exact format specified in üìä_REPORT_FORMAT_FOR_CLAUDE for chat output, then append to backlog.json"
    },

    "STEP_8_FINAL_VALIDATION": {
      "description": "Comprehensive final checks before commit",
      "checks": [
        "1. npx tsc --noEmit (MUST be ZERO errors)",
        "2. npm run build (MUST succeed)",
        "3. git diff --name-only (verify ONLY intended files modified)",
        "4. grep -r 'membres√≠a' frontend/src/components/admin/ (expect 0 results)",
        "5. grep 'mode={mode}' frontend/src/components/admin/UserModal.tsx (verify prop passed)",
        "6. No 'any' types introduced: grep 'any' [modified files] (expect 0 new 'any')"
      ],
      "if_any_fail": "STOP - Fix before commit - Report to user"
    },

    "STEP_9_COMMIT": {
      "when": "ONLY after Step 8 passes ALL checks",
      "commit_message_template": "fix: SubscriptionTabs CREATE mode shows correct button + Profile validation\n\nBUG FIX:\n- SubscriptionTabs.tsx: Added mode prop ('create' | 'edit')\n- Button text now conditional: CREATE ‚Üí 'Crear Usuario', EDIT ‚Üí 'Actualizar Suscripci√≥n'\n- UserModal.tsx: Pass mode prop to SubscriptionTabs\n\nTERMINOLOGY UNIFICATION:\n- Replaced 'membres√≠a' ‚Üí 'suscripci√≥n' across admin components\n- Consistent terminology for better UX\n\nVALIDATION PERFORMED:\n- ‚úÖ Profile.tsx: [Status - list issues if any]\n- ‚úÖ Galleras.tsx: [Status - list issues if any]\n- ‚úÖ Venues.tsx: [Status - list issues if any]\n\nTYPESCRIPT VALIDATION:\n- ‚úÖ ZERO errors (npx tsc --noEmit)\n- ‚úÖ Build succeeds (npm run build)\n- ‚úÖ No 'any' types introduced\n\nü§ñ Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>",
      "commit_command": "git add frontend/src/components/admin/SubscriptionTabs.tsx frontend/src/components/admin/UserModal.tsx brain/backlog.json && git commit -m \"[message above]\"",
      "verify_after_commit": "git log -1 --stat"
    },

    "STEP_10_UPDATE_BACKLOG": {
      "action": "APPEND work report to brain/backlog.json",
      "when": "After commit succeeds",
      "location": "Add new section after existing recent_achievements",
      "section_name": "recent_achievements_2025_11_01_subscription_create_fix",
      "content_template": {
        "executor": "QWEN 2.5-Coder 32B Instruct",
        "date": "2025-11-01",
        "task": "Fix SubscriptionTabs CREATE mode button + Deep validation",
        "files_modified": ["array of files with line numbers"],
        "validation_status": {
          "typescript_compilation": "‚úÖ ZERO errors",
          "build_process": "‚úÖ SUCCESS",
          "terminology_changes": "membres√≠a ‚Üí suscripci√≥n (X occurrences)"
        },
        "validation_findings": {
          "profile_page": "A1-A8 results",
          "galleras_page": "B1-B8 results",
          "venues_page": "C1-C8 results"
        },
        "impact": "Button text now correct in CREATE mode, terminology unified",
        "commit": "hash and message"
      }
    }
  },

  "‚úÖ_SUCCESS_CRITERIA": [
    "1. TypeScript compilation: ‚úÖ ZERO errors",
    "2. Build process: ‚úÖ SUCCESS",
    "3. SubscriptionTabs has mode prop: ‚úÖ VERIFIED",
    "4. Button text conditional on mode: ‚úÖ IMPLEMENTED",
    "5. Terminology unified to 'suscripci√≥n': ‚úÖ CONSISTENT",
    "6. Profile validation: ‚úÖ COMPLETED with findings documented",
    "7. Galleras validation: ‚úÖ COMPLETED with findings documented",
    "8. Venues validation: ‚úÖ COMPLETED with findings documented",
    "9. Report in chat text: ‚úÖ COMPREHENSIVE",
    "10. Report appended to backlog.json: ‚úÖ DOCUMENTED",
    "11. No 'any' types introduced: ‚úÖ TYPE SAFETY MAINTAINED"
  ],

  "üî¥_ERROR_HANDLING": {
    "typescript_errors": "STOP immediately - Report exact error line numbers - DO NOT continue",
    "build_errors": "STOP - Report full error output - DO NOT commit",
    "infinite_loop_detection": "If same file edited 3 times: STOP and report to user",
    "validation_issues": "Document all findings, propose fixes if critical"
  },

  "üìä_REPORT_FORMAT_FOR_CLAUDE": {
    "use_this_template": "## QWEN REPORT - Subscription CREATE Fix + Validation\n\n### FILES MODIFIED\n- frontend/src/components/admin/SubscriptionTabs.tsx (line X-Y): Added mode prop\n- frontend/src/components/admin/UserModal.tsx (line X): Pass mode={mode}\n\n### TYPESCRIPT VALIDATION\n- npx tsc --noEmit: ‚úÖ ZERO errors\n- npm run build: ‚úÖ SUCCESS\n\n### TERMINOLOGY CHANGES\n- Replaced 'membres√≠a' with 'suscripci√≥n' in X locations\n\n### VALIDATION FINDINGS\n#### Profile.tsx\n- A1-A8: [‚úÖ/‚ùå with line numbers]\n- Issues: [None | List]\n\n#### Galleras.tsx\n- B1-B8: [‚úÖ/‚ùå with line numbers]\n- Issues: [None | List]\n\n#### Venues.tsx\n- C1-C8: [‚úÖ/‚ùå with line numbers]\n- Issues: [None | List]\n\n### COMMIT\n- Hash: [abc1234]\n- Message: \"fix: SubscriptionTabs CREATE mode...\"\n\n### ISSUES ENCOUNTERED\n- [None | List with root cause + how resolved]"
  }
}
