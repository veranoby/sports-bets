{
  "session_type": "critical_remaining_issues_resolution",
  "priority": "HIGH",
  "context": {
    "platform": "GalloBets - Sports Betting & Streaming Platform",
    "status": "Profile functionality RESTORED ✅ - Focus on remaining critical issues ONLY",
    "previous_crisis": "Qwen AI destructively replaced working code with placeholder comments - NEVER AGAIN",
    "current_state": "Authentication working, Profile edit working, Backend endpoints functional"
  },

  "STRICT_SAFETY_RULES": {
    "NEVER_TOUCH_THESE_FILES": [
      "frontend/src/pages/user/Profile.tsx (JUST RESTORED - DO NOT MODIFY)",
      "backend/src/routes/auth.ts (JUST ADDED ENDPOINT - DO NOT MODIFY)",
      "frontend/src/contexts/AuthContext.tsx (FIXED - DO NOT MODIFY)",
      "frontend/src/services/api.ts (FIXED - DO NOT MODIFY)"
    ],
    "FORBIDDEN_ACTIONS": [
      "NEVER replace working code with placeholder comments",
      "NEVER remove functional UI components or business logic",
      "NEVER use patterns like '{/* ... (content remains the same) ... */}'",
      "NEVER comment out working imports or hooks",
      "NEVER modify authentication or API structure code"
    ],
    "REQUIRED_TESTING": [
      "Test login flow BEFORE making any changes",
      "Test profile edit functionality BEFORE making any changes",
      "Verify no console errors BEFORE making any changes"
    ]
  },

  "critical_remaining_issues": [
    {
      "id": "database_connection_performance",
      "priority": "HIGH",
      "description": "Neon.tech database queries taking 1-3+ seconds, causing ETIMEDOUT errors",
      "symptoms": [
        "⚠️ Slow query detected: Multiple endpoints taking >500ms",
        "🚨 CRITICAL: Very slow query: Taking >1000ms",
        "ConnectionError [SequelizeConnectionError]: ETIMEDOUT",
        "API calls timing out, affecting user experience"
      ],
      "investigation_steps": [
        "Check database connection pool configuration",
        "Review query optimization opportunities",
        "Investigate Neon.tech connection limits",
        "Check for missing database indexes",
        "Review concurrent connection handling"
      ],
      "solution_approaches": [
        "Optimize database connection pool settings",
        "Add query caching where appropriate",
        "Review and optimize slow queries",
        "Implement connection retry logic",
        "Consider read replicas if needed"
      ]
    },

    {
      "id": "frontend_build_optimization",
      "priority": "MEDIUM",
      "description": "Ensure TypeScript build is optimized and error-free",
      "current_status": "TypeScript build passing, but may need optimization",
      "tasks": [
        "Run npm run build to verify production build",
        "Check for any remaining TypeScript warnings",
        "Optimize bundle size if needed",
        "Verify all imports are properly tree-shaken"
      ]
    },

    {
      "id": "error_monitoring_improvement",
      "priority": "MEDIUM",
      "description": "Improve error handling and monitoring",
      "tasks": [
        "Add better error boundaries in React components",
        "Improve API error response handling",
        "Add performance monitoring for slow queries",
        "Implement proper logging for debugging"
      ]
    }
  ],

  "execution_plan": {
    "phase_1_safety_verification": {
      "step_1": "Login to the platform and verify authentication works",
      "step_2": "Navigate to /profile and verify edit functionality works",
      "step_3": "Check browser console for any errors",
      "step_4": "Verify API endpoints respond correctly",
      "CRITICAL": "If ANY of these fail, STOP immediately and report issue"
    },

    "phase_2_database_performance": {
      "step_1": "Analyze slow query patterns in backend logs",
      "step_2": "Check database connection configuration in backend",
      "step_3": "Review Sequelize connection pool settings",
      "step_4": "Implement query optimization where needed",
      "step_5": "Test performance improvements",
      "constraints": "Do NOT modify working authentication or profile code"
    },

    "phase_3_monitoring_improvement": {
      "step_1": "Add performance monitoring without breaking existing code",
      "step_2": "Improve error handling without changing working flows",
      "step_3": "Add logging for debugging slow queries",
      "step_4": "Test all changes thoroughly"
    },

    "phase_4_validation": {
      "step_1": "Re-test complete login → profile → edit → save flow",
      "step_2": "Verify no new console errors introduced",
      "step_3": "Check API response times improved",
      "step_4": "Run full TypeScript build successfully"
    }
  },

  "prevention_measures": {
    "code_protection_rules": [
      "Use git status before ANY code changes",
      "Create backup branch before making changes",
      "Test working functionality BEFORE modifications",
      "Never modify files that were just fixed",
      "Use git diff to review ALL changes before commit"
    ],
    "ai_safety_guidelines": [
      "If asked to 'clean up' or 'optimize' existing working code - DECLINE",
      "If asked to replace code with comments - REFUSE IMMEDIATELY",
      "If unsure about impact - ASK USER before proceeding",
      "Always preserve working authentication and core user flows",
      "Test immediately after each change, not at the end"
    ]
  },

  "emergency_procedures": {
    "if_something_breaks": [
      "STOP all changes immediately",
      "Use 'git checkout -- filename' to restore working version",
      "Report exactly what was attempted and what broke",
      "Never try to 'fix' by making more changes"
    ],
    "rollback_commands": [
      "git stash (save current changes)",
      "git checkout HEAD~1 -- filename (restore specific file)",
      "git reset --hard HEAD (nuclear option - lose all changes)"
    ]
  },

  "success_criteria": {
    "must_maintain": [
      "Login functionality working",
      "Profile edit functionality working",
      "No console errors on critical pages",
      "API endpoints responding correctly"
    ],
    "improvements_target": [
      "Database queries <500ms average",
      "Reduced ETIMEDOUT errors",
      "Better error handling and monitoring",
      "Clean TypeScript build"
    ]
  },

  "technical_context": {
    "recent_fixes_completed": [
      "✅ Profile.tsx edit functionality restored from git commit 1fc5279",
      "✅ Backend endpoint /auth/check-membership-status created and tested",
      "✅ API structure fixed (eliminated data.data anti-patterns)",
      "✅ Authentication flow working correctly"
    ],
    "database_details": {
      "provider": "Neon.tech PostgreSQL",
      "connection_string": "In .env file",
      "main_performance_issue": "Connection timeouts and slow queries",
      "affected_endpoints": "Most API calls taking >500ms"
    }
  },

  "final_instructions": {
    "primary_focus": "Database performance optimization ONLY",
    "secondary_focus": "Error monitoring improvements",
    "absolutely_forbidden": "Modifying authentication, profile, or API structure code",
    "testing_requirement": "Test working functionality before AND after each change",
    "failure_protocol": "If anything breaks, restore from git immediately"
  },

  "crisis_prevention": {
    "how_the_crisis_happened": [
      "Qwen AI was asked to 'clean up' code",
      "It replaced working code with placeholder comments",
      "Functional UI forms became non-functional placeholders",
      "Critical business logic was removed",
      "Hours of debugging required to restore functionality"
    ],
    "warning_signs_to_watch_for": [
      "Any code being replaced with comments",
      "Functional components becoming placeholders",
      "Working imports being commented out",
      "UI forms losing their input fields",
      "Any pattern like '{/* ... remains the same ... */}'"
    ],
    "immediate_actions_if_detected": [
      "STOP all AI operations immediately",
      "Use git to restore working code",
      "Report the destructive behavior",
      "Never let AI 'fix' what it broke - restore from git instead"
    ]
  }
}