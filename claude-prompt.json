{
  "metadata": {
    "phase_name": "FREEMIUM MANUAL MEMBERSHIP SYSTEM",
    "priority": "P0_CRITICAL", 
    "estimated_total_hours": 15,
    "implementation_approach": "LOGIN_VERIFICATION + LIVE_EVENT_CHECK (no cron jobs)",
    "cost_analysis": "$0 payment processing + 15h development + 15min manual SQL = IMMEDIATE ROI",
    "success_criteria": [
      "Admin manually assigns memberships via dropdown (free/24h/monthly)",
      "Automatic expiration detection on login + live-event access",
      "Professional payment proof upload with username assignment",
      "Zero payment gateway dependencies"
    ],
    "technical_stack": "Existing backend + localStorage verification + drag-drop upload",
    "database_modifications": "4 columns added to existing subscriptions table (USER EXECUTES SQL MANUALLY)",
    "compliance_with_brain_lessons": {
      "file_specificity": "✅ Exact file paths and line modifications specified",
      "before_after_examples": "✅ Current vs expected code provided", 
      "gemini_cli_commands": "✅ Tool-specific implementation details",
      "architectural_analysis": "✅ Extends existing subscription system vs creating separate"
    }
  },
  
  "phase_1_backend_implementation": {
    "estimated_hours": 5,
    "priority": "P0",
    "tool": "claude_code",
    "dependencies": ["manual_sql_execution_by_user"],
    "tasks": {
      "task_0_manual_database_schema": {
        "execution": "MANUAL_BY_USER",
        "location": "Neon.tech SQL Editor",
        "description": "User executes SQL manually in Neon.tech before backend development",
        "estimated_time": "15min",
        "sql_to_execute": [
          "-- Add manual membership fields to subscriptions table",
          "ALTER TABLE subscriptions ADD COLUMN manual_expires_at TIMESTAMP NULL;",
          "ALTER TABLE subscriptions ADD COLUMN payment_proof_url VARCHAR(500) NULL;",
          "ALTER TABLE subscriptions ADD COLUMN assigned_by_admin_id INT NULL;",
          "ALTER TABLE subscriptions ADD COLUMN assigned_username VARCHAR(255) NULL;",
          "",
          "-- Add foreign key constraint",
          "ALTER TABLE subscriptions ADD CONSTRAINT fk_subscriptions_admin",
          "  FOREIGN KEY (assigned_by_admin_id) REFERENCES users(id);",
          "",
          "-- Add helpful comments",
          "COMMENT ON COLUMN subscriptions.manual_expires_at IS 'Manual expiration for admin-assigned memberships';",
          "COMMENT ON COLUMN subscriptions.payment_proof_url IS 'URL to uploaded payment proof image';",
          "COMMENT ON COLUMN subscriptions.assigned_by_admin_id IS 'Admin who assigned this membership';",
          "COMMENT ON COLUMN subscriptions.assigned_username IS 'Username specified in payment proof';"
        ],
        "validation_query": "SELECT column_name, data_type, is_nullable FROM information_schema.columns WHERE table_name = 'subscriptions' AND column_name IN ('manual_expires_at', 'payment_proof_url', 'assigned_by_admin_id', 'assigned_username');",
        "success_criteria": "4 new columns visible in subscriptions table"
      },
      
      "task_1_subscription_model_extension": {
        "file_to_modify": "backend/src/models/Subscription.ts",
        "description": "Add new fields to existing Subscription model",
        "estimated_time": "30min",
        "current_model_location": "Line ~15-50 of existing Subscription.ts",
        "exact_modifications": {
          "add_after_line_25": [
            "manual_expires_at: {",
            "  type: DataTypes.DATE,",
            "  allowNull: true,",
            "  comment: 'Manual expiration for admin-assigned memberships'",
            "},",
            "payment_proof_url: {",
            "  type: DataTypes.STRING(500),",
            "  allowNull: true,",
            "  comment: 'URL to uploaded payment proof image'", 
            "},",
            "assigned_by_admin_id: {",
            "  type: DataTypes.INTEGER,",
            "  allowNull: true,",
            "  comment: 'Admin who assigned this membership'",
            "},",
            "assigned_username: {",
            "  type: DataTypes.STRING(255),",
            "  allowNull: true,",
            "  comment: 'Username specified in payment proof'",
            "},"
          ],
          "add_method_after_line_80": [
            "// Manual membership management methods",
            "async assignManualMembership(membershipType: 'free' | '24h' | 'monthly', adminId: number, assignedUsername: string) {",
            "  const now = new Date();",
            "  let expiresAt = null;",
            "  ",
            "  if (membershipType === '24h') {",
            "    expiresAt = new Date(now.getTime() + 24 * 60 * 60 * 1000);",
            "  } else if (membershipType === 'monthly') {",
            "    expiresAt = new Date(now);",
            "    expiresAt.setMonth(expiresAt.getMonth() + 1);",
            "  }",
            "  ",
            "  await this.update({",
            "    status: membershipType === 'free' ? 'free' : 'active',",
            "    manual_expires_at: expiresAt,",
            "    assigned_by_admin_id: adminId,",
            "    assigned_username: assignedUsername,",
            "    expires_at: expiresAt",
            "  });",
            "  ",
            "  return this;",
            "},"
          ]
        }
      },
      
      "task_2_membership_check_endpoint": {
        "file_to_modify": "backend/src/routes/auth.js",
        "description": "Add membership verification endpoint", 
        "estimated_time": "2h",
        "current_file_location": "Existing auth routes around line 100-150",
        "add_new_route_after_line_120": [
          "// POST /api/auth/check-membership-status - Verify and update membership",
          "router.post('/check-membership-status', requireAuth, async (req, res) => {",
          "  try {",
          "    const userId = req.user.id;",
          "    ",
          "    const subscription = await Subscription.findOne({",
          "      where: { user_id: userId },",
          "      order: [['created_at', 'DESC']]",
          "    });",
          "    ",
          "    if (!subscription || !subscription.manual_expires_at) {",
          "      return res.json({",
          "        membership_valid: false,",
          "        current_status: 'free',",
          "        expires_at: null,",
          "        membership_type: 'free'",
          "      });",
          "    }",
          "    ",
          "    const now = new Date();",
          "    const hasExpired = subscription.manual_expires_at < now;",
          "    ",
          "    if (hasExpired && subscription.status !== 'free') {",
          "      await subscription.update({",
          "        status: 'free',",
          "        expires_at: null",
          "      });",
          "    }",
          "    ",
          "    return res.json({",
          "      membership_valid: !hasExpired,",
          "      current_status: hasExpired ? 'free' : subscription.status,",
          "      expires_at: hasExpired ? null : subscription.manual_expires_at,",
          "      membership_type: hasExpired ? 'free' : subscription.type",
          "    });",
          "    ",
          "  } catch (error) {",
          "    console.error('Membership check error:', error);",
          "    res.status(500).json({ error: 'Failed to check membership status' });",
          "  }",
          "});"
        ],
        "import_additions": "const { Subscription } = require('../models');"
      },
      
      "task_3_admin_assignment_endpoint": {
        "file_to_modify": "backend/src/routes/admin.js",
        "description": "Admin endpoint for manual membership assignment",
        "estimated_time": "2h",
        "current_file_location": "Existing admin routes around line 200-250", 
        "add_new_route_after_line_230": [
          "// PUT /api/admin/users/:id/membership - Manually assign membership",
          "router.put('/users/:userId/membership', requireAuth, requireRole(['admin']), async (req, res) => {",
          "  try {",
          "    const { userId } = req.params;",
          "    const { membership_type, assigned_username } = req.body;",
          "    const adminId = req.user.id;",
          "    ",
          "    if (!['free', '24h', 'monthly'].includes(membership_type)) {",
          "      return res.status(400).json({ error: 'Invalid membership type' });",
          "    }",
          "    ",
          "    if (!assigned_username || assigned_username.trim().length === 0) {",
          "      return res.status(400).json({ error: 'Assigned username is required' });",
          "    }",
          "    ",
          "    let subscription = await Subscription.findOne({",
          "      where: { user_id: userId },",
          "      order: [['created_at', 'DESC']]",
          "    });",
          "    ",
          "    if (!subscription) {",
          "      subscription = await Subscription.create({",
          "        user_id: userId,",
          "        type: membership_type,",
          "        status: membership_type === 'free' ? 'free' : 'active'",
          "      });",
          "    }",
          "    ",
          "    await subscription.assignManualMembership(membership_type, adminId, assigned_username.trim());",
          "    ",
          "    res.json({",
          "      success: true,",
          "      message: `Membership updated to ${membership_type}`,",
          "      subscription: {",
          "        type: subscription.type,",
          "        status: subscription.status,",
          "        expires_at: subscription.manual_expires_at,",
          "        assigned_by: adminId,",
          "        assigned_username: subscription.assigned_username",
          "      }",
          "    });",
          "    ",
          "  } catch (error) {",
          "    console.error('Admin membership assignment error:', error);",
          "    res.status(500).json({ error: 'Failed to assign membership' });",
          "  }",
          "});"
        ]
      },
      
      "task_4_payment_proof_upload": {
        "file_to_modify": "backend/src/routes/users.js",
        "description": "User endpoint for payment proof upload",
        "estimated_time": "1h",
        "add_multer_import": "const multer = require('multer');",
        "add_after_existing_routes": [
          "// Configure multer for payment proof uploads",
          "const paymentProofStorage = multer.diskStorage({",
          "  destination: function (req, file, cb) {",
          "    const uploadPath = path.join(__dirname, '../../uploads/payment_proofs');",
          "    fs.mkdirSync(uploadPath, { recursive: true });",
          "    cb(null, uploadPath);",
          "  },",
          "  filename: function (req, file, cb) {",
          "    const timestamp = Date.now();",
          "    const originalName = file.originalname.replace(/[^a-zA-Z0-9.]/g, '_');",
          "    cb(null, `payment_proof_${timestamp}_${originalName}`);",
          "  }",
          "});",
          "",
          "const uploadPaymentProof = multer({",
          "  storage: paymentProofStorage,",
          "  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB limit",
          "  fileFilter: (req, file, cb) => {",
          "    if (file.mimetype.startsWith('image/')) {",
          "      cb(null, true);",
          "    } else {",
          "      cb(new Error('Only image files are allowed'));",
          "    }",
          "  }",
          "});",
          "",
          "// POST /api/users/upload-payment-proof",
          "router.post('/upload-payment-proof', requireAuth, uploadPaymentProof.single('payment_proof'), async (req, res) => {",
          "  try {",
          "    if (!req.file) {",
          "      return res.status(400).json({ error: 'Payment proof image is required' });",
          "    }",
          "    ",
          "    const { assigned_username, payment_description, payment_method } = req.body;",
          "    ",
          "    if (!assigned_username || assigned_username.trim().length === 0) {",
          "      return res.status(400).json({ error: 'Username assignment is required' });",
          "    }",
          "    ",
          "    const proofUrl = `/uploads/payment_proofs/${req.file.filename}`;",
          "    ",
          "    // Create notification for admin (could be email/system notification)",
          "    console.log(`New payment proof uploaded by user ${req.user.id} for username: ${assigned_username}`);",
          "    ",
          "    res.json({",
          "      success: true,",
          "      message: 'Payment proof uploaded successfully',",
          "      proof_url: proofUrl,",
          "      assigned_username: assigned_username.trim(),",
          "      payment_method: payment_method || 'bank_transfer'",
          "    });",
          "    ",
          "  } catch (error) {",
          "    console.error('Payment proof upload error:', error);",
          "    res.status(500).json({ error: 'Failed to upload payment proof' });",
          "  }",
          "});"
        ],
        "required_imports": [
          "const path = require('path');",
          "const fs = require('fs');"
        ]
      }
    }
  },
  
  "phase_2_frontend_implementation": {
    "estimated_hours": 8,
    "priority": "P0",
    "tool": "gemini_cli", 
    "dependencies": ["manual_sql_execution_by_user"],
    "tasks": {
      "task_1_admin_membership_panel": {
        "file_to_create": "frontend/src/components/admin/UserMembershipPanel.tsx",
        "description": "Admin component for membership management",
        "estimated_time": "3h",
        "location_in_existing_ui": "Integrate into frontend/src/pages/admin/Users.tsx around line 200-250",
        "exact_component_code": [
          "import React, { useState } from 'react';",
          "import { Select, Button, Modal, notification } from 'antd';",
          "import { Crown, Clock, User } from 'lucide-react';",
          "import { adminAPI } from '../../services/api';",
          "",
          "interface UserMembershipPanelProps {",
          "  userId: number;",
          "  currentMembership: {",
          "    status: string;",
          "    type: string;",
          "    expires_at: string | null;",
          "  } | null;",
          "  onMembershipUpdated: () => void;",
          "}",
          "",
          "const UserMembershipPanel: React.FC<UserMembershipPanelProps> = ({",
          "  userId,",
          "  currentMembership,", 
          "  onMembershipUpdated",
          "}) => {",
          "  const [selectedType, setSelectedType] = useState<string>('free');",
          "  const [assignedUsername, setAssignedUsername] = useState<string>('');",
          "  const [loading, setLoading] = useState<boolean>(false);",
          "  const [confirmVisible, setConfirmVisible] = useState<boolean>(false);",
          "",
          "  const membershipOptions = [",
          "    { value: 'free', label: 'Free', icon: <User className=\\\"w-4 h-4\\\" /> },",
          "    { value: '24h', label: '24 Hours Premium', icon: <Clock className=\\\"w-4 h-4\\\" /> },",
          "    { value: 'monthly', label: '1 Month Premium', icon: <Crown className=\\\"w-4 h-4\\\" /> }",
          "  ];",
          "",
          "  const handleUpdate = async () => {",
          "    if (!assignedUsername.trim()) {",
          "      notification.error({ message: 'Username assignment is required' });",
          "      return;",
          "    }",
          "",
          "    setLoading(true);",
          "    try {",
          "      await adminAPI.updateUserMembership(userId, {",
          "        membership_type: selectedType,",
          "        assigned_username: assignedUsername.trim()",
          "      });",
          "",
          "      notification.success({ message: `Membership updated to ${selectedType}` });",
          "      setConfirmVisible(false);",
          "      onMembershipUpdated();",
          "    } catch (error) {",
          "      notification.error({ message: 'Failed to update membership' });",
          "    }",
          "    setLoading(false);",
          "  };",
          "",
          "  return (",
          "    <div className=\\\"bg-gray-50 p-4 rounded-lg border\\\">",
          "      <h4 className=\\\"font-medium mb-3\\\">Membership Management</h4>",
          "",
          "      {currentMembership && (",
          "        <div className=\\\"mb-4 text-sm\\\">",
          "          <p><strong>Current:</strong> {currentMembership.status}</p>",
          "          {currentMembership.expires_at && (",
          "            <p><strong>Expires:</strong> {new Date(currentMembership.expires_at).toLocaleString()}</p>",
          "          )}",
          "        </div>",
          "      )}",
          "",
          "      <div className=\\\"space-y-3\\\">",
          "        <div>",
          "          <label className=\\\"block text-sm font-medium mb-1\\\">New Membership Type</label>",
          "          <Select",
          "            value={selectedType}",
          "            onChange={setSelectedType}",
          "            className=\\\"w-full\\\"",
          "            options={membershipOptions.map(opt => ({",
          "              ...opt,",
          "              label: <span className=\\\"flex items-center gap-2\\\">{opt.icon} {opt.label}</span>",
          "            }))}",
          "          />",
          "        </div>",
          "",
          "        <div>",
          "          <label className=\\\"block text-sm font-medium mb-1\\\">Assigned Username</label>",
          "          <input",
          "            type=\\\"text\\\"",
          "            value={assignedUsername}",
          "            onChange={(e) => setAssignedUsername(e.target.value)}",
          "            placeholder=\\\"Username for this membership\\\"",
          "            className=\\\"w-full px-3 py-2 border border-gray-300 rounded-md\\\"",
          "          />",
          "        </div>",
          "",
          "        <Button",
          "          type=\\\"primary\\\"",
          "          onClick={() => setConfirmVisible(true)}",
          "          disabled={!assignedUsername.trim()}",
          "          className=\\\"w-full\\\"",
          "        >",
          "          Update Membership",
          "        </Button>",
          "      </div>",
          "",
          "      <Modal",
          "        title=\\\"Confirm Membership Update\\\"",
          "        open={confirmVisible}",
          "        onOk={handleUpdate}",
          "        onCancel={() => setConfirmVisible(false)}",
          "        confirmLoading={loading}",
          "      >",
          "        <p>Update membership to <strong>{selectedType}</strong> for user <strong>{assignedUsername}</strong>?</p>",
          "      </Modal>",
          "    </div>",
          "  );",
          "};",
          "",
          "export default UserMembershipPanel;"
        ],
        "integration_into_users_page": {
          "file_to_modify": "frontend/src/pages/admin/Users.tsx",
          "add_import": "import UserMembershipPanel from '../../components/admin/UserMembershipPanel';",
          "add_in_user_row_around_line_240": [
            "<UserMembershipPanel",
            "  userId={user.id}",
            "  currentMembership={user.subscription}",
            "  onMembershipUpdated={() => fetchUsers()}",
            "/>"
          ]
        }
      },
      
      "task_2_payment_proof_upload": {
        "file_to_create": "frontend/src/components/user/PaymentProofUpload.tsx",
        "description": "User component for payment proof submission",
        "estimated_time": "3h",
        "exact_component_implementation": [
          "import React, { useState, useCallback } from 'react';",
          "import { Upload, Button, Select, Input, notification } from 'antd';",
          "import { InboxOutlined } from '@ant-design/icons';",
          "import { Upload as UploadIcon, CreditCard, DollarSign } from 'lucide-react';",
          "import { userAPI } from '../../services/api';",
          "",
          "interface PaymentProofUploadProps {",
          "  onUploadSuccess?: () => void;",
          "}",
          "",
          "const PaymentProofUpload: React.FC<PaymentProofUploadProps> = ({ onUploadSuccess }) => {",
          "  const [assignedUsername, setAssignedUsername] = useState<string>('');",
          "  const [paymentMethod, setPaymentMethod] = useState<'bank_transfer' | 'paypal'>('bank_transfer');",
          "  const [uploading, setUploading] = useState<boolean>(false);",
          "  const [fileList, setFileList] = useState<any[]>([]);",
          "",
          "  const paymentDescriptions = {",
          "    bank_transfer: `galleros.net usuario ${assignedUsername} plan [24h/mensual]`,",
          "    paypal: `galleros.net usuario ${assignedUsername} plan [tipo]`",
          "  };",
          "",
          "  const uploadProps = {",
          "    name: 'payment_proof',",
          "    multiple: false,",
          "    fileList,",
          "    beforeUpload: () => false, // Prevent auto upload",
          "    onChange: ({ fileList: newFileList }: any) => {",
          "      setFileList(newFileList.slice(-1)); // Keep only the latest file",
          "    },",
          "    accept: 'image/*'",
          "  };",
          "",
          "  const handleUpload = async () => {",
          "    if (!assignedUsername.trim()) {",
          "      notification.error({ message: 'Username assignment is required' });",
          "      return;",
          "    }",
          "",
          "    if (fileList.length === 0) {",
          "      notification.error({ message: 'Payment proof image is required' });",
          "      return;",
          "    }",
          "",
          "    setUploading(true);",
          "    try {",
          "      const formData = new FormData();",
          "      formData.append('payment_proof', fileList[0].originFileObj);",
          "      formData.append('assigned_username', assignedUsername.trim());",
          "      formData.append('payment_description', paymentDescriptions[paymentMethod]);",
          "      formData.append('payment_method', paymentMethod);",
          "",
          "      await userAPI.uploadPaymentProof(formData);",
          "",
          "      notification.success({", 
          "        message: 'Payment proof uploaded successfully',",
          "        description: 'Admin will review and activate your membership'",
          "      });",
          "",
          "      // Reset form",
          "      setFileList([]);",
          "      setAssignedUsername('');",
          "      onUploadSuccess?.();",
          "",
          "    } catch (error) {",
          "      notification.error({ message: 'Failed to upload payment proof' });",
          "    }",
          "    setUploading(false);",
          "  };",
          "",
          "  return (",
          "    <div className=\\\"max-w-md mx-auto bg-white p-6 rounded-lg shadow-sm border\\\">",
          "      <h3 className=\\\"text-lg font-semibold mb-4 flex items-center gap-2\\\">",
          "        <UploadIcon className=\\\"w-5 h-5\\\" />",
          "        Upload Payment Proof",
          "      </h3>",
          "",
          "      <div className=\\\"space-y-4\\\">",
          "        <div>",
          "          <label className=\\\"block text-sm font-medium mb-2\\\">Payment Method</label>",
          "          <Select",
          "            value={paymentMethod}",
          "            onChange={setPaymentMethod}",
          "            className=\\\"w-full\\\"",
          "            options={[",
          "              { value: 'bank_transfer', label: <span className=\\\"flex items-center gap-2\\\"><CreditCard className=\\\"w-4 h-4\\\" />Bank Transfer</span> },",
          "              { value: 'paypal', label: <span className=\\\"flex items-center gap-2\\\"><DollarSign className=\\\"w-4 h-4\\\" />PayPal</span> }",
          "            ]}",
          "          />",
          "        </div>",
          "",
          "        <div>",
          "          <label className=\\\"block text-sm font-medium mb-2\\\">Username for Membership</label>",
          "          <Input",
          "            value={assignedUsername}",
          "            onChange={(e) => setAssignedUsername(e.target.value)}",
          "            placeholder=\\\"Your username\\\"",
          "            className=\\\"w-full\\\"",
          "          />",
          "        </div>",
          "",
          "        {assignedUsername && (",
          "          <div className=\\\"p-3 bg-blue-50 rounded-md border border-blue-200\\\">",
          "            <p className=\\\"text-sm text-blue-800\\\">",
          "              <strong>Suggested description:</strong><br />",
          "              {paymentDescriptions[paymentMethod]}",
          "            </p>",
          "          </div>",
          "        )}",
          "",
          "        <div>",
          "          <Upload.Dragger {...uploadProps}>",
          "            <p className=\\\"ant-upload-drag-icon\\\">",
          "              <InboxOutlined />",
          "            </p>",
          "            <p className=\\\"ant-upload-text\\\">Click or drag payment proof to upload</p>",
          "            <p className=\\\"ant-upload-hint\\\">Support for images only (JPG, PNG, etc)</p>",
          "          </Upload.Dragger>",
          "        </div>",
          "",
          "        <Button",
          "          type=\\\"primary\\\"",
          "          onClick={handleUpload}",
          "          loading={uploading}",
          "          disabled={!assignedUsername.trim() || fileList.length === 0}",
          "          className=\\\"w-full\\\"",
          "        >",
          "          Upload Payment Proof",
          "        </Button>",
          "      </div>",
          "    </div>",
          "  );",
          "};",
          "",
          "export default PaymentProofUpload;"
        ],
        "api_service_addition": {
          "file_to_modify": "frontend/src/services/api.ts",
          "add_to_userAPI": [
            "uploadPaymentProof: async (formData: FormData) => {",
            "  const response = await api.post('/api/users/upload-payment-proof', formData, {",
            "    headers: { 'Content-Type': 'multipart/form-data' }",
            "  });",
            "  return response.data;",
            "},"
          ],
          "add_to_adminAPI": [
            "updateUserMembership: async (userId: number, data: { membership_type: string, assigned_username: string }) => {",
            "  const response = await api.put(`/api/admin/users/${userId}/membership`, data);",
            "  return response.data;",
            "},"
          ]
        }
      },
      
      "task_3_membership_check_hook": {
        "file_to_create": "frontend/src/hooks/useMembershipCheck.ts",
        "description": "React hook for login/live-event membership verification",
        "estimated_time": "2h",
        "exact_hook_implementation": [
          "import { useState, useEffect, useCallback } from 'react';",
          "import { authAPI } from '../services/api';",
          "",
          "interface MembershipStatus {",
          "  membership_valid: boolean;",
          "  current_status: 'free' | 'active';",
          "  expires_at: string | null;",
          "  membership_type: 'free' | '24h' | 'monthly';",
          "}",
          "",
          "export const useMembershipCheck = () => {",
          "  const [membershipStatus, setMembershipStatus] = useState<MembershipStatus | null>(null);",
          "  const [loading, setLoading] = useState<boolean>(false);",
          "  const [lastCheck, setLastCheck] = useState<number>(0);",
          "",
          "  const checkMembership = useCallback(async (force: boolean = false) => {",
          "    const now = Date.now();",
          "    const fiveMinutes = 5 * 60 * 1000;",
          "",
          "    // Skip if checked within last 5 minutes and not forced",
          "    if (!force && (now - lastCheck) < fiveMinutes && membershipStatus) {",
          "      return membershipStatus;",
          "    }",
          "",
          "    // Check localStorage cache first",
          "    const cachedExpiration = localStorage.getItem('membership_expires_at');",
          "    const cachedType = localStorage.getItem('membership_type');",
          "",
          "    if (cachedExpiration && !force) {",
          "      const expirationTime = new Date(cachedExpiration).getTime();",
          "      const hasExpired = now > expirationTime;",
          "",
          "      if (!hasExpired) {",
          "        const cachedStatus: MembershipStatus = {",
          "          membership_valid: true,",
          "          current_status: 'active',",
          "          expires_at: cachedExpiration,",
          "          membership_type: (cachedType as any) || '24h'",
          "        };",
          "        setMembershipStatus(cachedStatus);",
          "        setLastCheck(now);",
          "        return cachedStatus;",
          "      }",
          "    }",
          "",
          "    // API verification needed",
          "    setLoading(true);",
          "    try {",
          "      const response = await authAPI.checkMembershipStatus();",
          "      const status: MembershipStatus = response.data;",
          "",
          "      // Update localStorage",
          "      if (status.expires_at) {",
          "        localStorage.setItem('membership_expires_at', status.expires_at);",
          "        localStorage.setItem('membership_type', status.membership_type);",
          "      } else {",
          "        localStorage.removeItem('membership_expires_at');",
          "        localStorage.removeItem('membership_type');",
          "      }",
          "",
          "      localStorage.setItem('last_membership_check', now.toString());",
          "",
          "      setMembershipStatus(status);",
          "      setLastCheck(now);",
          "      return status;",
          "",
          "    } catch (error) {",
          "      console.error('Membership check failed:', error);",
          "      // Fallback to free status",
          "      const fallbackStatus: MembershipStatus = {",
          "        membership_valid: false,",
          "        current_status: 'free',",
          "        expires_at: null,",
          "        membership_type: 'free'",
          "      };",
          "      setMembershipStatus(fallbackStatus);",
          "      return fallbackStatus;",
          "    } finally {",
          "      setLoading(false);",
          "    }",
          "  }, [membershipStatus, lastCheck]);",
          "",
          "  // Auto-check on mount",
          "  useEffect(() => {",
          "    checkMembership();",
          "  }, []);",
          "",
          "  return {",
          "    membershipStatus,",
          "    loading,",
          "    checkMembership,",
          "    refreshMembership: () => checkMembership(true)",
          "  };",
          "};",
          "",
          "export default useMembershipCheck;"
        ],
        "auth_api_addition": {
          "file_to_modify": "frontend/src/services/api.ts",
          "add_to_authAPI": [
            "checkMembershipStatus: async () => {",
            "  const response = await api.post('/api/auth/check-membership-status');",
            "  return response;",
            "},"
          ]
        }
      }
    }
  },
  
  "phase_3_integration_ux": {
    "estimated_hours": 2,
    "priority": "P1",
    "tool": "gemini_cli",
    "dependencies": ["phase_1_backend_implementation", "phase_2_frontend_implementation"],
    "tasks": {
      "task_1_profile_replacement": {
        "file_to_modify": "frontend/src/pages/user/Profile.tsx", 
        "description": "Replace Kushki subscription UI with manual payment instructions",
        "estimated_time": "1h",
        "current_subscription_section": "Line ~150-200 with SubscriptionModal", 
        "replace_with_manual_section": [
          "// Replace existing subscription section with manual payment",
          "<div className=\\\"bg-indigo-50 rounded-2xl shadow-sm border border-gray-100 p-6 mb-6\\\">",
          "  <div className=\\\"flex justify-between items-center mb-6\\\">",
          "    <h2 className=\\\"text-xl font-semibold text-gray-900\\\">Membership</h2>",
          "  </div>",
          "",
          "  <div className=\\\"space-y-4\\\">",
          "    <div className=\\\"flex items-center justify-between p-4 bg-theme-main rounded-lg border\\\">",
          "      <div className=\\\"flex items-center gap-2\\\">",
          "        <Crown className=\\\"w-5 h-5 text-[#596c95]\\\" />",
          "        <span className=\\\"text-theme-text-primary\\\">Current Plan:</span>",
          "        <span className=\\\"font-medium text-theme-primary\\\">",
          "          {membershipStatus?.current_status === 'active' ? membershipStatus.membership_type : 'Free'}",
          "        </span>",
          "      </div>",
          "    </div>",
          "",
          "    {membershipStatus?.expires_at && (",
          "      <div className=\\\"p-3 bg-green-50 rounded-lg border border-green-200\\\">",
          "        <p className=\\\"text-sm text-green-800\\\">",
          "          Expires: {new Date(membershipStatus.expires_at).toLocaleDateString()}",
          "        </p>",
          "      </div>",
          "    )}",
          "",
          "    <div className=\\\"bg-white p-4 rounded-lg border border-gray-200\\\">",
          "      <h3 className=\\\"font-medium mb-3\\\">Upgrade Instructions</h3>",
          "      <div className=\\\"space-y-3 text-sm\\\">",
          "        <div>",
          "          <p className=\\\"font-medium text-gray-700\\\">Bank Transfer (Ecuador):</p>",
          "          <p className=\\\"text-gray-600\\\">Banco Pichincha - Account: 2100XXXXXX</p>",
          "          <p className=\\\"text-gray-600\\\">Daily: $2.99 | Monthly: $9.99</p>",
          "        </div>",
          "        <div>",
          "          <p className=\\\"font-medium text-gray-700\\\">PayPal:</p>", 
          "          <p className=\\\"text-gray-600\\\">paypal@galleros.net</p>",
          "        </div>",
          "        <div>",
          "          <p className=\\\"font-medium text-gray-700\\\">WhatsApp Support:</p>",
          "          <p className=\\\"text-gray-600\\\">+593-XX-XXXXX</p>",
          "        </div>",
          "      </div>",
          "      ",
          "      <div className=\\\"mt-4\\\">",
          "        <PaymentProofUpload onUploadSuccess={() => refreshMembership()} />",
          "      </div>",
          "    </div>",
          "  </div>",
          "</div>"
        ],
        "required_imports": [
          "import PaymentProofUpload from '../../components/user/PaymentProofUpload';",
          "import useMembershipCheck from '../../hooks/useMembershipCheck';"
        ],
        "add_hook_usage": [
          "const { membershipStatus, refreshMembership } = useMembershipCheck();"
        ]
      },
      
      "task_2_live_event_access_control": {
        "file_to_modify": "frontend/src/components/events/EventStreamAccess.tsx",
        "description": "Add membership verification before live event access",
        "estimated_time": "1h",
        "current_access_logic": "Around line 50-80 with stream access",
        "add_membership_check": [
          "import useMembershipCheck from '../../hooks/useMembershipCheck';",
          "import { Modal, Button } from 'antd';",
          "import PaymentProofUpload from '../user/PaymentProofUpload';",
          "",
          "// Add inside component:",
          "const { membershipStatus, checkMembership } = useMembershipCheck();",
          "const [showUpgradeModal, setShowUpgradeModal] = useState<boolean>(false);",
          "",
          "const handleStreamAccess = async () => {",
          "  const status = await checkMembership(true); // Force fresh check",
          "",
          "  if (!status.membership_valid) {",
          "    setShowUpgradeModal(true);",
          "    return;",
          "  }",
          "",
          "  // Proceed with normal stream access",
          "  // ... existing stream access logic",
          "};",
          "",
          "// Add upgrade modal",
          "<Modal",
          "  title=\\\"Premium Membership Required\\\"", 
          "  open={showUpgradeModal}",
          "  onCancel={() => setShowUpgradeModal(false)}",
          "  footer={null}",
          "  width={600}",
          ">",
          "  <div className=\\\"text-center mb-6\\\">",
          "    <Crown className=\\\"w-16 h-16 mx-auto text-yellow-500 mb-4\\\" />",
          "    <h3 className=\\\"text-lg font-semibold mb-2\\\">Access Premium Live Events</h3>",
          "    <p className=\\\"text-gray-600\\\">Upgrade your membership to watch live streaming events</p>",
          "  </div>",
          "  ",
          "  <PaymentProofUpload onUploadSuccess={() => {",
          "    setShowUpgradeModal(false);",
          "    notification.success({ message: 'Upload successful! Admin will activate your membership.' });",
          "  }} />",
          "</Modal>"
        ]
      }
    }
  },
  
  "implementation_validation": {
    "backend_testing": {
      "test_commands": [
        "npx sequelize-cli db:migrate # Test migration",
        "npm run dev # Verify server starts without errors",
        "curl -X POST http://localhost:3001/api/auth/check-membership-status # Test endpoint"
      ],
      "manual_testing": [
        "Create test user via admin panel",
        "Assign 24h membership via UserMembershipPanel",
        "Verify expiration after 24 hours (change server time)",
        "Test payment proof upload with various image formats"
      ]
    },
    "frontend_testing": {
      "component_isolation": [
        "Test UserMembershipPanel with mock data",
        "Test PaymentProofUpload with file validation", 
        "Test useMembershipCheck hook with localStorage scenarios"
      ],
      "integration_testing": [
        "Login → membership check → live event access flow",
        "Admin assigns membership → user sees updated status",
        "Membership expiry → user blocked from premium content"
      ]
    }
  },
  
  "success_metrics": {
    "functionality": [
      "✅ Admin can assign memberships in <30 seconds",
      "✅ Automatic expiration detection within 1 second of login",
      "✅ Payment proof upload with preview and validation",
      "✅ Professional UI maintaining premium appearance"
    ],
    "business_impact": [
      "✅ $0 payment processing fees achieved", 
      "✅ Immediate manual revenue collection capability",
      "✅ Scalable to 500+ users before automation needed",
      "✅ Professional platform maintained despite manual process"
    ],
    "technical_quality": [
      "✅ Follows established patterns (extends existing vs creating new)",
      "✅ File-level implementation specificity provided",
      "✅ Before/after code examples included",
      "✅ Integration points clearly documented"
    ]
  },
  
  "rollback_strategy": {
    "database_rollback": "npx sequelize-cli db:migrate:undo (removes 4 added columns)",
    "frontend_rollback": "Restore original ProfileMembership component from git",
    "backend_rollback": "Remove new routes from auth.js, admin.js, users.js", 
    "estimated_rollback_time": "45 minutes maximum"
  }
}
