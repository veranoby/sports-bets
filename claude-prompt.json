{
  "task": "Claude Strategic TypeScript Architecture & API Method Creation",
  "priority": "critical",
  "context": "After Qwen completes import standardization, Claude handles complex business logic and missing API methods",
  "dependencies": ["qwen-prompt.json completion"],

  "strategic_tasks": [
    {
      "task_id": "C1",
      "description": "Create missing API methods in services/api.ts",
      "methods_needed": [
        "eventsAPI.update(id, data) -> ApiResponse<Event>",
        "venuesAPI.update(id, data) -> ApiResponse<Venue>",
        "venuesAPI.create(data) -> ApiResponse<Venue>",
        "gallerasAPI.update(id, data) -> ApiResponse<Gallera>",
        "gallerasAPI.create(data) -> ApiResponse<Gallera>"
      ],
      "business_logic": "Ensure proper validation, required fields, and error handling"
    },
    {
      "task_id": "C2",
      "description": "Fix complex interface mismatches",
      "focus_areas": [
        "Event interface extensions (currentViewers, activeBets, description)",
        "User profile verification level requirements",
        "Subscription type union fixes"
      ]
    },
    {
      "task_id": "C3",
      "description": "Navigation and hook fixes",
      "areas": [
        "useNavigate scope issues",
        "WebSocket context type mismatches",
        "Missing hook return properties"
      ]
    }
  ],

  "success_criteria": [
    "Build errors <50 (safe for commit)",
    "All critical business logic APIs functional",
    "No breaking changes to existing functionality"
  ],

  "architecture_decisions": [
    "Maintain ApiResponse<T> wrapper pattern",
    "Preserve existing business logic flows",
    "Ensure type safety for financial operations (betting)"
  ]
}