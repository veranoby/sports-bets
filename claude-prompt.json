{
  "metadata": {
    "purpose": "Next Phase: Complete hybrid architecture + operator dashboard + notifications",
    "updated": "2025-09-05",
    "project_status": "Phase 2: Architecture Completion & Operator Integration", 
    "critical_focus": "Finalize SSE, cleanup WebSocket, operator dashboard, notification system",
    "database_source_of_truth": "/home/veranoby/sports-bets/backend/database-analysis/*.json",
    "architecture_decision": "CONFIRMED: Hybrid SSE+WebSocket - now implementing"
  },
  
  "implementation_context": {
    "architecture_decision_confirmed": "SSE for admin interface, WebSocket ONLY for betting system",
    "betting_websocket_rationale": "MINIMAL: Only PAGO/DOY proposals require bidirectional timeout handling",
    "admin_sse_rationale": "Unidirectional notifications, auto-reconnect, simpler than WebSocket. Also for auto-matching notifications",
    "current_status": "Admin environment 90% complete, architecture finalized",
    "phase_objectives": [
      "Complete SSE architecture implementation",
      "WebSocket cleanup - isolate to MINIMAL usage (PAGO/DOY only)", 
      "Operator dashboard based on admin with limitations",
      "Notification system completion",
      "Auto-matching via SSE, wallet operations manual refresh"
    ]
  },

  "file_level_specifications": {
    "priority_1_typescript_compilation": {
      "duration": "30 minutes",
      "business_critical": "Ensure all TypeScript files are compiled",
      
      "compilation_command": "npx tsc",
      "verification": "Check that all .ts files compile without errors",
      "no_file_removal": "Keep both .js and .ts versions, compile TypeScript"
    },

    "priority_2_sse_infrastructure": {
      "duration": "4-6 hours",
      "business_critical": "Replace WebSocket complexity with SSE for admin interface",
      
      "create_new_files": {
        "backend/src/services/sseService.js": {
          "purpose": "Central SSE connection management for admin interface",
          "exact_implementation": "EventSource-based service with connection registry",
          "methods": ["addConnection", "removeConnection", "broadcastToAdmin", "broadcastToEvent"]
        },
        "backend/src/routes/sse.js": {
          "purpose": "SSE endpoints for admin real-time updates",
          "required_endpoints": [
            "GET /api/sse/admin/system-status - System monitoring",
            "GET /api/sse/admin/events/:eventId - Event updates", 
            "GET /api/sse/admin/notifications - Admin notifications"
          ],
          "response_format": "text/event-stream with proper headers"
        },
        "frontend/src/hooks/useSSE.js": {
          "purpose": "React hook for SSE connections with auto-reconnection",
          "exact_functionality": "useSSE(endpoint, options) returns {data, connected, error}",
          "features": ["Auto-reconnect", "Error handling", "Cleanup on unmount"]
        }
      },

      "modify_existing_files": {
        "backend/src/routes/events.js": {
          "lines_to_modify": "280-295, 320-335, 360-375",
          "current_broken_code": "io.emit('event_activated', data) // WebSocket broadcast",
          "replacement_approach": "sseService.broadcastToAdmin('event_activated', data)",
          "integration_pattern": "Replace all admin-focused io.emit() with SSE"
        },
        "frontend/src/pages/admin/Events.tsx": {
          "lines_to_modify": "156-170",
          "current_issue": "useSSE hook called but not implemented",
          "exact_fix": "Import and use properly implemented useSSE hook",
          "dependency": "Requires completed backend SSE infrastructure"
        },
        "frontend/src/components/admin/SystemMonitoring.tsx": {
          "current_sse_usage": "Already uses useSSE hook correctly",
          "verification_needed": "Ensure backend endpoint /api/sse/system/status exists"
        }
      }
    },

    "priority_3_websocket_isolation": {
      "duration": "2-3 hours",
      "business_critical": "Isolate WebSocket to MINIMAL betting usage only",
      
      "modify_files": {
        "backend/src/sockets/streamingSocket.ts": {
          "current_complexity": "Dual namespace (/stream and /stream-control) + admin features",
          "new_approach": "Single /betting namespace for PAGO/DOY workflows only",
          "remove_features": ["Stream control events", "Admin notifications", "System monitoring"]
        },
        "frontend/src/contexts/WebSocketContext.tsx": {
          "current_usage": "Used by both admin and user interfaces",
          "new_limitation": "Import restricted to betting components only",
          "admin_migration": "Admin components must use SSE instead"
        }
      }
    },

    "priority_4_betting_windows_implementation": {
      "duration": "8-12 hours",
      "business_critical": "Core betting functionality with temporal fight logic",
      
      "fight_status_flow": {
        "temporal_logic": "upcoming → betting → live → completed",
        "betting_restrictions": "Apuestas SOLO permitidas durante status='betting'",
        "operator_controls": "Admin/operator controla transiciones de estado"
      },

      "backend_endpoints_required": {
        "GET /api/events/:eventId/current-betting": {
          "purpose": "Single endpoint returning active fight + available bets",
          "response": "{ currentFight: {...}, availableBets: [...], bettingOpen: boolean }"
        },
        "POST /api/fights/:fightId/open-betting": {
          "purpose": "Admin/operator opens betting window",
          "status_change": "upcoming → betting"
        },
        "POST /api/fights/:fightId/close-betting": {
          "purpose": "Admin/operator closes betting, starts fight", 
          "status_change": "betting → live"
        },
        "GET /api/bets/available/:fightId": {
          "purpose": "Get bets for specific fight",
          "validation": "Returns 403 if fight.status !== 'betting'"
        }
      },

      "frontend_components_required": {
        "admin/FightControl.tsx": {
          "purpose": "Admin controls for betting window management",
          "actions": ["Abrir apuestas", "Cerrar apuestas", "Registrar resultado"]
        },
        "user/CurrentBettingPanel.tsx": {
          "purpose": "Dynamic panel showing only current active fight",
          "features": ["Countdown timer", "Available bets list", "Create bet modal"]
        },
        "shared/FightStatusIndicator.tsx": {
          "purpose": "Visual status indicator for fight states",
          "states": ["Próximamente", "Apuestas abiertas", "En vivo", "Finalizada"]
        }
      },

      "sse_integration": {
        "real_time_updates": [
          "betting_opened: User sees betting panel activate",
          "betting_closed: User sees 'betting closed' message", 
          "bet_created: New bet appears in available list",
          "bet_matched: Bet removed from available list"
        ]
      },

      "database_modifications": {
        "fights_table_status_enum": "['upcoming', 'betting', 'live', 'completed', 'cancelled']",
        "bets_table_constraints": "Bets can only be created if fight.status = 'betting'",
        "automated_cleanup": "Auto-cancel pending bets when fight.status changes from 'betting'"
      }
    },
  },

  "before_after_examples": {
    "file_cleanup_example": {
      "before_messy": "// Multiple versions\nbackend/src/services/rtmpService.js\nbackend/src/services/rtmpService.ts\n// Inconsistent imports\nimport { rtmpService } from './rtmpService.js';",
      "after_clean": "// Single TypeScript version\nbackend/src/services/rtmpService.ts\n// Consistent imports\nimport { rtmpService } from './rtmpService';"
    },
    "sse_implementation": {
      "before_websocket": "// backend/src/routes/events.js line 285\nconst io = req.app.get('io');\nif (io) {\n  io.emit('event_activated', {\n    eventId: event.id,\n    streamUrl: event.streamUrl\n  });\n}",
      "after_sse": "// backend/src/routes/events.js line 285\nconst sseService = req.app.get('sseService');\nsseService.broadcastToAdmin('event_activated', {\n  eventId: event.id,\n  streamUrl: event.streamUrl,\n  timestamp: new Date()\n});"
    },
    "frontend_sse_usage": {
      "before_complex": "// Complex WebSocket singleton\nconst { addListener, removeListener } = useWebSocketContext();\nuseEffect(() => {\n  const cleanup = addListener('event_status', handler);\n  return cleanup;\n}, []);",
      "after_simple": "// Simple SSE hook\nconst eventStatus = useSSE(`/api/sse/admin/events/${eventId}`, {\n  dependencies: [eventId]\n});"
    }
  },

  "database_verification_checklist": {
    "primary_source": "backend/database-analysis/*.json files",
    "critical_verifications": [
      "events table has proper status enum (scheduled, in-progress, completed, cancelled)",
      "fights table has complete status enum (upcoming, betting, live, completed, cancelled)", 
      "users table role enum includes admin, operator, venue, user, gallera",
      "Foreign key relationships: events.operator_id → users.id, fights.event_id → events.id"
    ],
    "potential_inconsistencies": [
      "Sequelize models may not match database analysis - always verify against analysis files",
      "Enum values in models should exactly match CURRENT_ENUMS.json",
      "Foreign key constraints should match CURRENT_FOREIGN_KEYS.json"
    ]
  },

  "admin_environment_gaps_corrected": {
    "galleras_management": "❌ NOT A GAP - Admin can manage gallera users via Users.tsx",
    "ads_propaganda": "❌ NOT A GAP - Uses existing Articles.tsx system",
    "notifications_admin": "✅ REAL GAP - Missing admin interface and automated notification creation"
  },
  "hybrid_architecture_tasks": {
    "estimated_total_duration": "7-11 hours",
    "priorities_sequence": [
      "1. File cleanup (1-2 hours) - Remove .js duplicates, consolidate codebase",
      "2. SSE infrastructure (4-6 hours) - Admin interface real-time updates", 
      "3. WebSocket isolation (2-3 hours) - Betting system only"
    ],
    "mvp_readiness": "Hybrid architecture optimizes both admin UX and betting performance",
    "deployment_confidence": "High - cleaner separation of concerns, better maintainability"
  },
    "immediate_next_steps": [
      "1. Verify SSE endpoints work correctly",
      "2. Test admin SSE + user WebSocket simultaneously",
      "3. Remove WebSocket complexity from streaming",
      "4. Create operator dashboard with role limitations", 
      "5. Complete notification system"
    ],
    "success_criteria": [
      "SSE endpoints verified working",
      "Admin SSE + user WebSocket work simultaneously", 
      "WebSocket complexity removed (betting only)",
      "Operator dashboard functional with limitations",
      "Notification system implemented",
      "Polished betting experience maintained"
    ]
  },

  "tool_execution_sequence": {
    "gemini_cli_commands": [
      "Focus on creating SSE service first: backend/src/services/sseService.js",
      "Then SSE routes: backend/src/routes/sse.js with specific endpoints",
      "Update Events.tsx SSE integration: frontend/src/pages/admin/Events.tsx",
      "Create operator dashboard: frontend/src/pages/operator/OperatorDashboard.tsx",
      "Add permission middleware: backend/src/middleware/operatorAuth.js"
    ],
    "validation_steps": [
      "Test admin event activation → fight management → stream controls",
      "Verify operator permissions prevent admin/operator management", 
      "Check SSE real-time updates work across browser tabs",
      "Confirm database analysis matches actual implementation"
    ]
  },

  "risk_mitigation": {
    "notification_overload": "Batch SSE updates, clear visual hierarchy in UI",
    "permission_escalation": "Strict validation - operators cannot manage privileged roles",
    "database_inconsistency": "Always verify against database-analysis/*.json files",
    "technical_user_complexity": "Streamlined UI with clear visual flows for operations"
  }
}
