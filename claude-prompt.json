{
  "metadata": {
    "project": "GalloBets - Professional Cockfighting Streaming Platform",
    "objective": "Event/Fight workflow system validation and optimization",
    "target_ai": "Qwen Independent CLI",
    "execution_mode": "validation_and_optimization",
    "estimated_total_time": "2-4 hours",
    "created_date": "2025-09-16",
    "created_by": "Claude Code - Independent Qwen CLI + Claude Validator Pattern"
  },

  "brain_context": {
    "development_lessons": {
      "optimal_workflow_established": "Independent Qwen CLI + Claude Validator is the permanent pattern",
      "mcp_hybrid_failed": "MCP tools have filesystem limitations, independent CLI superior",
      "dependency_first": "ALWAYS install dependencies as Task 0",
      "source_file_targeting": "Target .ts/.tsx source files, NEVER .js",
      "verification_required": "TypeScript compilation + dev servers must work"
    },
    "project_architecture": {
      "database": "PostgreSQL on Neon.tech",
      "backend": "Node.js + Express + Sequelize + SSE",
      "frontend": "React + TypeScript + Tailwind CSS",
      "real_time": "SSE for admin, WebSocket minimal for betting",
      "temporal_logic": "Fight status transitions: upcoming → betting → live → completed"
    }
  },

  "current_implementation_state": {
    "status": "WORKFLOW SYSTEM COMPLETED - Need validation and optimization",
    "backend_implemented": {
      "events_api": "PATCH /api/events/:id/status with action: activate|complete|cancel",
      "fights_api": "PATCH /api/fights/:id/status with status and optional result",
      "event_service": "Enhanced with stream key generation and workflow logic",
      "compilation": "TypeScript passes, server running on localhost:3001"
    },
    "frontend_implemented": {
      "EventWorkflowControls": "Event status management with SSE integration",
      "FightStatusManager": "Fight workflow with result recording and timeline",
      "Events_page": "Updated to use new workflow components",
      "compilation": "TypeScript passes, server running on localhost:5174"
    },
    "integration_status": "Components integrated, servers running successfully"
  },

  "validation_tasks": {
    "task_0_system_verification": {
      "description": "Verify current system is working properly",
      "mandatory_first_step": true,
      "estimated_time": "30 minutes",
      "validation_steps": [
        "Verify backend server responds: curl http://localhost:3001/api/events",
        "Verify frontend loads: curl -I http://localhost:5174/",
        "Check TypeScript compilation: cd backend && npx tsc --noEmit",
        "Check frontend compilation: cd frontend && npx tsc --noEmit",
        "Verify new endpoints work: curl -X PATCH http://localhost:3001/api/events/test-id/status"
      ],
      "success_criteria": [
        "Both servers running without errors",
        "API endpoints respond correctly",
        "TypeScript compilation clean",
        "No console errors in browser"
      ]
    },

    "task_1_crud_venues_galleras_fix": {
      "description": "Fix venue and gallera CRUD operations in admin modals",
      "priority": "HIGH - Critical user data persistence issue",
      "estimated_time": "2-3 hours",
      "problem_analysis": {
        "issue_identified": "Modal tabs 1 and 2 (Profile and Entity) not saving to database",
        "root_cause": "Mismatch between frontend expectations and backend field names/structure",
        "affected_components": [
          "frontend/src/components/admin/EditVenueGalleraModal.tsx",
          "frontend/src/pages/admin/Venues.tsx",
          "frontend/src/pages/admin/Galleras.tsx",
          "backend/src/routes/venues.ts",
          "backend/src/routes/galleras.ts",
          "backend/src/routes/users.ts"
        ]
      },
      "database_structure_reference": {
        "users_table": {
          "profile_info": "JSONB field containing: fullName, phoneNumber, address, identificationNumber",
          "basic_fields": "username, email, role, is_active"
        },
        "venues_table": {
          "fields": "name, location, description, contact_info(JSONB), owner_id, status, is_verified, images(array)",
          "contact_info_structure": "JSONB with phone, email, website, address"
        },
        "galleras_table": {
          "fields": "name, location, description, owner_id, specialties(JSONB), active_roosters, fight_record(JSONB), images(array), status, is_verified"
        }
      },
      "implementation_tasks": [
        "1. Verify EditVenueGalleraModal.tsx field mappings match database structure",
        "2. Check users.ts PUT /profile endpoint handles profileInfo correctly",
        "3. Check users.ts PUT /:id endpoint for admin email updates",
        "4. Verify venues.ts PUT /:id endpoint processes all modal fields",
        "5. Create equivalent galleras.ts routes if missing",
        "6. Test Profile tab saves: username, email, profileInfo.* fields",
        "7. Test Entity tab saves: name, location, description, contactInfo.* fields",
        "8. Add proper error handling and validation feedback",
        "9. Ensure UI shows save success/error messages",
        "10. Test admin vs self-edit permission logic"
      ],
      "specific_fixes_needed": [
        "Verify profileInfo vs profile_info field name consistency",
        "Ensure contactInfo vs contact_info JSONB structure matches",
        "Check if galleras API endpoints exist and match venues pattern",
        "Fix any snake_case vs camelCase mismatches",
        "Add proper error handling in modal save operations",
        "Ensure database transactions for multi-table updates"
      ],
      "testing_requirements": [
        "Create test venue user and edit Profile tab - verify database save",
        "Edit Entity tab information - verify database save",
        "Test admin editing other users vs self-editing",
        "Test error scenarios - invalid data, network failures",
        "Verify modal shows success/error feedback to user"
      ]
    },

    "task_2_workflow_testing": {
      "description": "Test complete event and fight workflow functionality",
      "estimated_time": "60 minutes",
      "testing_scenarios": [
        "Create test event and fights through admin interface",
        "Test event status transitions: scheduled → in-progress → completed",
        "Test fight status transitions: upcoming → betting → live → completed",
        "Verify stream key generation on event activation",
        "Test fight result recording (red/blue/draw)",
        "Verify SSE real-time updates work correctly"
      ],
      "validation_focus": [
        "All status transitions work according to business logic",
        "UI components respond correctly to state changes",
        "SSE notifications are received and displayed",
        "Error handling works for invalid transitions",
        "Loading states and user feedback function properly"
      ]
    },

    "task_3_optimization_opportunities": {
      "description": "Identify and implement optimizations in the workflow system",
      "estimated_time": "90 minutes",
      "optimization_areas": [
        "Error handling enhancement - better user messages",
        "Loading states improvement - more responsive UI feedback",
        "Type safety enhancements - stricter TypeScript types",
        "Performance optimizations - reduce unnecessary re-renders",
        "Code organization - clean up any duplicated logic",
        "Accessibility improvements - better keyboard navigation",
        "User experience refinements - smoother interactions"
      ],
      "implementation_guidelines": [
        "Only make improvements that add clear value",
        "Maintain existing functionality and patterns",
        "Test each optimization before proceeding to next",
        "Document any significant changes or patterns discovered"
      ]
    }
  },

  "technical_specifications": {
    "backend_apis": {
      "event_workflow": {
        "endpoint": "PATCH /api/events/:id/status",
        "authentication": "Bearer token required",
        "body": {"action": "activate|complete|cancel"},
        "validation": "Enforces scheduled → in-progress → completed transitions",
        "stream_key_generation": "Auto-generates on activation: [venue]_[date]_[eventId]"
      },
      "fight_workflow": {
        "endpoint": "PATCH /api/fights/:id/status",
        "body": {"status": "betting|live|completed", "result": "red|blue|draw (optional)"},
        "validation": "Enforces upcoming → betting → live → completed transitions",
        "result_recording": "Required when status changes to completed"
      }
    },
    "frontend_components": {
      "EventWorkflowControls": {
        "location": "frontend/src/components/admin/EventWorkflowControls.tsx",
        "features": ["Status transition buttons", "SSE integration", "Error handling", "Progress indicator"],
        "props": {"event": "Event", "onEventUpdated": "Function", "disabled": "boolean"}
      },
      "FightStatusManager": {
        "location": "frontend/src/components/admin/FightStatusManager.tsx",
        "features": ["Timeline visualization", "Result recording", "Real-time updates", "Status validation"],
        "props": {"fight": "Fight", "onFightUpdated": "Function", "disabled": "boolean"}
      }
    }
  },

  "success_criteria": {
    "system_stability": [
      "Backend and frontend servers start without errors",
      "TypeScript compilation passes with zero errors",
      "API endpoints respond with correct status codes",
      "No console errors during normal operation"
    ],
    "workflow_functionality": [
      "Event status transitions work correctly",
      "Fight status transitions follow business logic",
      "Stream key generation works on event activation",
      "Fight result recording functions properly",
      "SSE real-time updates synchronize correctly"
    ],
    "user_experience": [
      "Components render without visual issues",
      "Button interactions provide immediate feedback",
      "Error messages are clear and helpful",
      "Loading states indicate progress appropriately",
      "Real-time updates appear smoothly"
    ]
  },

  "validation_protocol": {
    "for_claude_validator": [
      "Read all files modified during optimization",
      "Run TypeScript compilation: npx tsc --noEmit",
      "Test API endpoints with curl commands",
      "Verify component integration in browser",
      "Check for any breaking changes or regressions",
      "Ensure all success criteria are met",
      "Document any patterns or improvements for future reference"
    ]
  },

  "file_locations": {
    "backend_base": "/home/veranoby/sports-bets/backend",
    "frontend_base": "/home/veranoby/sports-bets/frontend",
    "brain_files": [
      "/home/veranoby/sports-bets/brain/backlog.json",
      "/home/veranoby/sports-bets/brain/development_lessons.json",
      "/home/veranoby/sports-bets/brain/sdd_system.json"
    ],
    "key_implementation_files": [
      "backend/src/routes/events.ts",
      "backend/src/routes/fights.ts",
      "backend/src/services/eventService.ts",
      "frontend/src/components/admin/EventWorkflowControls.tsx",
      "frontend/src/components/admin/FightStatusManager.tsx",
      "frontend/src/pages/admin/Events.tsx"
    ]
  },

  "execution_notes": {
    "approach": "Validation first, then careful optimization",
    "safety": "Use git commits before major changes for easy rollback",
    "testing": "Test each change before proceeding to next optimization",
    "documentation": "Document any new patterns discovered for future use"
  }
}