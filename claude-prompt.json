{
  "knowledge_verification": {
    "database_analysis_consulted": [
      "backend/database-analysis/CURRENT_TABLES.json - Complete PostgreSQL schema",
      "backend/database-analysis/CURRENT_FOREIGN_KEYS.json - All table relationships",
      "backend/database-analysis/CURRENT_CONSTRAINTS.json - Database constraints",
      "backend/database-analysis/users.json - User data and role examples"
    ],
    "existing_components_identified": [
      "SystemMonitoring component - needs real API integration",
      "UserManagementTable - exists but may need CRUD completion", 
      "VenueApprovalPanel - exists but integration unclear",
      "FinancialStats - exists but data source needs connection",
      "Admin routing and authentication - implemented"
    ],
    "knowledge_gaps": [
      "Current status of CRUD operations completeness needs verification",
      "Model/Sequelize consistency with database analysis files needs validation",
      "Streaming control integration status unclear"
    ]
  },
  
  "task_decomposition": {
    "phase_0_project_setup": {
      "duration": "0.5 hours",
      "tasks": [
        "Update .gitignore to exclude Claude-related files and directories",
        "Add entries: .claude/, claude_workspace/, *.claude, .cursor/, cursor_workspace/",
        "Verify backend/database-analysis/*.json files are accessible and current"
      ]
    },
    "phase_1_error_analysis": {
      "duration": "2 hours",
      "tasks": [
        "Analyze SystemMonitoring component API integration failures",
        "Verify CRUD operations completeness across admin components",
        "Cross-reference database JSONs with Sequelize models for inconsistencies",
        "Identify broken or incomplete admin dashboard integrations"
      ]
    },
    "phase_2_critical_streaming_workflow": {
      "duration": "4 hours", 
      "tasks": [
        "Implement intuitive event creation workflow (non-technical users)",
        "Create event activation with streaming key generation",
        "Build fight management within events (create/start/stop fights)",
        "Implement streaming controls (start/stop per fight with clear status)",
        "Add between-fight interview session handling"
      ]
    },
    "phase_3_crud_completion": {
      "duration": "3 hours",
      "tasks": [
        "Complete user management (create/edit/delete all roles)",
        "Finalize venue management (approve/reject/modify)",
        "Implement event CRUD with full lifecycle",
        "Add article/propaganda management",
        "Create bulk operations for efficiency"
      ]
    },
    "phase_4_integration_testing": {
      "duration": "1 hour",
      "tasks": [
        "Test complete admin workflow end-to-end",
        "Verify streaming controls work with backend",
        "Test role-based permission enforcement",
        "Validate non-technical user experience"
      ]
    }
  },

  "purpose_and_requirements": {
    "primary_purpose": "Complete admin environment to 100% functionality enabling operator hierarchy and streaming revenue generation",
    "business_objective": "Enable revenue generation through event transmissions by Sept 15, 2025",
    "user_experience_priority": "Interface must be intuitive for non-technical operators managing live events",
    "functional_requirements": [
      "Real-time system monitoring with live streaming metrics",
      "Complete CRUD operations for all entities (users, events, venues, fights, articles)",
      "Intuitive streaming workflow: event creation → activation → fight management → transmission control",
      "Role-based interface showing appropriate tools per user role",
      "Between-fight interview session management capability",
      "Bulk operations for operational efficiency"
    ],
    "non_functional_requirements": [
      "Response time <2 seconds for all admin operations",
      "Real-time updates for streaming status and metrics", 
      "Mobile-responsive design (desktop/tablet primary)",
      "99.5% uptime during live events",
      "Clear error messages and loading states for non-technical users"
    ]
  },

  "inputs_and_outputs": {
    "input_parameters": {
      "user_context": {
        "type": "AuthUser",
        "validation": "Must have admin or operator role",
        "example": "{ id: 'uuid', role: 'admin', username: 'admin_user' }"
      },
      "event_data": {
        "type": "EventCreationForm",
        "validation": "name (3-255 chars), venueId (UUID), scheduledDate (future date)",
        "example": "{ name: 'Gallera El Palenque Domingo', venueId: 'venue-uuid', scheduledDate: '2025-09-15T15:00:00Z' }"
      },
      "fight_data": {
        "type": "FightCreationForm", 
        "validation": "redCorner !== blueCorner, weight > 0, eventId exists",
        "example": "{ eventId: 'event-uuid', redCorner: 'Gallo Colorado', blueCorner: 'Gallo Azul', weight: 2.5 }"
      }
    },
    "output_formats": {
      "admin_dashboard": "Complete React component with tabs: Users, Events, Venues, Monitoring",
      "streaming_controls": "Real-time status indicators with start/stop buttons and viewer counts", 
      "crud_interfaces": "Consistent table views with create/edit modals and bulk operations",
      "system_monitoring": "Live metrics display with health indicators and error logs"
    },
    "edge_cases": [
      "Handle streaming server connectivity failures gracefully",
      "Prevent event activation without scheduled fights", 
      "Block fight creation during active transmission",
      "Handle concurrent operator actions on same event"
    ]
  },

  "constraints_and_restrictions": {
    "technical_constraints": [
      "PostgreSQL database on Neon.tech - cannot modify schema",
      "Sequelize ORM models must match database JSON definitions exactly",
      "React + TypeScript + Tailwind CSS stack - no additional libraries",
      "WebSocket namespaces: /stream and /stream-control already defined",
      "JWT authentication with role-based claims required"
    ],
    "business_constraints": [
      "Non-technical users (galleros) will operate streaming controls",
      "Live events cannot be interrupted by system failures",
      "Revenue generation depends on reliable streaming workflow",
      "Operator hierarchy must prevent admin/operator management by operators"
    ],
    "timeline_constraints": [
      "MVP deadline: September 15, 2025 (13 days remaining)",
      "Admin environment must be 100% complete before operator integration",
      "Testing with real users required before production deployment"
    ]
  },

  "apis_and_integrations": {
    "internal_apis": [
      "/api/system/status - System monitoring data (needs implementation)",
      "/api/users - CRUD operations with role filtering",
      "/api/events - Complete event lifecycle management", 
      "/api/events/:id/activate - Event activation with stream key generation",
      "/api/streaming/start - Start RTMP stream for event",
      "/api/streaming/stop - Stop active stream",
      "/api/venues - Venue management with approval workflow",
      "/api/fights - Fight management within events"
    ],
    "websocket_integration": [
      "/stream-control namespace - Real-time streaming controls",
      "stream_started event - Broadcast stream status changes",
      "stream_stopped event - Handle stream termination",
      "viewer_count updates - Real-time viewer metrics"
    ],
    "database_schema_reference": [
      "backend/database-analysis/CURRENT_TABLES.json - Complete table definitions",
      "backend/database-analysis/CURRENT_FOREIGN_KEYS.json - All relationships",
      "backend/database-analysis/CURRENT_CONSTRAINTS.json - Database constraints",
      "Users: id, username, email, role, profile_info",
      "Events: id, name, venue_id, operator_id, status, stream_key",
      "Venues: id, name, location, owner_id, status",
      "Fights: id, event_id, red_corner, blue_corner, status"
    ]
  },

  "test_driven_development": {
    "unit_tests": [
      "SystemMonitoring component renders with loading state",
      "Event creation form validates required fields",
      "Streaming controls disable when no active event",
      "Role-based component rendering works correctly",
      "CRUD operations handle errors gracefully"
    ],
    "integration_tests": [
      "Complete event workflow: create → activate → add fights → start stream",
      "Admin dashboard loads all sections without errors",
      "Real-time streaming metrics update correctly",
      "Role-based permissions prevent unauthorized actions"
    ],
    "user_acceptance_tests": [
      "Non-technical user can create and activate event in <5 minutes",
      "Streaming controls are intuitive during live event",
      "System monitoring provides actionable information during issues",
      "Between-fight workflow (stop stream, interview, start next fight) is smooth"
    ],
    "mock_data": [
      "Mock system status with healthy/degraded/down states",
      "Sample events with different statuses and streaming states",
      "Mock user data covering all roles (admin, operator, venue, user)",
      "Test fight data with various states and results"
    ]
  },

  "development_phases": {
    "phase_1_diagnostic": {
      "objective": "Identify and document all current issues",
      "deliverables": [
        "List of broken/incomplete admin components",
        "Database vs Model consistency report",
        "API integration status assessment",
        "Priority fix list based on P0 requirements"
      ],
      "validation": "All issues documented with reproduction steps"
    },
    "phase_2_streaming_workflow": {
      "objective": "Implement complete non-technical-friendly streaming workflow",
      "deliverables": [
        "Event creation wizard with validation",
        "Event activation with automatic stream key generation",
        "Fight management interface (add/remove/reorder fights)",
        "Streaming controls with real-time status",
        "Interview session handling between fights"
      ],
      "validation": "Complete event lifecycle works end-to-end"
    },
    "phase_3_crud_completion": {
      "objective": "Ensure all admin CRUD operations are complete and functional",
      "deliverables": [
        "User management with role-based operations",
        "Venue approval workflow",
        "Event management with full lifecycle",
        "Article/content management system",
        "Bulk operations for efficiency"
      ],
      "validation": "All CRUD operations tested with edge cases"
    },
    "phase_4_integration": {
      "objective": "Connect all components with real-time data and ensure production readiness",
      "deliverables": [
        "SystemMonitoring with live data from /api/system/status",
        "Real-time streaming metrics via WebSocket",
        "Error handling and loading states",
        "Mobile-responsive interface verification"
      ],
      "validation": "Admin dashboard fully functional with real data"
    }
  },

  "coding_conventions": {
    "component_structure": "Functional components with TypeScript interfaces",
    "state_management": "useState and useReducer, Context for global state",
    "styling": "Tailwind CSS classes, consistent color palette from UI_UX.json",
    "api_calls": "Custom hooks (useApi.ts pattern) with error handling",
    "file_organization": "pages/admin/ for page components, components/admin/ for reusable components"
  },

  "context_injection": {
    "existing_patterns": [
      "SystemMonitoring component structure - extend with real API integration",
      "AdminDashboard tab navigation pattern - use for consistency",
      "Card component from shared/ - use for consistent UI",
      "LoadingSpinner and ErrorMessage patterns - use throughout",
      "Role-based rendering pattern from ProtectedRoute - apply to admin sections"
    ],
    "database_schema": "Reference CURRENT_TABLES.json and FOREIGN_KEYS.json as source of truth",
    "streaming_architecture": "Backend streamingSocket.ts defines WebSocket events - integrate with frontend",
    "authentication": "JWT with role claims - verify admin/operator permissions"
  },

  "tool_specific_config": {
    "gemini_cli_settings": {
      "model": "gemini-2.0-flash-exp",
      "temperature": 0.1,
      "max_tokens": 8192,
      "safety_settings": "block_none"
    },
    "system_instructions": "You are an expert React/TypeScript developer working on a sports betting platform admin interface. Focus on creating intuitive interfaces for non-technical users managing live streaming events. Prioritize functionality and user experience over visual complexity.",
    "database_context": "Reference backend/database-analysis/*.json files for complete PostgreSQL schema, foreign keys, and constraints",
    "working_directory": "frontend/src/",
    "focus_areas": "components/admin/ and pages/admin/ directories",
    "gitignore_update": "Add Claude-related directories and files to .gitignore"
  },

  "risk_mitigation": {
    "common_gemini_cli_issues": [
      "Hallucinating API endpoints - verify all endpoints exist in project_knowledge",
      "Creating inconsistent component patterns - follow existing Card/LoadingSpinner patterns",
      "Missing TypeScript interfaces - define all interfaces based on database schema",
      "Ignoring role-based permissions - always check user.role in admin components"
    ],
    "streaming_workflow_risks": [
      "Complex workflow confusing non-technical users - use wizard pattern with clear steps",
      "Stream state synchronization issues - use WebSocket events for real-time updates", 
      "Race conditions during fight transitions - implement proper loading states",
      "Error states during live events - provide clear recovery actions"
    ],
    "rollback_plan": [
      "Keep existing admin components as backup until new implementation tested",
      "Incremental deployment - test each phase before proceeding",
      "Real user testing before production deployment"
    ]
  },

  "success_criteria": {
    "technical_validation": [
      "All admin CRUD operations complete and functional",
      "SystemMonitoring displays real-time data from backend",
      "Streaming workflow works end-to-end with WebSocket integration",
      "Role-based permissions properly enforced",
      "Mobile-responsive interface on tablets"
    ],
    "business_validation": [
      "Non-technical user can create and start event transmission in <5 minutes",
      "Admin dashboard provides actionable information during live events",
      "Between-fight workflow smooth enough for live event use",
      "Zero critical errors during admin operations"
    ],
    "integration_validation": [
      "Database models consistent with PostgreSQL schema JSONs",
      "All API endpoints respond correctly with proper error handling",
      "Real-time updates work during concurrent user actions",
      "Performance acceptable with 25+ concurrent admin actions"
    ]
  },

  "model_database_consistency_check": {
    "priority": "HIGH - Report before implementation",
    "verification_required": [
      "Compare Sequelize User model with users table JSON definition",
      "Verify Event model matches events table with all foreign keys",
      "Check Venue model consistency with venues table structure", 
      "Validate Fight model aligns with fights table schema",
      "Ensure all foreign key relationships match CURRENT_FOREIGN_KEYS.json"
    ],
    "action_required": "Document any inconsistencies found for separate resolution before proceeding with frontend work"
  }
}