{
  "knowledge_verification": {
    "brain_files_consulted": [
      "backlog.json - WebSocket real-time controls 60% complete, needs frontend integration",
      "priorities_memory_index.json - P0 transmission workflow critical path, 13 days deadline", 
      "sdd_system.json - WebSocket infrastructure documented, streaming via RTMP+WebSocket",
      "prd_system.json - Real-time admin controls required for operator management"
    ],
    "current_broken_functionality": {
      "backend/src/sockets/streamingSocket.ts": "WebSocket implementation with memory leak risks, complex singleton pattern",
      "frontend/src/components/admin/SystemMonitoring.tsx": "Line 67: systemAPI.getStatus() calls non-existent /api/system/status endpoint",
      "frontend/src/components/streaming/RTMPConfig.tsx": "Uses WebSocket for stream events, need SSE replacement",
      "frontend/src/hooks/useApi.ts": "Lines 145-160: WebSocket streaming controls via Socket.io",
      "backend/src/routes/streaming.ts": "Lines 89-120: Uses WebSocket emit for status broadcasts"
    },
    "exact_files_to_modify": [
      "backend/src/services/sseService.js - CREATE NEW",
      "backend/src/routes/sse.js - CREATE NEW", 
      "backend/src/routes/streaming.ts - MODIFY lines 89-120",
      "frontend/src/hooks/useSSE.js - CREATE NEW",
      "frontend/src/components/admin/SystemMonitoring.tsx - MODIFY lines 67-85",
      "frontend/src/pages/admin/Events.tsx - MODIFY streaming controls integration",
      "backend/package.json - REMOVE socket.io dependencies",
      "frontend/package.json - REMOVE socket.io-client dependencies"
    ],
    "feature_flag_constraints": {
      "FEATURES_BETTING": "false - betting SSE structure created but disabled",
      "FEATURES_WALLET": "false - wallet SSE structure created but disabled", 
      "FEATURES_STREAMING": "true - primary focus of migration"
    }
  },

  "task_decomposition": {
    "phase_1_sse_infrastructure": {
      "duration": "4 hours",
      "files_to_create": [
        "backend/src/services/sseService.js",
        "backend/src/routes/sse.js",
        "frontend/src/hooks/useSSE.js"
      ],
      "atomic_tasks": [
        "Create SSEService class with connection management (1 hour)",
        "Create SSE routes for events, system status, betting (1.5 hours)",
        "Create frontend useSSE hook with auto-reconnection (1.5 hours)"
      ]
    },
    "phase_2_streaming_controls_migration": {
      "duration": "3 hours", 
      "files_to_modify": [
        "backend/src/routes/streaming.ts",
        "frontend/src/components/streaming/RTMPConfig.tsx",
        "frontend/src/pages/admin/Events.tsx"
      ],
      "atomic_tasks": [
        "Replace WebSocket broadcasts with SSE in streaming.ts (1 hour)",
        "Update RTMPConfig to use SSE instead of WebSocket (1 hour)",
        "Update Events page streaming controls with SSE (1 hour)"
      ]
    },
    "phase_3_system_monitoring_fix": {
      "duration": "2 hours",
      "files_to_modify": [
        "backend/src/routes/sse.js",
        "frontend/src/components/admin/SystemMonitoring.tsx"
      ],
      "atomic_tasks": [
        "Add /api/sse/system/status endpoint with real data (1 hour)",
        "Fix SystemMonitoring.tsx to use SSE endpoint (1 hour)"
      ]
    },
    "phase_4_betting_sse_structure": {
      "duration": "2 hours",
      "files_to_create": [
        "backend/src/routes/betting-sse.js",
        "frontend/src/components/betting/BettingNotifications.tsx"
      ],
      "atomic_tasks": [
        "Create betting SSE routes (feature flag disabled) (1 hour)",
        "Create betting notifications component (feature flag disabled) (1 hour)"
      ]
    },
    "phase_5_websocket_removal": {
      "duration": "1 hour",
      "files_to_modify": [
        "backend/package.json",
        "frontend/package.json", 
        "backend/src/app.js"
      ],
      "atomic_tasks": [
        "Remove Socket.io dependencies and imports (30 minutes)",
        "Update app.js to remove WebSocket initialization (30 minutes)"
      ]
    }
  },

  "purpose_and_requirements": {
    "primary_purpose": "Complete migration from WebSocket to SSE for all real-time functionality while maintaining feature flag constraints",
    "business_critical": "Enable admin/operator streaming controls without WebSocket complexity for September 15 MVP deadline",
    "feature_flag_compliance": "Betting and wallet SSE infrastructure created but disabled via existing feature flags",
    "technical_objective": "Simpler architecture, auto-reconnection, reduced memory leaks, same functionality"
  },

  "file_level_specificity": {
    "backend/src/services/sseService.js": {
      "purpose": "Central SSE connection management service",
      "create_new": true,
      "exact_content": "Class with addConnection, removeConnection, broadcast, broadcastToEvent methods",
      "dependencies": "None - standalone service"
    },
    "backend/src/routes/sse.js": {
      "purpose": "SSE endpoint routes for events, system, betting",
      "create_new": true,
      "endpoints_to_create": [
        "GET /api/sse/events/:eventId/stream - Event streaming status",
        "GET /api/sse/system/status - System monitoring data", 
        "GET /api/sse/users/me/betting - Betting notifications (feature flag)"
      ]
    },
    "frontend/src/hooks/useSSE.js": {
      "purpose": "React hook for SSE connections with auto-reconnection",
      "create_new": true,
      "exact_functionality": "useSSE(endpoint, dependencies) returns data state with reconnection logic"
    },
    "backend/src/routes/streaming.ts": {
      "lines_to_modify": "89-120",
      "current_broken_code": "io.of('/stream').to(`event:${data.eventId}`).emit('stream_status', data)",
      "replacement_pattern": "sseService.broadcastToEvent(data.eventId, 'stream_status', data)"
    },
    "frontend/src/components/admin/SystemMonitoring.tsx": {
      "lines_to_modify": "67-85", 
      "current_broken_code": "const response = await systemAPI.getStatus();",
      "replacement_pattern": "const systemStatus = useSSE('/api/sse/system/status');"
    }
  },

  "before_after_examples": {
    "streaming_control_backend": {
      "before": "// Line 89-95 in backend/src/routes/streaming.ts\nio.of('/stream').to(`event:${eventId}`).emit('stream_status', {\n  status: 'live',\n  streamId: data.streamId,\n  timestamp: new Date()\n});",
      "after": "// Replace with SSE broadcast\nsseService.broadcastToEvent(eventId, 'stream_status', {\n  status: 'live',\n  streamId: data.streamId,\n  timestamp: new Date()\n});"
    },
    "system_monitoring_frontend": {
      "before": "// Lines 67-85 in SystemMonitoring.tsx\nconst loadSystemStatus = async () => {\n  try {\n    const response = await systemAPI.getStatus();\n    setSystemStatus(response.data);\n  } catch (err) {\n    setError(err.message);\n  }\n};",
      "after": "// Replace with SSE hook\nconst SystemMonitoring = () => {\n  const systemStatus = useSSE('/api/sse/system/status');\n  const [error, setError] = useState(null);\n  \n  if (!systemStatus && !error) {\n    return <LoadingSpinner />;\n  }"
    },
    "streaming_controls_frontend": {
      "before": "// In RTMPConfig.tsx - WebSocket listener\nsocket.on('stream_status', (data) => {\n  setStreamStatus(data.status);\n});",
      "after": "// Replace with SSE hook\nconst streamStatus = useSSE(`/api/sse/events/${eventId}/stream`);\n\nuseEffect(() => {\n  if (streamStatus) {\n    setStreamStatus(streamStatus.status);\n  }\n}, [streamStatus]);"
    }
  },

  "api_endpoints_specification": {
    "backend_sse_routes": {
      "GET /api/sse/events/:eventId/stream": {
        "auth": "JWT required",
        "response_format": "text/event-stream",
        "events": ["stream_status", "viewer_count", "stream_error"],
        "sample_data": "event: stream_status\\ndata: {\"status\":\"live\",\"viewerCount\":25}\\n\\n"
      },
      "GET /api/sse/system/status": {
        "auth": "Admin/Operator only",
        "response_format": "text/event-stream", 
        "interval": "5 seconds",
        "sample_data": "data: {\"api\":{\"status\":\"healthy\"},\"database\":{\"status\":\"healthy\"}}\\n\\n"
      },
      "GET /api/sse/users/me/betting": {
        "auth": "JWT required",
        "feature_flag": "FEATURES_BETTING must be true",
        "events": ["pago_proposed", "proposal_accepted", "bet_matched"],
        "disabled_response": "403 Forbidden if feature flag false"
      }
    },
    "modified_rest_endpoints": {
      "POST /api/streaming/start": {
        "current_websocket_emit": "Remove io.emit() calls",
        "new_sse_broadcast": "Add sseService.broadcastToEvent() calls",
        "response_unchanged": "Same JSON response format"
      }
    }
  },

  "feature_flag_implementation": {
    "betting_sse_structure": {
      "create_files": [
        "backend/src/routes/betting-sse.js",
        "frontend/src/components/betting/BettingNotifications.tsx"
      ],
      "feature_flag_check": "if (!process.env.FEATURES_BETTING === 'true') return res.status(403).json({error: 'Feature disabled'});",
      "frontend_conditional": "const bettingNotifications = process.env.VITE_FEATURES_BETTING === 'true' ? useSSE('/api/sse/users/me/betting') : null;"
    },
    "wallet_sse_structure": {
      "create_files": [
        "backend/src/routes/wallet-sse.js"
      ],
      "feature_flag_check": "if (!process.env.FEATURES_WALLET === 'true') return res.status(403).json({error: 'Feature disabled'});",
      "purpose": "Wallet balance updates via SSE when feature enabled"
    }
  },

  "validation_steps": {
    "backend_validation": [
      "npm start - server starts without WebSocket errors",
      "curl -N http://localhost:3001/api/sse/system/status - SSE stream works",
      "POST to /api/streaming/start - check SSE broadcast not WebSocket emit"
    ],
    "frontend_validation": [
      "Admin dashboard loads SystemMonitoring without API errors",
      "Events page streaming controls work with SSE",
      "Network tab shows EventSource connections not WebSocket",
      "Feature flags: betting/wallet components not rendered when disabled"
    ],
    "integration_validation": [
      "Stream start/stop controls work end-to-end via SSE",
      "Admin dashboard shows real-time system status",
      "Multiple browser tabs receive same SSE updates",
      "Auto-reconnection works after server restart"
    ]
  },

  "error_context_embedding": {
    "current_failing_functionality": {
      "systemAPI.getStatus()": "Returns 404 - endpoint /api/system/status doesn't exist",
      "WebSocket memory leaks": "activeViewers Map grows without cleanup",
      "Socket.io complexity": "Singleton pattern causing connection issues"
    },
    "migration_risk_mitigation": {
      "gradual_replacement": "Keep WebSocket imports until SSE working, then remove",
      "feature_flag_safety": "Betting/wallet SSE created but disabled by existing flags",
      "backwards_compatibility": "Same data formats, same component interfaces"
    }
  },

  "tool_specific_config": {
    "gemini_cli_settings": {
      "working_directory": "./",
      "focus_directories": ["backend/src/", "frontend/src/"],
      "avoid_patterns": ["node_modules/", "dist/", ".git/"],
      "file_creation_priority": "backend services first, then routes, then frontend hooks"
    },
    "execution_sequence": [
      "1. Create backend/src/services/sseService.js",
      "2. Create backend/src/routes/sse.js", 
      "3. Create frontend/src/hooks/useSSE.js",
      "4. Modify backend/src/routes/streaming.ts lines 89-120",
      "5. Modify frontend/src/components/admin/SystemMonitoring.tsx lines 67-85",
      "6. Create betting SSE structure (feature flag disabled)",
      "7. Remove WebSocket dependencies from package.json files"
    ],
    "dependencies_to_install": [],
    "dependencies_to_remove": ["socket.io", "socket.io-client"]
  },

  "success_criteria": {
    "functional_requirements": [
      "Admin can start/stop streams via SSE controls (no WebSocket)",
      "SystemMonitoring dashboard shows real-time data via SSE",
      "Event streaming status updates work via SSE",
      "Feature flags keep betting/wallet SSE disabled but code ready",
      "No WebSocket imports or Socket.io dependencies remain"
    ],
    "technical_requirements": [
      "All SSE endpoints return proper Content-Type: text/event-stream",
      "Auto-reconnection works on network interruption",
      "Memory usage stable (no connection leaks)",
      "Same data formats maintained for component compatibility"
    ],
    "business_requirements": [
      "MVP streaming functionality maintained exactly as before",
      "Admin/operator workflow unchanged from user perspective", 
      "13-day deadline preserved - simpler architecture enables faster development",
      "Future betting/wallet features ready for activation via feature flags"
    ]
  }
}
