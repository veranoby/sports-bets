{
  "task": "Complete Database Architecture Rebuild - From Chaos to Production-Ready",
  "description": "Rebuild entire database architecture with proper migrations, eliminate Sequelize sync issues, and implement production-grade database management.",

  "context": {
    "current_problem": "524 constraints + 444 indexes due to uncontrolled Sequelize sync",
    "root_cause": "sync: {alter: true} + multiple server restarts = duplicate constraints",
    "solution_approach": "Complete rebuild with controlled migrations",
    "database_provider": "Neon.tech PostgreSQL 15+",
    "project_type": "Sports betting platform with real-time features",
    "database_analysis_source": "Read from backend/database-analysis/ folder: current_tables.json, current_constraints.json, current_foreign_keys-json, current_enums.json, current_indexes.json, database_stats.json"
  },

  "database_architecture_principles": {
    "migration_strategy": "Manual migrations ONLY - zero auto-sync",
    "constraint_management": "Single constraint per logical rule",
    "index_strategy": "Composite indexes for query patterns",
    "nomenclature": "Database snake_case, TypeScript camelCase with mapping",
    "transaction_safety": "All schema changes in transactions with rollback",
    "performance_first": "Index-driven query optimization"
  },

  "critical_fixes_required": [
    "ELIMINATE Sequelize sync completely",
    "IMPLEMENT proper migration system",
    "CONFIGURE underscored mapping correctly",
    "CREATE production-safe database config",
    "VALIDATE all schema changes before execution"
  ],

  "plan": {
    "phase_1": "Database configuration hardening",
    "phase_2": "Migration system implementation",
    "phase_3": "Model definitions with proper mapping",
    "phase_4": "Testing and validation framework",
    "phase_5": "Production deployment procedures"
  },

  "requirements": {
    "zero_tolerance": [
      "NO Sequelize sync in any environment",
      "NO auto-generated constraints",
      "NO duplicate indexes",
      "NO schema changes without migrations"
    ],
    "must_implement": [
      "Controlled migration runner",
      "Pre-migration validation",
      "Rollback procedures",
      "Performance monitoring"
    ]
  },

  "inputs_outputs": {
    "inputs": {
      "corrupted_db": "Current Neon database with 524 constraints",
      "existing_models": "backend/src/models/*.ts",
      "config_files": "backend/src/config/database.ts"
    },
    "outputs": {
      "clean_database": "Fresh Neon database with optimal schema",
      "migration_system": "Robust migration framework",
      "production_config": "Zero-sync database configuration"
    }
  },

  "tasks": [
    {
      "task_id": "T1_database_analysis",
      "title": "Analyze Current Database State from Project Knowledge",
      "priority": "CRITICAL",
      "files_to_create": ["backend/src/scripts/analyze-db-state.ts"],
      "implementation_steps": [
        "READ tables.json, constraints.json, foreign_keys.json, enums.json, indexes.json from project knowledge",
        "ANALYZE duplicate constraints (524 total found)",
        "IDENTIFY problematic indexes (444 total found)",
        "GENERATE report of required fixes",
        "VALIDATE current Sequelize models against actual DB schema"
      ],
      "success_criteria": "Complete understanding of DB corruption scope"
    },
    {
      "task_id": "T2_database_config_hardening",
      "title": "Harden Database Configuration",
      "priority": "CRITICAL",
      "files_to_modify": [
        "backend/src/config/database.ts",
        "backend/.env.example"
      ],
      "implementation_steps": [
        "REMOVE all sync configurations",
        "ADD underscored: true for snake_case mapping",
        "CONFIGURE proper connection pooling",
        "SET environment-specific settings",
        "ADD connection validation"
      ],
      "success_criteria": "Zero Sequelize sync capability"
    },
    {
      "task_id": "T2_migration_system",
      "title": "Implement Production Migration System",
      "priority": "CRITICAL",
      "files_to_create": [
        "backend/src/migrations/",
        "backend/src/utils/migration-runner.ts",
        "backend/src/scripts/migrate.ts",
        "backend/src/scripts/rollback.ts"
      ],
      "implementation_steps": [
        "CREATE migration file structure",
        "IMPLEMENT migration runner with transactions",
        "ADD pre-migration validation hooks",
        "CREATE rollback mechanism",
        "ADD migration history tracking"
      ],
      "success_criteria": "Migrations run safely with rollback capability"
    },
    {
      "task_id": "T3_model_definitions",
      "title": "Rebuild All Model Definitions",
      "priority": "HIGH",
      "files_to_modify": [
        "backend/src/models/User.ts",
        "backend/src/models/Event.ts",
        "backend/src/models/Fight.ts",
        "backend/src/models/Bet.ts",
        "backend/src/models/Wallet.ts",
        "backend/src/models/Transaction.ts",
        "backend/src/models/Venue.ts",
        "backend/src/models/index.ts"
      ],
      "implementation_steps": [
        "CONFIGURE all models with underscored: true",
        "REMOVE any sync configurations",
        "ADD proper field mappings",
        "CONFIGURE relationships correctly",
        "ADD validation at model level"
      ],
      "success_criteria": "Models map correctly to snake_case DB"
    },
    {
      "task_id": "T4_initial_migration",
      "title": "Create Initial Database Migration",
      "priority": "HIGH",
      "files_to_create": ["backend/src/migrations/001_initial_schema.ts"],
      "implementation_steps": [
        "CREATE complete schema definition",
        "ADD all necessary indexes",
        "CONFIGURE proper constraints",
        "ADD enum definitions",
        "INCLUDE rollback procedures"
      ],
      "success_criteria": "Clean database creation from scratch"
    },
    {
      "task_id": "T6_environment_validation",
      "title": "Validate Environment Configuration",
      "priority": "HIGH",
      "files_to_modify": [
        "backend/src/config/database.ts",
        "backend/src/scripts/validate-env.ts"
      ],
      "implementation_steps": [
        "CREATE environment validation script",
        "VERIFY DATABASE_URL format and connectivity",
        "VALIDATE all required environment variables",
        "CHECK production vs development settings",
        "ENSURE no sync capabilities in any environment"
      ],
      "success_criteria": "All environments validated, no sync possible"
    },
    {
      "task_id": "T7_testing_framework",
      "title": "Implement Database Testing",
      "priority": "MEDIUM",
      "files_to_create": [
        "backend/tests/database/connection.test.ts",
        "backend/tests/database/migrations.test.ts",
        "backend/tests/database/models.test.ts",
        "backend/tests/database/performance.test.ts"
      ],
      "implementation_steps": [
        "CREATE database test containers",
        "TEST migration up/down cycles",
        "VALIDATE model-database mapping",
        "TEST performance with realistic data",
        "VERIFY query plans use indexes not seq scans"
      ],
      "success_criteria": "All database operations tested, performance validated"
    }
  ],

  "pre_implementation_validation": [
    "VERIFY Neon database is accessible",
    "CONFIRM backup procedures work",
    "TEST migration runner in isolation",
    "VALIDATE all model definitions",
    "CHECK environment variables"
  ],

  "required_tests": [
    {
      "test_name": "zero_sync_test",
      "description": "Verify Sequelize cannot auto-sync",
      "success_criteria": "Sequelize.sync() throws error or is disabled"
    },
    {
      "test_name": "migration_safety_test",
      "description": "Test migration with rollback",
      "success_criteria": "Migration applies and rolls back cleanly"
    },
    {
      "test_name": "nomenclature_mapping_test",
      "description": "Verify camelCase to snake_case mapping",
      "success_criteria": "TypeScript camelCase maps to DB snake_case"
    },
    {
      "test_name": "constraint_uniqueness_test",
      "description": "Ensure no duplicate constraints",
      "success_criteria": "Each logical constraint exists exactly once"
    },
    {
      "test_name": "query_performance_test",
      "description": "Validate optimized query performance",
      "success_criteria": "Critical queries use indexes, not seq scans"
    }
  ],

  "environment_configuration": {
    "development": {
      "SEQUELIZE_SYNC": "false",
      "MIGRATION_MODE": "auto",
      "LOG_LEVEL": "debug"
    },
    "staging": {
      "SEQUELIZE_SYNC": "false",
      "MIGRATION_MODE": "manual",
      "LOG_LEVEL": "info"
    },
    "production": {
      "SEQUELIZE_SYNC": "false",
      "MIGRATION_MODE": "manual",
      "LOG_LEVEL": "error"
    }
  },

  "critical_safety_measures": [
    "NEVER enable Sequelize sync in any environment",
    "ALWAYS run migrations in transactions",
    "ALWAYS test migrations on staging first",
    "ALWAYS have rollback procedure ready",
    "MONITOR database performance post-migration"
  ],

  "deployment_checklist": [
    "✅ Database config hardened (no sync)",
    "✅ Migration system implemented",
    "✅ All models configured correctly",
    "✅ Initial migration tested",
    "✅ Performance validated",
    "✅ Rollback procedures tested",
    "✅ Documentation updated"
  ],

  "success_metrics": [
    "Database constraints: <30 total",
    "Database indexes: <20 total",
    "Query performance: Index scans not seq scans",
    "Migration time: <30 seconds for schema",
    "Zero duplicate constraints/indexes"
  ],

  "disaster_recovery": {
    "backup_before": "Create full database backup before any changes",
    "rollback_procedure": "Automated rollback for failed migrations",
    "monitoring": "Real-time monitoring during deployment",
    "emergency_contacts": "Database team notification procedures"
  }
}
