{
  "project": "GalloBets Critical Bug Fixes V2 - Enhanced Detail",
  "version": "5.1.0",
  "date": "2025-08-23",
  "commit_reference": "Inicio arreglo entornos de roles multiples V5",

  "mcp_requirements": {
    "required": ["context7", "filesystem", "git", "database"],
    "context7": {
      "purpose": "Manage multiple file changes efficiently",
      "max_context": 8000
    }
  },

  "database_reference": {
    "location": "backend/database-analysis/",
    "critical_files": [
      "backend/database-analysis/CURRENT_TABLES.json",
      "backend/database-analysis/CURRENT_FOREIGN_KEYS.json",
      "backend/database-analysis/CURRENT_INDEXES.json",
      "backend/database-analysis/CURRENT_ENUMS.json",
      "backend/database-analysis/CURRENT_CONSTRAINTS.json",
      "backend/database-analysis/credenciales.json"
    ],
    "neon_migrations_required": true,
    "migration_file": "database_migration.sql"
  },

  "phase_0_pre_execution": {
    "priority": "CRITICAL - DO FIRST",
    "estimated_time": "10 minutes",
    "sql_to_execute_in_neon": [
      {
        "step": 1,
        "description": "Add missing columns to fix 500 errors",
        "sql": [
          "ALTER TABLE articles ADD COLUMN IF NOT EXISTS venue_id UUID REFERENCES venues(id);",
          "ALTER TABLE notifications ADD COLUMN IF NOT EXISTS status VARCHAR(10) DEFAULT 'unread';",
          "ALTER TYPE enum_users_role ADD VALUE IF NOT EXISTS 'gallera';"
        ]
      },
      {
        "step": 2,
        "description": "Fix transaction associations",
        "sql": "-- Verify users table has proper foreign key on transactions"
      }
    ],
    "validation": "Test connection: SELECT * FROM users LIMIT 1;"
  },

  "phase_1_backend_model_fixes": {
    "priority": "CRITICAL",
    "estimated_time": "20 minutes",
    "inputs": ["Database schema from backend/database-analysis/"],
    "outputs": ["Fixed Sequelize models matching DB"],

    "tasks": [
      {
        "id": "1.1",
        "file": "backend/src/models/Article.ts",
        "line_changes": {
          "add_after_line_30": "venueId: { type: DataTypes.UUID, allowNull: true }",
          "add_in_associations": "Article.belongsTo(models.Venue, { foreignKey: 'venueId', as: 'venue', required: false });"
        }
      },
      {
        "id": "1.2",
        "file": "backend/src/models/Notification.ts",
        "line_changes": {
          "add_after_userId": "status: { type: DataTypes.ENUM('unread', 'read'), defaultValue: 'unread', allowNull: false }"
        }
      },
      {
        "id": "1.3",
        "file": "backend/src/models/Transaction.ts",
        "verify_exists": "Transaction.belongsTo(models.User, { foreignKey: 'userId', as: 'user' });",
        "if_missing_add": "In associate method: Transaction.belongsTo(models.User, { foreignKey: 'userId', as: 'user' });"
      },
      {
        "id": "1.4",
        "file": "backend/src/models/User.ts",
        "verify_role_enum": "role: DataTypes.ENUM('admin', 'operator', 'venue', 'user', 'gallera')"
      }
    ]
  },

  "phase_2_api_endpoint_fixes": {
    "priority": "HIGH",
    "estimated_time": "25 minutes",
    "inputs": ["API requirements from errors"],
    "outputs": ["Complete API endpoints"],

    "tasks": [
      {
        "id": "2.1",
        "file": "backend/src/routes/wallet.ts",
        "add_endpoints": [
          {
            "path": "GET /revenue-by-source",
            "line_to_add_after": "// Add after other GET routes",
            "code": "router.get('/revenue-by-source', authenticate, authorize('admin'), asyncHandler(async (req, res) => {\n  const { period = 'month' } = req.query;\n  const data = await Transaction.findAll({\n    attributes: [\n      'type',\n      [sequelize.fn('SUM', sequelize.col('amount')), 'total']\n    ],\n    where: { /* period filter */ },\n    group: ['type']\n  });\n  res.json({ success: true, data });\n}));"
          },
          {
            "path": "GET /revenue-trends",
            "code": "Similar aggregation query for trends"
          }
        ]
      },
      {
        "id": "2.2",
        "file": "frontend/src/config/api.ts",
        "line_number": "approximately line 200",
        "add_in_walletAPI": {
          "after": "getBalance method",
          "code": "getUserWallet: (userId: string) => axios.get(`/api/wallet/user/${userId}`)"
        }
      },
      {
        "id": "2.3",
        "file": "frontend/src/config/api.ts",
        "line_number": "approximately line 150",
        "add_in_usersAPI": {
          "after": "getAll method",
          "code": "getOperators: () => axios.get('/api/users/operators/available')"
        }
      },
      {
        "id": "2.4",
        "file": "frontend/src/config/api.ts",
        "line_number": "end of file before export",
        "add_new_api": "export const systemAPI = {\n  getMetrics: () => axios.get('/api/system/metrics'),\n  getHealth: () => axios.get('/api/system/health'),\n  getLogs: () => axios.get('/api/system/logs')\n};"
      }
    ]
  },

  "phase_3_admin_fixes_detailed": {
    "priority": "HIGH",
    "estimated_time": "35 minutes",
    "inputs": ["Admin dashboard requirements"],
    "outputs": ["Fixed admin interface"],

    "tasks": [
      {
        "id": "3.1",
        "title": "Fix user status toggle",
        "file": "backend/src/routes/users.ts",
        "line_number": "find PUT /:id/status route",
        "change_from": "body('isActive').isBoolean()",
        "change_to": "body('status').isBoolean()",
        "also_update": "const { status } = req.body; // not isActive"
      },
      {
        "id": "3.2",
        "title": "Fix role filter",
        "file": "frontend/src/components/admin/UserManagementTable.tsx",
        "line_number": "find role filter select element (~line 100)",
        "add_option": "<option value=\"gallera\">Gallera</option>",
        "fix_filter_logic": "Change filter to check user.role === roleFilter directly"
      },
      {
        "id": "3.3",
        "title": "Create user page",
        "create_file": "frontend/src/pages/admin/CreateUser.tsx",
        "template": "import React, { useState } from 'react';\nimport { usersAPI } from '../../config/api';\n\nconst CreateUser = () => {\n  const [formData, setFormData] = useState({\n    username: '',\n    email: '',\n    password: '',\n    role: 'user',\n    profileInfo: {}\n  });\n\n  const roles = ['admin', 'operator', 'venue', 'user', 'gallera'];\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      await usersAPI.create(formData);\n      // redirect to users list\n    } catch (error) {\n      // handle error\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* Form fields */}\n    </form>\n  );\n};\n\nexport default CreateUser;"
      },
      {
        "id": "3.4",
        "file": "frontend/src/App.tsx",
        "add_route": {
          "line_after": "admin users route",
          "code": "<Route path=\"/admin/users/create\" element={<CreateUser />} />"
        }
      },
      {
        "id": "3.5",
        "file": "frontend/src/components/admin/AdminSidebar.tsx",
        "changes": [
          {
            "find": "Usuarios Regulares",
            "replace": "Usuarios"
          },
          {
            "remove_lines": "Lines containing 'Usuarios Venue' and 'Usuarios Operadores'"
          }
        ]
      },
      {
        "id": "3.6",
        "file": "frontend/src/pages/admin/Users.tsx",
        "add_to_modal": {
          "line_after": "user detail modal content",
          "features": [
            "Edit profile button with form",
            "Change password button with modal",
            "Save changes API call"
          ]
        }
      },
      {
        "id": "3.7",
        "file": "frontend/src/components/admin/ArticleEditor.tsx",
        "replace_content": "Full rich text editor implementation",
        "use_library": "react-quill",
        "install_first": "npm install react-quill"
      }
    ]
  },

  "phase_4_login_crash_fix": {
    "priority": "CRITICAL",
    "estimated_time": "15 minutes",
    "inputs": ["Login error scenarios"],
    "outputs": ["Crash-proof login"],

    "file": "frontend/src/pages/LoginPage.tsx",
    "changes": [
      {
        "line": "find handleSubmit function",
        "wrap_in_try_catch": true,
        "error_handling": {
          "401": "setError('Invalid username or password')",
          "404": "setError('User not found')",
          "500": "setError('Server error, please try again')",
          "network": "setError('Connection error')",
          "default": "setError('An error occurred')"
        }
      },
      {
        "add_state": "const [error, setError] = useState<string | null>(null);",
        "display_error": "{error && <div className=\"text-red-500 text-sm mt-2\">{error}</div>}",
        "clear_on_type": "onChange={() => setError(null)}"
      }
    ]
  },

  "phase_5_visual_fixes": {
    "priority": "MEDIUM",
    "estimated_time": "10 minutes",

    "tasks": [
      {
        "id": "5.1",
        "global_find_replace": {
          "find_regex": "text-gray-[34]00",
          "replace": "text-gray-500",
          "files": "frontend/src/**/*.tsx"
        }
      },
      {
        "id": "5.2",
        "file": "frontend/src/components/admin/ArticleModal.tsx",
        "fix_backdrop": "Change z-40 to z-50 for backdrop, z-50 to z-[60] for modal"
      },
      {
        "id": "5.3",
        "copy_file": {
          "from": "frontend/src/pages/user/Galleras.tsx",
          "to": "frontend/src/pages/user/Venues.tsx",
          "modify": "Change 'galleras' references to 'venues'"
        }
      }
    ]
  },

  "phase_6_ads_system": {
    "priority": "LOW",
    "estimated_time": "20 minutes",

    "investigation": {
      "check": "backend/src/models/Ad.ts exists?",
      "if_exists": {
        "create": "frontend/src/pages/admin/AdsManagement.tsx",
        "features": ["CRUD operations", "Position management", "Active toggle"]
      },
      "if_not_exists": {
        "remove": ["frontend/src/components/ads/*", "Any AdSpace imports"]
      }
    }
  },

  "phase_7_testing_validation": {
    "priority": "CRITICAL",
    "estimated_time": "20 minutes",

    "test_credentials": {
      "admin": "admin@sportsbets.com / Test123456",
      "user": "testuser1@sportsbets.com / Test123456",
      "venue": "venueowner1@sportsbets.com / Test123456",
      "gallera": "gallera1@sportsbets.com / Test123456"
    },

    "checklist": [
      "✓ Login with wrong credentials - no crash",
      "✓ Admin dashboard loads without errors",
      "✓ User list shows all 5 role types",
      "✓ Can toggle user status",
      "✓ Can change user roles including 'gallera'",
      "✓ Can create new user with role selection",
      "✓ Articles load without venue_id error",
      "✓ Notifications show with status",
      "✓ Finance section shows revenue data",
      "✓ User dashboard loads",
      "✓ Text is readable (gray-500)"
    ]
  },

  "execution_instructions": {
    "step_by_step": [
      "1. FIRST: Run SQL migrations in Neon Tech (Phase 0)",
      "2. Create branch: git checkout -b fix/critical-bugs-v2",
      "3. Execute phases in order (0-7)",
      "4. Test after each phase",
      "5. Commit after each successful phase"
    ],

    "file_locations": {
      "backend_models": "backend/src/models/",
      "backend_routes": "backend/src/routes/",
      "frontend_config": "frontend/src/config/",
      "frontend_pages": "frontend/src/pages/",
      "frontend_components": "frontend/src/components/",
      "database_reference": "backend/database-analysis/"
    },

    "common_imports": {
      "react": "import React, { useState, useEffect } from 'react';",
      "api": "import { usersAPI, walletAPI } from '../../config/api';",
      "router": "import { useNavigate } from 'react-router-dom';",
      "icons": "import { User, Shield, Building2, FileText } from 'lucide-react';"
    }
  },

  "context_for_claude_code": {
    "project_structure": {
      "frontend": "React + TypeScript + Vite",
      "backend": "Node.js + Express + Sequelize + PostgreSQL",
      "database": "PostgreSQL on Neon.tech",
      "auth": "JWT with refresh tokens"
    },

    "role_matrix": {
      "admin": "Full system control, user management, financial control",
      "operator": "Event management, streaming control, fight results",
      "venue": "Venue profile management, event requests, statistics",
      "user": "Betting, wallet, subscriptions, viewing",
      "gallera": "Same as user PLUS article/content creation"
    },

    "critical_patterns": {
      "api_calls": "Always use try-catch with specific error handling",
      "sequelize": "Use transactions for financial operations",
      "auth": "Check role with authorize() middleware",
      "ui": "Use Tailwind classes, avoid inline styles"
    },

    "do_not_assume": [
      "Database columns exist - check backend/database-analysis/",
      "API methods exist - verify in config/api.ts",
      "Routes exist - check App.tsx",
      "Components exist - verify imports"
    ]
  }
}
