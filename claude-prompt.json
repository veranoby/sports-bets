{
  "task": "Fix All Role Environment Issues and UX Problems",
  "description": "Resolve OperatorDashboard hoisting error, subscription display inconsistencies, remove unnecessary banners, fix empty states, and ensure proper registration flow.",

  "context": {
    "critical_error": "OperatorDashboard: 'Cannot access handleFightUpdated before initialization' at Dashboard.tsx:24",
    "ux_issues": "User shows premium in header but isn't, unnecessary banner, missing empty state messages",
    "registration_check": "Verify user self-registration works properly",
    "subscription_check": "Verify premium upgrade flow works correctly"
  },

  "required_files_analysis": {
    "operator_dashboard": "frontend/src/pages/operator/Dashboard.tsx - hoisting error line 24",
    "user_dashboard": "frontend/src/pages/user/Dashboard.tsx - banner removal needed",
    "subscription_system": "frontend/src/components/streaming/SubscriptionGuard.tsx",
    "auth_system": "backend/src/routes/auth.ts - registration endpoint"
  },

  "tasks": [
    {
      "task_id": "T1_fix_operator_dashboard",
      "title": "Fix OperatorDashboard Hoisting Error",
      "priority": "CRITICAL",
      "files_to_modify": ["frontend/src/pages/operator/Dashboard.tsx"],
      "exact_fix": {
        "problem": "handleFightUpdated used before declaration at line 24",
        "solution": "Move all useCallback declarations before useWebSocket hook",
        "specific_changes": [
          {
            "location": "Before useWebSocket call",
            "change": "Move all handlers (handleFightUpdated, handleBettingOpened, handleBettingClosed) before useWebSocket",
            "code_structure": "const handleFightUpdated = useCallback(...); const handleBettingOpened = useCallback(...); const handleBettingClosed = useCallback(...); const { isConnected } = useWebSocket(ROOM_ID, { fight_updated: handleFightUpdated, ...});"
          }
        ]
      },
      "validation": "OperatorDashboard loads without React errors"
    },
    {
      "task_id": "T2_verify_registration",
      "title": "Verify and Fix User Registration",
      "priority": "HIGH",
      "files_to_check": [
        "backend/src/routes/auth.ts",
        "frontend/src/pages/LoginPage.tsx"
      ],
      "validation_steps": [
        "Check POST /api/auth/register endpoint exists and works",
        "Verify frontend registration form exists and submits correctly",
        "Test complete registration flow: form → backend → auto-login",
        "Ensure new users get wallet created automatically",
        "Test validation errors display properly"
      ],
      "success_criteria": "New users can register, get wallet, and login automatically"
    },
    {
      "task_id": "T3_fix_subscription_display",
      "title": "Fix Subscription Status Display Inconsistencies",
      "priority": "HIGH",
      "files_to_modify": [
        "frontend/src/components/layouts/UserLayout.tsx",
        "frontend/src/components/streaming/SubscriptionGuard.tsx",
        "frontend/src/hooks/useSubscription.tsx"
      ],
      "exact_changes": [
        {
          "file": "UserLayout.tsx",
          "location": "Header premium indicator",
          "fix": "Use actual subscription status from useSubscription hook, not hardcoded",
          "code": "const { subscription, hasAccess } = useSubscription(); // Show premium badge only if hasAccess === true"
        },
        {
          "file": "SubscriptionGuard.tsx",
          "location": "Premium status check",
          "fix": "Ensure hasAccess() function correctly checks subscription.status === 'active' AND expiresAt > now",
          "code": "const hasAccess = subscription?.status === 'active' && new Date(subscription.expiresAt) > new Date()"
        }
      ],
      "success_criteria": "Users show premium status only when actually subscribed and active"
    },
    {
      "task_id": "T4_remove_banner_use_news",
      "title": "Remove User Banner, Use News System",
      "priority": "MEDIUM",
      "files_to_modify": ["frontend/src/pages/user/Dashboard.tsx"],
      "exact_changes": [
        {
          "location": "Banner component in Dashboard",
          "change": "Remove hardcoded banner/advertisement section",
          "replacement": "Fetch news/articles marked as 'featured' or 'advertisement' from backend",
          "api_integration": "Use articlesAPI.getFeatured() to get promotional content from admin-created news"
        }
      ],
      "success_criteria": "No hardcoded banners, promotional content comes from news system"
    },
    {
      "task_id": "T5_fix_empty_states",
      "title": "Fix Empty State Messages Across All Roles",
      "priority": "HIGH",
      "files_to_modify": [
        "frontend/src/pages/user/Dashboard.tsx",
        "frontend/src/pages/admin/Events.tsx",
        "frontend/src/pages/operator/Dashboard.tsx",
        "frontend/src/pages/venue/Dashboard.tsx"
      ],
      "empty_state_patterns": [
        {
          "condition": "No events available",
          "message": "No hay eventos disponibles en este momento",
          "action": "Vuelve más tarde o explora otros contenidos"
        },
        {
          "condition": "No fights in event",
          "message": "Este evento aún no tiene peleas programadas",
          "action": "Las peleas se anunciarán pronto"
        },
        {
          "condition": "No bets placed",
          "message": "No tienes apuestas activas",
          "action": "Explora eventos en vivo para apostar"
        },
        {
          "condition": "Database connection error",
          "message": "Error al cargar información",
          "action": "Intenta refrescar la página"
        }
      ],
      "implementation": "Replace loading states and error states with proper EmptyState component",
      "success_criteria": "No blank pages or error messages, always show helpful empty states"
    },
    {
      "task_id": "T6_verify_premium_upgrade",
      "title": "Verify and Fix Premium Upgrade Flow",
      "priority": "HIGH",
      "files_to_check": [
        "backend/src/routes/subscriptions.ts",
        "frontend/src/components/streaming/SubscriptionModal.tsx",
        "backend/src/services/paymentService.ts"
      ],
      "validation_steps": [
        "Test subscription plans endpoint: GET /api/subscriptions/plans",
        "Test subscription creation: POST /api/subscriptions",
        "Test payment flow integration (mock payment if needed)",
        "Test subscription status check: POST /api/subscriptions/check-access",
        "Verify subscription expiration handling"
      ],
      "success_criteria": "Users can successfully upgrade to premium and access premium features"
    },
    {
      "task_id": "T7_comprehensive_role_audit",
      "title": "Comprehensive Role Dashboard Audit",
      "priority": "HIGH",
      "files_to_audit": [
        "frontend/src/pages/admin/AdminDashboard.tsx",
        "frontend/src/pages/operator/Dashboard.tsx",
        "frontend/src/pages/venue/Dashboard.tsx",
        "frontend/src/pages/user/Dashboard.tsx"
      ],
      "audit_checklist": [
        "All components load without React errors",
        "API calls have proper error handling",
        "Empty states show helpful messages",
        "Loading states work correctly",
        "Role-specific features are accessible",
        "Navigation works properly",
        "WebSocket connections (if any) work",
        "Data displays correctly when available"
      ],
      "fixes_required": [
        "Add try-catch blocks around all API calls",
        "Replace raw error messages with user-friendly ones",
        "Add LoadingSpinner components for async operations",
        "Ensure all buttons/links work properly"
      ],
      "success_criteria": "All role dashboards work perfectly without errors"
    },
    {
      "task_id": "T8_create_debug_tools",
      "title": "Create Debug Tools for Role Testing",
      "priority": "MEDIUM",
      "files_to_create": [
        "frontend/src/utils/roleDebugger.ts",
        "backend/src/scripts/create-test-data.ts"
      ],
      "debug_tools": [
        {
          "file": "roleDebugger.ts",
          "purpose": "Log user role, permissions, and available features",
          "usage": "Import in each dashboard to debug role issues"
        },
        {
          "file": "create-test-data.ts",
          "purpose": "Generate test data (events, fights, bets) for each role",
          "usage": "npm run create-test-data to populate database"
        }
      ],
      "success_criteria": "Easy debugging and testing of all role environments"
    }
  ],

  "validation_commands": [
    "npm run type-check # Verify no TypeScript errors",
    "npm run build # Verify build succeeds",
    "curl -X POST http://localhost:3001/api/auth/register -H 'Content-Type: application/json' -d '{\"username\":\"newuser\",\"email\":\"new@test.com\",\"password\":\"Test123456\"}'",
    "curl -X GET http://localhost:3001/api/subscriptions/plans",
    "Test each role login and dashboard functionality manually"
  ],

  "environment_specific_fixes": {
    "admin_role": [
      "Verify user management works",
      "Test event creation/editing",
      "Check admin statistics display"
    ],
    "operator_role": [
      "Fix handleFightUpdated error",
      "Test fight management",
      "Verify streaming controls work"
    ],
    "venue_role": [
      "Test venue event creation",
      "Verify venue statistics",
      "Check venue settings"
    ],
    "user_role": [
      "Remove banner, use news",
      "Fix premium display",
      "Test betting interface"
    ]
  },

  "success_criteria": {
    "no_errors": "All role dashboards load without React/JavaScript errors",
    "proper_ux": "Users see helpful messages instead of blank pages or raw errors",
    "consistent_subscription": "Premium status shows correctly across all components",
    "working_registration": "New users can register and use the platform immediately",
    "working_upgrade": "Users can upgrade to premium successfully"
  },

  "rollback_plan": {
    "if_operator_breaks": "Revert Dashboard.tsx to previous working version",
    "if_subscription_breaks": "Revert SubscriptionGuard changes",
    "if_registration_breaks": "Check auth route and frontend form"
  }
}
