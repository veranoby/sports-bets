{
  "task": "Fix Critical Login Authentication and Frontend Error Handling",
  "description": "Resolve 401 errors, blank page crashes, and implement proper error messaging for failed authentication attempts.",

  "context": {
    "root_cause": "Multiple issues: backend 401 errors + frontend error handling failure causing blank pages",
    "specific_hash": "$2b$12$LQv3c1yqBwPFcT7qTm.DfOuLgNzUqwckQRONJQEOj.xQtF5wq5OsK",
    "test_credentials": "admin_test/Test123456 from backend/database-analysis/credenciales.json",
    "backend_logs": "Consistent 401 Invalid credentials errors",
    "frontend_issue": "Blank page instead of error message"
  },

  "required_files_structure": {
    "read_from": [
      "backend/database-analysis/credenciales.json",
      "backend/database-analysis/CURRENT_TABLES.json"
    ],
    "modify": [
      "backend/src/models/User.ts",
      "backend/src/routes/auth.ts",
      "frontend/src/pages/Login.tsx",
      "frontend/src/config/api.ts",
      "frontend/vite.config.ts"
    ],
    "create": [
      "backend/src/scripts/fix-test-users.ts",
      "backend/src/scripts/debug-auth.ts"
    ]
  },

  "tasks": [
    {
      "task_id": "T1_debug_auth_flow",
      "title": "Create Authentication Debug Script",
      "files_to_create": ["backend/src/scripts/debug-auth.ts"],
      "exact_implementation": {
        "file": "backend/src/scripts/debug-auth.ts",
        "content_requirements": [
          "Import User model and bcrypt",
          "Query SELECT * FROM users WHERE username='admin_test'",
          "Test bcrypt.compare('Test123456', hash) with actual DB hash",
          "Log exact SQL queries being executed",
          "Test User.findOne with both email and username queries",
          "Export results showing exactly where auth fails"
        ],
        "success_criteria": "Identifies exact failure point in auth chain"
      }
    },
    {
      "task_id": "T2_fix_user_model",
      "title": "Fix User Model Password Validation",
      "files_to_modify": ["backend/src/models/User.ts"],
      "exact_changes": [
        {
          "location": "comparePassword method",
          "change": "Add debug logging before and after bcrypt.compare",
          "specific_code": "console.log('Comparing password:', password, 'with hash:', this.passwordHash); const result = await bcrypt.compare(password, this.passwordHash); console.log('Comparison result:', result); return result;"
        },
        {
          "location": "User.init() define section",
          "change": "Ensure passwordHash field maps correctly to password_hash",
          "specific_code": "passwordHash: { type: DataTypes.STRING(255), allowNull: false, field: 'password_hash' }"
        }
      ],
      "success_criteria": "comparePassword method works with existing DB hash"
    },
    {
      "task_id": "T3_fix_auth_route",
      "title": "Fix Auth Route Query Logic",
      "files_to_modify": ["backend/src/routes/auth.ts"],
      "exact_changes": [
        {
          "location": "/login route - user query",
          "change": "Add extensive logging around user query",
          "specific_code": "console.log('Login attempt for:', login); const user = await User.findOne({ where: { [Op.or]: [{ email: login }, { username: login }] } }); console.log('User found:', user ? 'YES' : 'NO', user?.toJSON());"
        },
        {
          "location": "/login route - password check",
          "change": "Add logging around password validation",
          "specific_code": "console.log('Checking password...'); const isPasswordValid = await user.comparePassword(password); console.log('Password valid:', isPasswordValid);"
        }
      ],
      "success_criteria": "Auth route logs show exact failure point"
    },
    {
      "task_id": "T4_fix_frontend_error_handling",
      "title": "Fix Frontend Login Error Handling",
      "files_to_modify": ["frontend/src/pages/Login.tsx"],
      "exact_changes": [
        {
          "location": "handleSubmit function",
          "change": "Add proper error handling for 401 responses",
          "specific_code": "try { const response = await authAPI.login({ login: email, password }); // success handling } catch (error) { console.error('Login error:', error); setError(error.message || 'Invalid credentials'); setLoading(false); }"
        },
        {
          "location": "useState declarations",
          "change": "Add error state if missing",
          "specific_code": "const [error, setError] = useState<string>('');"
        },
        {
          "location": "JSX render",
          "change": "Display error message prominently",
          "specific_code": "{error && <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">{error}</div>}"
        }
      ],
      "success_criteria": "Login shows error message instead of blank page"
    },
    {
      "task_id": "T5_fix_api_config",
      "title": "Fix API Configuration and Ports",
      "files_to_modify": [
        "frontend/src/config/api.ts",
        "frontend/vite.config.ts"
      ],
      "exact_changes": [
        {
          "file": "frontend/src/config/api.ts",
          "location": "API_BASE_URL definition",
          "change": "Ensure correct port 3001",
          "specific_code": "export const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001/api';"
        },
        {
          "file": "frontend/vite.config.ts",
          "location": "server config",
          "change": "Set frontend port to 5173",
          "specific_code": "server: { port: 5173, open: true }"
        }
      ],
      "success_criteria": "Frontend runs on 5173, API calls go to 3001"
    },
    {
      "task_id": "T6_regenerate_test_users",
      "title": "Create Script to Fix Test User Passwords",
      "files_to_create": ["backend/src/scripts/fix-test-users.ts"],
      "exact_implementation": {
        "purpose": "Regenerate test users with properly hashed passwords",
        "specific_code_blocks": [
          "Import User, bcrypt from correct paths",
          "Hash 'Test123456' using User.hashPassword method",
          "UPDATE users SET password_hash = $hashedPassword WHERE username IN ('admin_test', 'operator_test', 'venue_test', 'gallera_test', 'user_test')",
          "Verify each user can authenticate with bcrypt.compare",
          "Log results for each user role"
        ],
        "execution_command": "npm run fix-users"
      },
      "success_criteria": "All test users have working password hashes"
    }
  ],

  "validation_tests": [
    {
      "test": "curl -X POST http://localhost:3001/api/auth/login -H 'Content-Type: application/json' -d '{\"login\":\"admin_test\",\"password\":\"Test123456\"}'",
      "expected": "200 response with JWT token"
    },
    {
      "test": "Frontend login form with admin_test/Test123456",
      "expected": "Successful login or clear error message (no blank page)"
    },
    {
      "test": "Frontend login form with wrong password",
      "expected": "Error message displayed, page remains functional"
    }
  ],

  "package_json_scripts": {
    "add_to_backend": {
      "debug-auth": "ts-node src/scripts/debug-auth.ts",
      "fix-users": "ts-node src/scripts/fix-test-users.ts"
    }
  },

  "environment_requirements": {
    "backend_env_vars": ["DATABASE_URL", "JWT_SECRET", "BCRYPT_ROUNDS=12"],
    "ports": { "frontend": 5173, "backend": 3001 }
  },

  "step_by_step_execution": [
    "1. Create debug-auth.ts and run to identify exact auth failure",
    "2. Modify User.ts with debug logging in comparePassword",
    "3. Modify auth.ts with comprehensive request logging",
    "4. Test backend auth with curl commands",
    "5. Fix frontend Login.tsx error handling",
    "6. Fix API config and ports",
    "7. Create and run fix-test-users.ts if needed",
    "8. Test complete login flow frontend to backend"
  ],

  "success_criteria": {
    "backend": "Returns 200 with JWT for correct credentials, 401 with clear error for wrong ones",
    "frontend": "Shows success page for correct login, error message for failures",
    "no_blank_pages": "Frontend never crashes to blank page on any auth error"
  }
}
