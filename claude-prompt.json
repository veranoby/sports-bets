{
  "project": "GalloBets Fix V10 - Gemini CLI Optimized",
  "version": "10.0.0",
  "date": "2025-08-25",
  "tool": "Gemini CLI",
  "os": "Windows PowerShell",
  
  "context": {
    "database": {
      "provider": "Neon Tech PostgreSQL",
      "schema_location": "backend/database-analysis/CURRENT_TABLES.json",
      "naming": "snake_case (user_id, venue_id, is_read)",
      "critical_tables": {
        "articles": "has venue_id (uuid)",
        "notifications": "has BOTH is_read (boolean) AND status (varchar)",
        "venues": "physical locations for cockfights",
        "galleras": "NOT a table - just users with role='gallera' who write articles"
      }
    },
    "backend": {
      "framework": "Express + Sequelize",
      "models_location": "backend/src/models/",
      "routes_location": "backend/src/routes/",
      "issue": "Models use camelCase but DB uses snake_case"
    },
    "frontend": {
      "framework": "React + TypeScript + Vite",
      "api_config": "frontend/src/config/api.ts",
      "pages": "frontend/src/pages/"
    }
  },

  "requirements": {
    "purpose": "Fix model-DB mapping discrepancies and conceptual confusion",
    "success_criteria": [
      "Articles load without venue_id errors",
      "Notifications work with is_read field",
      "Venues and Galleras are properly separated",
      "Subscriptions page loads without crash",
      "All API validations pass"
    ]
  },

  "phase_1_model_synchronization": {
    "milestone": "Ensure all models map correctly to DB",
    "estimated_time": "15 minutes",
    
    "task_1_1": {
      "file": "backend/src/models/Article.ts",
      "line": 92,
      "action": "Add underscored configuration",
      "current_code": "{\n    sequelize,\n    modelName: \"Article\",\n    tableName: \"articles\",\n    timestamps: true,\n    createdAt: \"created_at\",\n    updatedAt: \"updated_at\",\n  }",
      "replace_with": "{\n    sequelize,\n    modelName: \"Article\",\n    tableName: \"articles\",\n    timestamps: true,\n    underscored: true,\n    createdAt: \"created_at\",\n    updatedAt: \"updated_at\",\n  }",
      "test": "const article = await Article.findOne(); console.log(article.venue_id); // Should work"
    },

    "task_1_2": {
      "file": "backend/src/models/Subscription.ts",
      "line": 85,
      "action": "Add underscored: true",
      "add_to_init": "underscored: true,",
      "test": "const sub = await Subscription.findOne(); console.log(sub.user_id); // Should map"
    }
  },

  "phase_2_api_validations": {
    "milestone": "Fix API parameter validations",
    "estimated_time": "10 minutes",
    
    "task_2_1": {
      "file": "backend/src/routes/articles.ts",
      "find": "router.get('/',",
      "check_validations": [
        "query('page').optional().isInt()",
        "query('limit').optional().isInt()",
        "query('status').optional().isIn(['draft','published','archived'])",
        "query('venueId').optional().isUUID()",
        "query('search').optional().isString()"
      ],
      "fix_if_missing": "Add proper express-validator checks"
    },

    "task_2_2": {
      "file": "backend/src/routes/subscriptions.ts",
      "find": "router.get('/plans',",
      "ensure_returns": "res.json({ success: true, data: Array.isArray(plans) ? plans : [plans] })",
      "explanation": "Frontend expects array, not object"
    }
  },

  "phase_3_venues_galleras_separation": {
    "milestone": "Separate Venues (locations) from Galleras (breeders)",
    "estimated_time": "25 minutes",
    
    "conceptual_clarification": {
      "venues": "Physical cockfighting arenas/locations",
      "galleras": "Breeding institutions - NOT venues but organizations",
      "database_reality": "Galleras are NOT a separate table, just articles by users with role='gallera'"
    },

    "task_3_1": {
      "create_file": "frontend/src/pages/user/Galleras.tsx",
      "purpose": "Show breeding institutions (articles from gallera users)",
      "template": "import React from 'react';\nimport { articlesAPI } from '../../config/api';\n\nconst GallerasPage = () => {\n  // Fetch articles where author.role = 'gallera'\n  // Display as institution profiles\n  return (\n    <div>\n      <h1>Instituciones Criadoras</h1>\n      {/* List gallera articles as institution profiles */}\n    </div>\n  );\n};\n\nexport default GallerasPage;",
      "api_call": "articlesAPI.getAll({ authorRole: 'gallera' })"
    },

    "task_3_2": {
      "file": "frontend/src/components/user/Navigation.tsx",
      "find": "items array",
      "ensure_has": [
        "{ path: '/venues', label: 'Venues', icon: Building2 }",
        "{ path: '/galleras', label: 'Criadores', icon: Shield }"
      ]
    },

    "task_3_3": {
      "file": "frontend/src/App.tsx",
      "add_routes": [
        "<Route path=\"/galleras\" element={<GallerasPage />} />",
        "<Route path=\"/venues\" element={<VenuesPage />} />"
      ]
    }
  },

  "phase_4_subscriptions_fix": {
    "milestone": "Fix subscriptions page crash",
    "estimated_time": "10 minutes",
    
    "task_4_1": {
      "file": "frontend/src/pages/user/Subscriptions.tsx",
      "line": "approximately 194",
      "find": "plans.map",
      "replace_with": "Array.isArray(plans) ? plans.map : [plans].map",
      "or_better": "const plansArray = Array.isArray(plans) ? plans : plans?.data || [];\nplansArray.map(...)"
    }
  },

  "phase_5_testing": {
    "milestone": "Validate all fixes",
    "estimated_time": "10 minutes",
    
    "backend_tests": [
      {
        "test_name": "Articles with venue_id",
        "command": "curl http://localhost:3001/api/articles?status=published",
        "expected": "200 OK with articles data"
      },
      {
        "test_name": "Notifications with is_read",
        "command": "curl http://localhost:3001/api/notifications",
        "expected": "Notifications with isRead field"
      }
    ],
    
    "frontend_tests": [
      {
        "test_name": "News page loads",
        "navigate_to": "/news",
        "expected": "No 500 errors in console"
      },
      {
        "test_name": "Subscriptions page",
        "navigate_to": "/subscriptions",
        "expected": "No 'plans.map is not a function' error"
      },
      {
        "test_name": "Venues vs Galleras",
        "check": "Two separate navigation items",
        "venues_shows": "Physical locations",
        "galleras_shows": "Breeding institutions"
      }
    ]
  },

  "conventions": {
    "backend": {
      "models": "Use underscored: true for ALL models",
      "field_mapping": "Use field: 'snake_case_name' for explicit mapping",
      "associations": "Define in models/index.ts, not in individual models"
    },
    "frontend": {
      "api_responses": "Always check Array.isArray() before .map()",
      "error_handling": "Wrap all API calls in try-catch",
      "navigation": "Use react-router-dom for routing"
    }
  },

  "inputs_outputs": {
    "inputs": [
      "Database schema in snake_case from backend/database-analysis/",
      "User actions in frontend triggering API calls",
      "Role-based permissions (admin, user, venue, gallera)"
    ],
    "outputs": [
      "Properly mapped Sequelize models",
      "Valid API responses without 500 errors",
      "Separated Venues and Galleras sections",
      "Working subscriptions page"
    ]
  },

  "restrictions": {
    "do_not": [
      "Change database column names",
      "Use raw SQL queries",
      "Modify authentication logic",
      "Remove existing functionality"
    ],
    "must": [
      "Preserve all existing features",
      "Maintain backwards compatibility",
      "Follow TypeScript types",
      "Handle null/undefined values"
    ]
  },

  "execution_order": [
    "Phase 1: Fix model mappings (CRITICAL)",
    "Phase 2: Fix API validations",
    "Phase 3: Separate Venues/Galleras",
    "Phase 4: Fix subscriptions",
    "Phase 5: Test everything"
  ],

  "rollback_plan": {
    "if_errors": "git stash or git checkout -- .",
    "backup": "Create backup branch: git checkout -b backup-v9"
  }
}