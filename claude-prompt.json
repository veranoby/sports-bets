{
  "metadata": {
    "purpose": "Phase 2B: Fix Critical Blockers + Complete SSE Architecture",
    "updated": "2025-09-06",
    "project_status": "Phase 2B: Critical Fixes + Streaming Tests Ready", 
    "critical_focus": "Fix sse.ts blocker, complete SSE infrastructure, streaming tests",
    "database_source_of_truth": "/home/veranoby/sports-bets/backend/database-analysis/*.json",
    "lessons_learned": "File-level specificity required, no generic assumptions"
  },
  
  "implementation_context": {
    "current_status": "Streaming 85% complete, SSE endpoints missing causing server startup failure",
    "blocker_identified": "backend/src/routes/sse.ts imported but does not exist",
    "architecture_confirmed": "SSE for admin/streaming, WebSocket ONLY for PAGO/DOY betting",
    "testing_ready": "Manual del operador created, streaming infrastructure ready for tests",
    "immediate_priorities": [
      "Fix sse.ts blocker (server won't start)",
      "Complete SSE architecture for admin",
      "Test streaming workflow end-to-end",
      "Verify WebSocket isolation to betting only"
    ]
  },

  "critical_blockers_p0": {
    "sse_missing_file": {
      "duration": "30 minutes",
      "business_critical": "Server startup failure",
      
      "exact_file_to_create": "backend/src/routes/sse.ts",
      "import_location": "backend/src/index.ts line 15",
      "current_error": "ENOENT: no such file or directory, open '/backend/src/routes/sse.ts'",
      
      "required_content": {
        "admin_sse_endpoints": [
          "GET /api/sse/admin/system-status - SystemMonitoring component",
          "GET /api/sse/admin/events/:eventId - Event updates for admin",
          "GET /api/sse/admin/notifications - Admin notifications"
        ],
        "streaming_sse_endpoints": [
          "GET /api/sse/events/:eventId/stream - Stream status updates",
          "GET /api/sse/fights/:fightId/bets - Betting updates via SSE"
        ]
      },

    "priority_3_betting_windows_system": {
      "duration": "8-12 hours",
      "business_critical": "Core betting functionality missing - operator workflow blocked",
      
      "fight_status_transitions": {
        "required_flow": "upcoming → betting → live → completed",
        "operator_controls": [
          "\"Open Betting\" button (upcoming → betting)",
          "\"Close Betting\" button (betting → live)",
          "\"End Fight\" button (live → completed)"
        ],
        "database_updates": "fights table status enum transitions",
        "sse_notifications": "Broadcast status changes to all users"
      },

      "backend_endpoints_required": {
        "POST /api/fights/:fightId/open-betting": {
          "purpose": "Operator opens betting window for fight",
          "validation": "fight.status === 'upcoming', operator has permission",
          "action": "UPDATE fights SET status='betting' WHERE id=:fightId"
        },
        "POST /api/fights/:fightId/close-betting": {
          "purpose": "Operator closes betting, starts fight",
          "validation": "fight.status === 'betting'",
          "action": "UPDATE fights SET status='live' WHERE id=:fightId"
        },
        "POST /api/fights/:fightId/complete": {
          "purpose": "Operator ends fight, registers result",
          "validation": "fight.status === 'live'",
          "action": "UPDATE fights SET status='completed', result=:result WHERE id=:fightId"
        }
      },

      "frontend_components_required": {
        "operator/FightControl.tsx": {
          "purpose": "Operator controls for fight status transitions",
          "buttons": ["Open Betting", "Close Betting", "End Fight"],
          "location": "frontend/src/components/operator/FightControl.tsx"
        }
      }
    },

    "priority_4_rtmp_server_alternatives": {
      "duration": "1-2 hours",
      "business_critical": "RTMP server needed for streaming tests (no Docker available)",
      
      "rtmp_alternatives": {
        "node_media_server": {
          "install": "npm install node-media-server",
          "setup": "Create simple rtmp-server.js file",
          "start": "node rtmp-server.js"
        },
        "cloud_testing": {
          "youtube_live": "rtmp://a.rtmp.youtube.com/live2/",
          "temporary_solution": "Use existing platforms for initial tests"
        },
        "environment_variables": {
          "RTMP_SERVER_URL": "rtmp://localhost:1935/live OR cloud URL",
          "RTMP_HEALTH_CHECK_URL": "http://localhost:8000 OR skip for cloud"
        }
      },
      
      "create_rtmp_server_file": {
        "file": "rtmp-server.js in project root",
        "purpose": "Simple Node.js RTMP server without Docker",
        "port": "1935 for RTMP, 8000 for HTTP"
      }
    },
      
      "implementation_pattern": {
        "headers": "text/event-stream, no-cache, keep-alive",
        "connection_management": "Track connections, cleanup on close",
        "data_format": "JSON.stringify(data) with proper SSE format"
      }
    }
  },

  "file_level_specifications": {
    "priority_1_sse_infrastructure_completion": {
      "duration": "4-6 hours",
      "business_critical": "Admin interface real-time updates broken",
      
      "create_new_files": {
        "backend/src/routes/sse.ts": {
          "purpose": "SSE endpoints for admin and streaming updates",
          "exact_implementation": "EventSource-based service with connection registry",
          "required_endpoints": [
            "GET /api/sse/admin/system-status",
            "GET /api/sse/admin/events/:eventId",
            "GET /api/sse/admin/notifications",
            "GET /api/sse/events/:eventId/stream",
            "GET /api/sse/fights/:fightId/bets"
          ],
          "response_format": "text/event-stream with proper headers"
        },
        "backend/src/services/sseService.ts": {
          "purpose": "Central SSE connection management",
          "exact_implementation": "Connection registry with broadcast capabilities",
          "methods": ["addConnection", "removeConnection", "broadcastToAdmin", "broadcastToEvent"]
        },
        "frontend/src/hooks/useSSE.ts": {
          "purpose": "React hook for SSE connections with auto-reconnection",
          "exact_functionality": "useSSE(endpoint, options) returns {data, connected, error}",
          "features": ["Auto-reconnect", "Error handling", "Cleanup on unmount"]
        }
      },

      "modify_existing_files": {
        "frontend/src/components/admin/SystemMonitoring.tsx": {
          "current_issue": "useSSE hook called but backend endpoint missing",
          "exact_line": "Around line 45: useSSE('/api/sse/admin/system-status')",
          "dependency": "Requires backend/src/routes/sse.ts completion",
          "expected_behavior": "Real-time system status updates every 5 seconds"
        },
        "backend/src/index.ts": {
          "current_working": "sse routes imported correctly on line 15",
          "no_changes_needed": "Import statement correct, just need file to exist"
        }
      }
    },

    "priority_2_websocket_isolation": {
      "duration": "2-3 hours",
      "business_critical": "Clarify WebSocket usage to betting only",
      
      "architecture_verification": {
        "websocket_usage": "ONLY for PAGO/DOY betting proposals with 3min timeout",
        "sse_usage": "Admin updates, streaming notifications, auto-matching",
        "no_websocket_for": ["Wallet operations", "Dynamic suggestions", "Admin notifications"]
      },

      "modify_files": {
        "backend/src/sockets/streamingSocket.ts": {
          "current_complexity": "Dual namespace (/stream and /stream-control) + admin features",
          "new_approach": "Single /betting namespace for PAGO/DOY workflows only",
          "remove_features": ["Stream control events", "Admin notifications", "System monitoring"]
        }
      }
    }
  },

  "streaming_test_requirements": {
    "manual_operator_workflow": {
      "prerequisite": "Manual del operador artifact created ✅",
      "test_environment": "Local development with docker RTMP (optional)",
      "required_flow": [
        "1. Operator login → event visible",
        "2. Generate stream key → OBS configuration", 
        "3. Start streaming → platform detects stream",
        "4. Open betting window → close betting → start fight",
        "5. End fight → register result → next fight"
      ]
    },

    "streaming_infrastructure_status": {
      "implemented": [
        "✅ Stream key generation (streamingService.ts)",
        "✅ OBS integration framework",
        "✅ WebSocket real-time controls", 
        "✅ Technical issues panel (operator)",
        "✅ Stream health monitoring"
      ],
      "missing_for_tests": [
        "❌ SSE endpoints (blocking server startup)",
        "❌ End-to-end test with real OBS",
        "❌ Viewer authentication integration"
      ]
    }
  },

  "before_after_examples": {
    "sse_implementation": {
      "before_broken": "// backend/src/index.ts line 15\nimport sseRoutes from \"./routes/sse\";\n// Error: Module not found",
      "after_working": "// backend/src/routes/sse.ts\nimport express from 'express';\nconst router = express.Router();\n\nrouter.get('/admin/system-status', (req, res) => {\n  res.writeHead(200, {\n    'Content-Type': 'text/event-stream',\n    'Cache-Control': 'no-cache',\n    'Connection': 'keep-alive'\n  });\n  // SSE implementation\n});\n\nexport default router;"
    },
    "frontend_sse_usage": {
      "before_error": "// SystemMonitoring.tsx - backend endpoint missing\nconst systemData = useSSE('/api/sse/admin/system-status'); // 404 error",
      "after_working": "// SystemMonitoring.tsx - working SSE connection\nconst systemData = useSSE('/api/sse/admin/system-status');\n// Returns real-time system status data"
    }
  },

  "json_instruction_improvements": {
    "lessons_learned": {
      "file_specificity_critical": "Always specify exact files to create/modify",
      "import_verification": "Check all imports have corresponding files", 
      "before_after_examples": "Show exact code changes needed",
      "dependency_tracking": "Identify what exists vs what needs creation"
    },
    
    "improved_patterns": {
      "specific_files": "Create /exact/path/file.ts with {content}",
      "not_generic": "NOT 'implement SSE' BUT 'create sse.ts with these endpoints'",
      "imports_verification": "Update imports in index.ts after creating sse.ts",
      "testing_steps": "1. npm start 2. verify no errors 3. test endpoint /api/sse/admin/system-status"
    }
  },

  "immediate_next_steps": [
    "1. Create backend/src/routes/sse.ts (fix server startup blocker)",
    "2. Implement sseService.ts (connection management)", 
    "3. Create frontend useSSE hook",
    "4. Implement fight status transitions (betting windows)",
    "5. Create FightControl.tsx component for operators",
    "6. Create rtmp-server.js (Node Media Server for local testing)",
    "7. Test end-to-end operator workflow per manual"
  ],

  "success_criteria": [
    "Server starts without errors (sse.ts exists)",
    "Admin SystemMonitoring shows real-time data via SSE",
    "Operator can complete fight workflow: Open Betting → Close Betting → End Fight",
    "Fight status transitions work in database and UI",
    "Docker RTMP server running and OBS connects successfully",
    "Stream key generation and revocation functional",
    "End-to-end operator workflow matches updated manual"
  ],

  "tool_execution_sequence": {
    "claude_code_priority": [
      "Create backend/src/routes/sse.ts (critical blocker)",
      "Implement sseService.ts with connection management",
      "Create fight status transition endpoints",
      "Create rtmp-server.js (Node Media Server alternative)"
    ],
    "gemini_cli_priority": [
      "Create frontend/src/hooks/useSSE.ts",
      "Create operator/FightControl.tsx component",
      "Fix SystemMonitoring.tsx SSE integration",
      "Add OBS download instructions to operator dashboard"
    ],
    "validation_steps": [
      "npm start → no errors",
      "node rtmp-server.js → RTMP server running",
      "curl http://localhost:3001/api/sse/admin/system-status",
      "Admin dashboard shows live data",
      "OBS connects to rtmp://localhost:1935/live",
      "Fight status transitions functional in operator dashboard",
      "Updated manual del operador workflow executable"
    ]
  },

  "risk_mitigation": {
    "import_verification": "Check all imports exist before deployment",
    "sse_connection_cleanup": "Prevent memory leaks with proper connection management", 
    "websocket_isolation": "Remove non-betting WebSocket usage progressively",
    "streaming_fallback": "Manual controls if automated systems fail"
  }
}