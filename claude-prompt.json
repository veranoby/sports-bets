{
  "componentRefactorPlan": {
    "title": "Plan de Refactorizaci√≥n y Limpieza de Componentes Frontend V3 - AN√ÅLISIS DETALLADO",
    "version": "3.0",
    "date": "2025-08-26",
    "analysis_summary": {
      "current_state": "An√°lisis basado en importaciones reales y estructura actual verificada",
      "critical_findings": {
        "confirmed_duplicates": {
          "SubscriptionGuard": "2 versiones diferentes - streaming/ vs shared/",
          "directory_confusion": "subscription/ vs subscriptions/ - SubscriptionStatus mal ubicado"
        },
        "import_conflicts_verified": {
          "UserHeader": "Importa from '../subscription/SubscriptionStatus' (directorio singular)",
          "UserLayout": "Importa from '../shared/SubscriptionStatusBar' (no hay conflicto - componentes diferentes)"
        },
        "optimization_confirmed": {
          "BetHistoryTable": "Usa HTML simple, necesita AdvancedTable",
          "venue_components": "Ya eliminados seg√∫n usuario - no encontrados en an√°lisis"
        }
      },
      "confidence_level": "VERY HIGH - Basado en c√≥digo real analizado"
    },
    
    "deletions": [
      {
        "id": "DEL-001",
        "title": "Eliminar SubscriptionGuard de streaming/",
        "description": "Mantener solo el de shared/ que es m√°s gen√©rico y reutilizable",
        "priority": "HIGH",
        "files_to_delete": [
          "frontend/src/components/streaming/SubscriptionGuard.tsx",
          "frontend/src/components/streaming/__tests__/SubscriptionGuard.test.tsx"
        ],
        "rationale": "El de streaming/ es muy espec√≠fico para streaming, el de shared/ es m√°s gen√©rico",
        "verification_commands": [
          "grep -r 'streaming/SubscriptionGuard' frontend/src/",
          "grep -r 'shared/SubscriptionGuard' frontend/src/"
        ],
        "imports_to_update": [
          "LiveEvent.tsx: '../shared/SubscriptionGuard' (ya correcto)",
          "Buscar otros componentes que importen desde streaming/"
        ],
        "action_steps": [
          "1. Buscar TODAS las importaciones de streaming/SubscriptionGuard",
          "2. Migrar funcionalidades espec√≠ficas del streaming/ al shared/ si es necesario",
          "3. Actualizar todas las importaciones a shared/",
          "4. Eliminar archivos de streaming/",
          "5. Probar funcionalidad de suscripciones en todos los roles"
        ]
      },
      
      {
        "id": "DEL-002", 
        "title": "Limpiar Directorio streaming/ si queda vac√≠o",
        "description": "Despu√©s de eliminar SubscriptionGuard, verificar si streaming/ tiene otros componentes",
        "priority": "MEDIUM",
        "depends_on": "DEL-001",
        "action_steps": [
          "1. Verificar contenido restante en components/streaming/",
          "2. Si est√° vac√≠o, eliminar directorio completo",
          "3. Si hay otros componentes, evaluar si deben moverse a shared/"
        ]
      },
      
      {
        "id": "DEL-003",
        "title": "Eliminar Tests Hu√©rfanos en subscriptions/",
        "description": "Verificar que todos los tests en subscriptions/__tests__/ tengan componentes correspondientes",
        "priority": "LOW",
        "files_to_check": [
          "frontend/src/components/subscriptions/__tests__/"
        ],
        "action_steps": [
          "1. Listar todos los archivos .test.tsx en subscriptions/__tests__/",
          "2. Verificar que cada test tenga su componente correspondiente",
          "3. Eliminar tests sin componente asociado",
          "4. Actualizar tests que referencien imports obsoletos"
        ]
      }
    ],
    
    "unifications": [
      {
        "id": "UNI-001",
        "title": "Consolidar subscription/ en subscriptions/",
        "description": "Mover SubscriptionStatus.tsx al directorio subscriptions/ para unificar",
        "priority": "CRITICAL",
        "evidence": "UserHeader importa '../subscription/SubscriptionStatus' - directorio singular confuso",
        "current_structure": {
          "subscription/": ["SubscriptionStatus.tsx"],
          "subscriptions/": ["SubscriptionManager.tsx", "SubscriptionPlans.tsx", "__tests__/"]
        },
        "target_structure": {
          "subscriptions/": ["SubscriptionStatus.tsx", "SubscriptionManager.tsx", "SubscriptionPlans.tsx", "__tests__/"]
        },
        "files_to_move": [
          {
            "from": "frontend/src/components/subscription/SubscriptionStatus.tsx",
            "to": "frontend/src/components/subscriptions/SubscriptionStatus.tsx"
          }
        ],
        "imports_to_update_verified": [
          "frontend/src/components/user/UserHeader.tsx: '../subscription/SubscriptionStatus' ‚Üí '../subscriptions/SubscriptionStatus'"
        ],
        "additional_imports_to_search": [
          "grep -r 'subscription/SubscriptionStatus' frontend/src/",
          "grep -r '../subscription/' frontend/src/"
        ],
        "directory_to_delete": "frontend/src/components/subscription/",
        "action_steps": [
          "1. Mover SubscriptionStatus.tsx a subscriptions/",
          "2. Ejecutar: grep -r 'subscription/SubscriptionStatus' frontend/src/",
          "3. Actualizar import en UserHeader.tsx (confirmado)",
          "4. Buscar y actualizar cualquier otro import encontrado",
          "5. Eliminar directorio subscription/ vac√≠o",
          "6. Probar compilaci√≥n y funcionalidad"
        ],
        "risk": "MEDIUM - UserHeader es componente cr√≠tico, pero cambio es simple"
      }
    ],
    
    "optimizations": [
      {
        "id": "OPT-001",
        "title": "Migrar BetHistoryTable a AdvancedTable",
        "description": "BetHistoryTable usa tabla HTML b√°sica sin funcionalidades modernas",
        "priority": "HIGH",
        "current_issues_verified": [
          "Tabla HTML est√°tica en pages/user/Bets.tsx",
          "No paginaci√≥n, no ordenamiento, no filtros",
          "No aprovecha AdvancedTable disponible en shared/"
        ],
        "target_component": "frontend/src/components/user/BetHistoryTable.tsx",
        "reusable_component": "frontend/src/components/shared/AdvancedTable.tsx",
        "implementation_plan": {
          "data_columns": [
            "{ header: 'Evento', accessor: 'eventName', sortable: true }",
            "{ header: 'Pelea', accessor: 'fightDetails', format: fight => `${fight.redCorner} vs ${fight.blueCorner}` }",
            "{ header: 'Lado', accessor: 'side', format: side => side === 'red' ? 'üî¥ Rojo' : 'üîµ Azul' }",
            "{ header: 'Monto', accessor: 'amount', format: amount => `${amount.toFixed(2)}`, sortable: true }",
            "{ header: 'Odds', accessor: 'odds', format: odds => `${odds}x` }",
            "{ header: 'Estado', accessor: 'status', format: status => getStatusChip(status) }",
            "{ header: 'Fecha', accessor: 'createdAt', format: date => formatDate(date), sortable: true }"
          ],
          "features_to_implement": [
            "Paginaci√≥n autom√°tica (10 items per page)",
            "Ordenamiento por monto, fecha",
            "Filtros: Estado (active, won, lost), Fecha (last 7 days, last month)",
            "B√∫squeda por nombre de evento",
            "Export a CSV (opcional)"
          ],
          "enhanced_functionality": [
            "Click en fila para ver detalles de apuesta",
            "Indicadores visuales para estado (colores)",
            "Loading states y error handling",
            "Responsive design para m√≥vil"
          ]
        },
        "action_steps": [
          "1. Verificar que AdvancedTable existe en shared/ y sus capacidades",
          "2. Crear nueva versi√≥n de BetHistoryTable usando AdvancedTable",
          "3. Definir columnas con formatters apropiados",
          "4. Implementar filtros y b√∫squeda",
          "5. Mantener la API actual para compatibilidad",
          "6. Probar en p√°ginas que usan BetHistoryTable",
          "7. Verificar responsive design"
        ],
        "files_affected": [
          "frontend/src/components/user/BetHistoryTable.tsx - Refactorizar",
          "frontend/src/pages/user/Bets.tsx - Verificar integraci√≥n"
        ]
      },
      
      {
        "id": "OPT-002",
        "title": "Unificar Card y DataCard - Eliminar Duplicaci√≥n",
        "description": "Card.tsx ya es componente unificado, pero DataCard se sigue usando",
        "priority": "HIGH",
        "evidence_confirmed": [
          "Card.tsx incluye funcionalidad completa de DataCard (value, icon, trend, etc.)",
          "DataCard se usa en: user/Dashboard.tsx, user/Wallet.tsx, operator/Dashboard.tsx",
          "Card se usa en: admin/Articles.tsx, articles/ArticleList.tsx",
          "Duplicaci√≥n de l√≥gica y mantenimiento innecesario"
        ],
        "target": "Migrar todos los usos de DataCard a Card unificado",
        "files_to_update": [
          {
            "file": "frontend/src/pages/user/Dashboard.tsx",
            "change": "import DataCard ‚Üí import Card",
            "usage": "<DataCard title={...} value={...} ‚Üí <Card title={...} value={...}"
          },
          {
            "file": "frontend/src/pages/user/Wallet.tsx", 
            "change": "import DataCard ‚Üí import Card",
            "usage": "Migrar componentes DataCard existentes"
          },
          {
            "file": "frontend/src/pages/operator/Dashboard.tsx",
            "change": "import DataCard ‚Üí import Card", 
            "usage": "Migrar uso de DataCard (cuando se trabaje operator en futuro)"
          }
        ],
        "files_to_delete_after": [
          "frontend/src/components/shared/DataCard.tsx"
        ],
        "action_steps": [
          "1. Verificar que Card.tsx tiene TODA la funcionalidad de DataCard",
          "2. Buscar TODOS los imports de DataCard: grep -r 'DataCard' frontend/src/",
          "3. Migrar imports en user/Dashboard.tsx y user/Wallet.tsx", 
          "4. Probar que funcionalidad visual se mantiene igual",
          "5. Solo despu√©s de confirmar que todo funciona, eliminar DataCard.tsx",
          "6. Verificar compilaci√≥n sin errores"
        ],
        "benefits": [
          "Un solo componente para mantener",
          "Consistencia en toda la app",
          "Menos duplicaci√≥n de c√≥digo",
          "Mejor TypeScript intellisense"
        ]
      },
      
      {
        "id": "OPT-003",
        "title": "Unificar L√≥gica de Subscription Hooks",
        "description": "M√∫ltiples componentes usan diferentes hooks para subscriptions",
        "priority": "MEDIUM",
        "evidence_found": [
          "useSubscriptions() en SubscriptionStatusBar",
          "useSubscription() en UserHeader", 
          "subscriptionAPI calls directos en algunos componentes"
        ],
        "target": "Estandarizar uso de hooks para subscription data",
        "action_steps": [
          "1. Auditar todos los imports de subscription hooks/APIs",
          "2. Estandarizar en useSubscription() como hook principal",
          "3. Eliminar calls directos a subscriptionAPI donde sea posible",
          "4. Centralizar estado de subscription en AuthContext si no est√° ya"
        ]
      },
      
      {
        "id": "OPT-004",
        "title": "Evaluar ErrorBoundary vs ErrorMessage Usage",
        "description": "Ambos componentes se usan para manejo de errores - verificar si son complementarios",
        "priority": "LOW",
        "evidence_found": [
          "ErrorBoundary se usa como wrapper component en user/Bets.tsx",
          "ErrorMessage se usa para mostrar errores espec√≠ficos con retry",
          "PageContainer tambi√©n usa ErrorMessage - patr√≥n establecido"
        ],
        "recommendation": "MANTENER AMBOS - son complementarios, no duplicados",
        "usage_pattern": {
          "ErrorBoundary": "React error boundary para capturar errores de componentes",
          "ErrorMessage": "Componente para mostrar errores espec√≠ficos con bot√≥n retry"
        },
        "action_steps": [
          "1. Documentar cu√°ndo usar cada uno",
          "2. Estandarizar uso consistente en toda la app",
          "3. No requiere cambios - ambos son necesarios"
        ]
      }
    ],
    
    "additional_findings": {
      "confirmed_imports": {
        "UserLayout": "SubscriptionStatusBar from '../shared/SubscriptionStatusBar' ‚úÖ",
        "UserHeader": "SubscriptionStatus from '../subscription/SubscriptionStatus' ‚ö†Ô∏è (needs fix)",
        "LiveEvent": "SubscriptionGuard from '../shared/SubscriptionGuard' ‚úÖ"
      },
      "component_usage_verified": {
        "BetHistoryTable": "Usado en pages/user/Bets.tsx - activo",
        "EventCard": "Usado en Dashboard.tsx - activo", 
        "BetCard": "Usado en pages/user/Bets.tsx - activo",
        "SubscriptionManager": "Componente complejo con tabs, payments - mantener",
        "SubscriptionPlans": "Con tests completos - mantener"
      },
      "no_conflicts_found": [
        "SubscriptionStatus vs SubscriptionStatusBar - son diferentes, no hay conflicto",
        "No dashboards venue duplicados encontrados - usuario ya los elimin√≥",
        "No componentes debug encontrados - usuario ya los elimin√≥"
      ]
    },
    
    "component_analysis_updated": {
      "user_components": {
        "status": "GOOD - All components in active use",
        "confirmed_active": [
          "UserHeader.tsx ‚úÖ - Usado en UserLayout",
          "BetHistoryTable.tsx ‚ö†Ô∏è - Necesita migraci√≥n a AdvancedTable", 
          "EventCard.tsx ‚úÖ - Usado en Dashboard",
          "BetCard.tsx ‚úÖ - Usado en Bets page",
          "Navigation.tsx ‚úÖ - Usado en UserLayout"
        ]
      },
      "subscription_components": {
        "status": "NEEDS RESTRUCTURING",
        "issues_confirmed": [
          "SubscriptionStatus en directorio incorrecto (subscription/ vs subscriptions/)",
          "SubscriptionGuard duplicado (streaming/ vs shared/)",
          "Import paths inconsistentes"
        ],
        "resolution": "UNI-001 + DEL-001 resolver√°n estos issues"
      },
      "shared_components": {
        "status": "GOOD - Well structured",
        "confirmed_components": [
          "SubscriptionStatusBar.tsx ‚úÖ - Espec√≠fico para barra de estado",
          "SubscriptionGuard.tsx ‚úÖ - Version gen√©rica a mantener",
          "AdvancedTable.tsx ‚úÖ - Disponible para BetHistoryTable"
        ]
      }
    },
    
    "execution_order_refined": [
      "FASE 1 - CR√çTICA: UNI-001 (Unificar directorios subscription)",
      "FASE 2 - LIMPIEZA: DEL-001 (SubscriptionGuard duplicado)", 
      "FASE 3 - MEJORAS: OPT-001 (BetHistoryTable optimization)",
      "FASE 4 - FINALIZACI√ìN: DEL-002, DEL-003, OPT-002, OPT-003"
    ],
    
    "risk_assessment_updated": {
      "critical_path": "UNI-001 debe hacerse primero - UserHeader depende de SubscriptionStatus",
      "low_risk": [
        "DEL-002 - Eliminar streaming/ vac√≠o",
        "DEL-003 - Limpiar tests hu√©rfanos"
      ],
      "medium_risk": [
        "UNI-001 - Cambiar import en UserHeader (componente cr√≠tico)",
        "DEL-001 - SubscriptionGuard usado en multiple lugares"
      ],
      "high_risk": [],
      "testing_required": [
        "Subscription functionality en todos los roles",
        "BetHistoryTable despu√©s de migraci√≥n",
        "UserHeader despu√©s de cambio de imports"
      ]
    },
    
    "success_criteria_detailed": {
      "structural_goals": [
        "‚úÖ Solo un directorio subscriptions/ (no subscription/)",
        "‚úÖ Solo un SubscriptionGuard en shared/",
        "‚úÖ Imports consistentes y limpios",
        "‚úÖ No directorios vac√≠os"
      ],
      "functional_goals": [
        "‚úÖ UserHeader muestra subscription status correctamente",
        "‚úÖ BetHistoryTable tiene paginaci√≥n, ordenamiento, filtros",
        "‚úÖ Subscription workflows funcionan en todos los roles",
        "‚úÖ No errores de compilaci√≥n o importaci√≥n"
      ],
      "performance_goals": [
        "‚úÖ Menos componentes duplicados carg√°ndose",
        "‚úÖ Hooks de subscription unificados",
        "‚úÖ Mejor UX en tablas con AdvancedTable"
      ]
    },
    
    "verification_commands": {
      "before_changes": [
        "find frontend/src/components -name '*.tsx' | grep -E '(subscription|subscriptions)' | sort",
        "grep -r 'SubscriptionGuard' frontend/src/ | wc -l",
        "grep -r 'subscription/SubscriptionStatus' frontend/src/"
      ],
      "after_each_phase": [
        "npm run build - verificar compilaci√≥n",
        "grep -r 'subscription/' frontend/src/ - no debe existir despu√©s UNI-001",
        "find frontend/src -type d -empty - no directorios vac√≠os"
      ]
    }
  }
}