{
  "metadata": {
    "purpose": "Enhanced decision matrix for optimal AI selection in GalloBets project",
    "version": "2.0",
    "created": "2025-09-21",
    "updated": "2025-09-24",
    "based_on": "3-AI pipeline success with build stability improvements",
    "project": "GalloBets - Professional Cockfighting Streaming Platform",
    "decision_framework": "Task type + Risk level + Validation gates + Build stability"
  },

  "enhanced_task_classification": {
    "complexity_levels": {
      "simple": {
        "definition": "Single file, <50 lines, isolated change with build stability",
        "examples": ["Doc updates", "Simple TypeScript fixes", "CSS tweaks"],
        "risk_level": "Low",
        "validation_required": "TypeScript compilation only",
        "time_estimate": "<30 minutes"
      },
      "moderate": {
        "definition": "Multi-file, component integration, UI logic with dependency tracking",
        "examples": ["New React components", "SSE hooks", "Betting panels"],
        "risk_level": "Medium",
        "validation_required": "Full validation gates",
        "time_estimate": "30-60 minutes"
      },
      "complex": {
        "definition": "Architecture changes, real-time systems, performance with integration testing",
        "examples": ["SSE architecture", "Database optimization", "WebSocket design"],
        "risk_level": "High",
        "validation_required": "Comprehensive validation + integration testing",
        "time_estimate": "60+ minutes"
      },
      "critical": {
        "definition": "Core system modifications, debugging, authentication with regression testing",
        "examples": ["Database performance", "Auth fixes", "Betting logic"],
        "risk_level": "Critical",
        "validation_required": "Full regression testing suite",
        "time_estimate": "Variable with extensive validation"
      }
    },

    "build_stability_assessment": {
      "typescript_impact": {
        "none": "No TypeScript type changes",
        "minimal": "Simple type additions without interface changes",
        "moderate": "Interface modifications with backward compatibility",
        "high": "Breaking type changes requiring dependency updates"
      },
      "import_dependency_impact": {
        "none": "No import/export changes",
        "minimal": "New imports only, no export modifications",
        "moderate": "Export additions, potential component moves",
        "high": "Significant component restructuring or moves"
      },
      "component_architecture_impact": {
        "none": "No component changes",
        "minimal": "Component implementation only",
        "moderate": "Component interface or props changes",
        "high": "Component hierarchy or relationship changes"
      }
    }
  },

  "enhanced_ai_selection_with_validation": {
    "claude_mandatory_scenarios_enhanced": {
      "database_performance_issues": {
        "trigger_conditions": [
          "Queries taking >1 second",
          "ETIMEDOUT errors",
          "Connection pool problems",
          "Index optimization needs"
        ],
        "risk_assessment": "CRITICAL - System unusable if not fixed",
        "validation_gates": [
          "Database query performance testing",
          "Connection pool stability verification",
          "Integration testing with frontend",
          "Performance monitoring setup"
        ],
        "claude_advantages": [
          "PostgreSQL expertise",
          "Sequelize ORM knowledge",
          "Performance analysis skills",
          "Neon.tech experience"
        ],
        "qwen_exclusion": "ABSOLUTE - Would break database"
      },

      "build_stability_validation": {
        "trigger_conditions": [
          "Any AI session completion",
          "TypeScript compilation failures",
          "Import/export dependency issues",
          "Component architecture changes"
        ],
        "risk_assessment": "HIGH - Build stability critical for development",
        "mandatory_validation": [
          "npx tsc --noEmit verification",
          "npm run build completion",
          "Import dependency resolution",
          "Component rendering validation"
        ],
        "claude_role": "Primary validation engine for all AI work",
        "escalation_protocol": "Immediate rollback on validation failure"
      },

      "integration_gap_analysis": {
        "trigger_conditions": [
          "Multi-AI handoff points",
          "Context preservation requirements",
          "Dependency resolution needs",
          "Cross-component integration"
        ],
        "risk_assessment": "MEDIUM-HIGH - Integration failures cause project delays",
        "claude_expertise": [
          "Cross-system integration understanding",
          "Component relationship analysis",
          "Context gap identification",
          "Systematic debugging approach"
        ]
      }
    },

    "gemini_optimal_scenarios_enhanced": {
      "react_component_creation_with_validation": {
        "trigger_conditions": [
          "New React components needed",
          "TypeScript interfaces",
          "Component architecture",
          "State management"
        ],
        "risk_assessment": "MEDIUM - UI focused with build validation required",
        "mandatory_validation_gates": [
          "TypeScript compilation (npx tsc --noEmit)",
          "Build process completion (npm run build)",
          "Component rendering verification",
          "Import dependency validation"
        ],
        "gemini_advantages": [
          "React expertise",
          "TypeScript mastery",
          "Component patterns",
          "Hooks implementation"
        ],
        "preconditions": [
          "Claude provides architecture",
          "API contracts defined",
          "SSE patterns specified",
          "Dependency mapping available"
        ],
        "failure_protocol": [
          "Immediate rollback on validation failure",
          "Claude intervention for TypeScript errors",
          "Session restart with reduced scope if needed"
        ]
      },

      "typescript_specialization": {
        "trigger_conditions": [
          "Complex type inference needs",
          "Advanced TypeScript patterns",
          "Interface design requirements",
          "Generic type implementations"
        ],
        "risk_assessment": "MEDIUM - Type safety improvements with validation",
        "validation_requirements": [
          "Zero TypeScript compilation errors",
          "Backward compatibility maintained",
          "Component interfaces preserved",
          "Type inference working correctly"
        ],
        "build_stability_focus": [
          "All type changes must compile successfully",
          "No breaking changes to component interfaces",
          "Proper export/import of type definitions",
          "Generic constraints properly defined"
        ]
      }
    },

    "qwen_cli_restricted_scenarios_enhanced": {
      "typescript_cleanup_with_fallbacks": {
        "strict_conditions": [
          "ONLY @typescript-eslint/no-explicit-any errors",
          "Simple type additions only",
          "No logic changes",
          "Single warning type per 20-30min session"
        ],
        "mcp_timeout_mitigation": [
          "QWEN CLI native tools preferred (search_file_content, read_file, edit)",
          "Immediate fallback to run_shell_command when MCPs timeout",
          "Document MCP failures for future optimization",
          "Session validation deferred to end to prevent tool fatigue"
        ],
        "enhanced_safety_requirements": [
          "Git commit before session",
          "TypeScript compilation validation after session",
          "Import dependency verification",
          "No modification of critical files (auth, database, betting logic)"
        ],
        "validation_gates": [
          "npx tsc --noEmit (must pass)",
          "ESLint warning count reduction verification",
          "No new warnings introduced",
          "Build process still works"
        ]
      },

      "isolated_component_creation": {
        "strict_conditions": [
          "New files only (.test.tsx, .md files)",
          "No modification of existing components",
          "Template-based implementations",
          "No complex business logic"
        ],
        "validation_requirements": [
          "Files compile successfully",
          "No import/export issues",
          "Follow project naming conventions",
          "No impact on existing components"
        ]
      }
    }
  },

  "validation_gate_routing_matrix": {
    "pre_session_validation": {
      "dependency_analysis": {
        "command": "grep -r 'import.*from.*\\.\\./' src/ | grep [target-files] | sort",
        "purpose": "Map component dependencies before changes",
        "ai_applicability": "All AIs working on component modifications"
      },
      "typescript_baseline": {
        "command": "npx tsc --noEmit",
        "purpose": "Establish compilation baseline",
        "ai_applicability": "All AIs making TypeScript changes"
      },
      "eslint_baseline": {
        "command": "npm run lint | grep -c 'warning\\|error'",
        "purpose": "Document current warning/error counts",
        "ai_applicability": "AIs working on code quality improvements"
      },
      "build_baseline": {
        "command": "npm run build",
        "purpose": "Verify build works before changes",
        "ai_applicability": "All AIs except documentation-only"
      }
    },

    "post_session_validation_gates": {
      "level_1_basic_validation": {
        "applicable_to": "QWEN CLI sessions, simple changes",
        "gates": [
          {
            "name": "TypeScript Compilation",
            "command": "npx tsc --noEmit",
            "timeout": "60 seconds",
            "failure_action": "Rollback session"
          },
          {
            "name": "ESLint Progress",
            "command": "npm run lint | grep -c warning",
            "success_criteria": "Warning count reduction",
            "failure_action": "Revert problematic files"
          }
        ]
      },

      "level_2_component_validation": {
        "applicable_to": "Gemini sessions, component changes",
        "gates": [
          {
            "name": "TypeScript Compilation",
            "command": "npx tsc --noEmit",
            "timeout": "120 seconds",
            "failure_action": "Full session rollback"
          },
          {
            "name": "Build Process",
            "command": "npm run build",
            "timeout": "180 seconds",
            "failure_action": "Full session rollback"
          },
          {
            "name": "Import Dependencies",
            "command": "grep -r 'Cannot find module\\|Module not found' src/",
            "success_criteria": "Zero missing module errors",
            "failure_action": "Fix imports before proceeding"
          },
          {
            "name": "Component Rendering",
            "command": "npm run dev & sleep 10 && curl -s http://localhost:3000 > /dev/null",
            "success_criteria": "Development server starts successfully",
            "failure_action": "Investigate component issues"
          }
        ]
      },

      "level_3_integration_validation": {
        "applicable_to": "Claude sessions, architecture changes",
        "gates": [
          {
            "name": "Full TypeScript Compilation",
            "command": "npx tsc --noEmit",
            "timeout": "180 seconds",
            "failure_action": "Comprehensive error analysis"
          },
          {
            "name": "Production Build",
            "command": "npm run build",
            "timeout": "300 seconds",
            "failure_action": "Full system analysis"
          },
          {
            "name": "Integration Testing",
            "command": "npm run test:integration",
            "timeout": "600 seconds",
            "failure_action": "Integration issue resolution"
          },
          {
            "name": "Performance Validation",
            "command": "npm run test:performance",
            "timeout": "300 seconds",
            "failure_action": "Performance issue analysis"
          }
        ]
      }
    }
  },

  "enhanced_task_routing_algorithms": {
    "primary_routing_with_validation": {
      "step_1_build_impact_assessment": {
        "typescript_changes": {
          "none": "Route to appropriate AI based on task complexity",
          "minimal": "Add Level 1 validation gates",
          "moderate": "Add Level 2 validation gates",
          "high": "Claude required with Level 3 validation"
        },
        "component_dependencies": {
          "none": "Standard routing applies",
          "minimal": "Add dependency tracking",
          "moderate": "Require pre-session dependency analysis",
          "high": "Claude coordination required"
        }
      },

      "step_2_ai_capability_matching": {
        "qwen_cli_with_validation": {
          "suitable_for": [
            "Simple TypeScript cleanup",
            "Unused import removal",
            "Basic ESLint warning fixes",
            "Documentation updates"
          ],
          "validation_level": "Level 1 (Basic)",
          "session_constraints": [
            "20-30 minute maximum duration",
            "Single warning type focus",
            "MCP timeout fallback required",
            "Build validation at session end"
          ]
        },
        "gemini_cli_with_validation": {
          "suitable_for": [
            "React component implementation",
            "TypeScript interface design",
            "UI logic and state management",
            "Component architecture improvements"
          ],
          "validation_level": "Level 2 (Component)",
          "mandatory_requirements": [
            "TypeScript compilation must pass",
            "Build process must complete",
            "Component dependencies must resolve",
            "No functional regressions allowed"
          ]
        },
        "claude_with_validation": {
          "suitable_for": [
            "Architecture decisions",
            "Database optimization",
            "Integration debugging",
            "Multi-AI validation and coordination"
          ],
          "validation_level": "Level 3 (Integration)",
          "responsibilities": [
            "Final validation of all AI work",
            "Build stability assurance",
            "Context preservation",
            "Integration testing"
          ]
        }
      },

      "step_3_validation_gate_assignment": {
        "automatic_gate_assignment": {
          "based_on_ai": "Each AI gets appropriate validation level",
          "based_on_task": "Complex tasks get higher validation levels",
          "based_on_impact": "High-impact changes get comprehensive validation",
          "based_on_history": "Previously problematic areas get extra validation"
        }
      }
    },

    "failure_recovery_routing": {
      "validation_gate_failures": {
        "typescript_compilation_failure": {
          "immediate_action": "Stop current AI session",
          "analysis_routing": "Claude analyzes compilation errors",
          "resolution_routing": "Claude fixes or guides AI to fix",
          "prevention": "Update AI prompts with error patterns"
        },
        "build_process_failure": {
          "immediate_action": "Full session rollback",
          "analysis_routing": "Claude investigates build issues",
          "resolution_routing": "Claude resolves or escalates to human",
          "prevention": "Enhanced pre-session validation"
        },
        "dependency_resolution_failure": {
          "immediate_action": "Fix imports/exports immediately",
          "analysis_routing": "Claude maps dependency issues",
          "resolution_routing": "Claude updates imports/exports",
          "prevention": "Better pre-session dependency analysis"
        }
      }
    }
  },

  "context_preservation_routing": {
    "handoff_validation": {
      "qwen_to_gemini": {
        "required_documentation": [
          "Files modified with exact line counts",
          "Warning categories and count changes",
          "TypeScript patterns applied",
          "MCP timeout issues encountered"
        ],
        "validation_before_handoff": [
          "All changes compile successfully",
          "ESLint warning count reduced",
          "No new errors introduced",
          "Build process still works"
        ]
      },
      "gemini_to_claude": {
        "required_documentation": [
          "Components created or modified",
          "TypeScript interfaces defined",
          "Dependencies added or changed",
          "Validation gate results"
        ],
        "validation_before_handoff": [
          "Full TypeScript compilation",
          "Complete build process",
          "Component rendering verification",
          "Integration points identified"
        ]
      }
    },

    "context_gap_prevention": {
      "pre_handoff_checklist": [
        "All work documented with rationale",
        "Remaining tasks clearly identified",
        "Risk areas flagged for next AI",
        "Validation results included"
      ],
      "knowledge_transfer_quality": [
        "Next AI can continue without questions",
        "All decisions explained with context",
        "Edge cases and solutions documented",
        "AI-specific insights included"
      ]
    }
  },

  "success_metrics_with_validation": {
    "build_stability_success": {
      "zero_compilation_regressions": "All AI sessions must maintain TypeScript compilation",
      "zero_build_failures": "All AI sessions must maintain build capability",
      "zero_dependency_breaks": "All AI sessions must preserve import/export integrity",
      "zero_functional_regressions": "All AI sessions must preserve component functionality"
    },

    "coordination_efficiency_enhanced": {
      "handoff_quality": "Next AI starts immediately without context questions",
      "validation_overhead": "Validation gates add <20% to session time",
      "failure_recovery_speed": "Issues resolved within one validation cycle",
      "token_efficiency_maintained": "50%+ token savings preserved with validation"
    },

    "ai_performance_with_gates": {
      "claude_validation_accuracy": "100% of validation issues correctly identified",
      "gemini_build_stability": "100% of Gemini sessions pass build validation",
      "qwen_scope_adherence": "100% of QWEN sessions stay within defined scope",
      "overall_pipeline_reliability": "90%+ success rate with validation gates"
    }
  },

  "escalation_patterns_enhanced": {
    "immediate_escalation_triggers": {
      "build_breaking_changes": {
        "detection": "npm run build fails after AI session",
        "escalation": "Claude immediate intervention",
        "resolution": "Full rollback or targeted fix",
        "prevention": "Enhanced pre-session validation"
      },
      "typescript_compilation_errors": {
        "detection": "npx tsc --noEmit fails after AI session",
        "escalation": "Claude error analysis and resolution",
        "resolution": "Fix types or revert problematic changes",
        "prevention": "Better type safety in AI prompts"
      },
      "critical_system_breaks": {
        "detection": "Authentication, database, or core functionality fails",
        "escalation": "Claude exclusive ownership",
        "resolution": "Systematic debugging and repair",
        "prevention": "Forbidden file lists strictly enforced"
      }
    },

    "validation_failure_protocols": {
      "level_1_validation_failure": {
        "action": "Targeted file rollback",
        "analysis": "Claude reviews specific failures",
        "resolution": "Fix or revert individual files",
        "continuation": "AI session can continue with corrections"
      },
      "level_2_validation_failure": {
        "action": "Full session rollback",
        "analysis": "Claude comprehensive component analysis",
        "resolution": "Session restart with reduced scope",
        "continuation": "New session with lessons learned"
      },
      "level_3_validation_failure": {
        "action": "Full project validation and repair",
        "analysis": "Claude system-wide impact assessment",
        "resolution": "Complete integration testing and fixes",
        "continuation": "Human consultation if needed"
      }
    }
  }
}