{
  "metadata": {
    "purpose": "Decision matrix for optimal AI selection in GalloBets project",
    "created": "2025-09-21",
    "based_on": "Sistema-agri experience + GalloBets specific requirements",
    "project": "GalloBets - Professional Cockfighting Streaming Platform",
    "decision_framework": "Task type + Risk level + Timeline constraints"
  },

  "task_classification_system": {
    "complexity_levels": {
      "simple": {
        "definition": "Single file, <50 lines, isolated change",
        "examples": ["Doc updates", "Simple TypeScript fixes", "CSS tweaks"],
        "risk_level": "Low",
        "time_estimate": "<2 hours"
      },
      "moderate": {
        "definition": "Multi-file, component integration, UI logic",
        "examples": ["New React components", "SSE hooks", "Betting panels"],
        "risk_level": "Medium",
        "time_estimate": "2-6 hours"
      },
      "complex": {
        "definition": "Architecture changes, real-time systems, performance",
        "examples": ["SSE architecture", "Database optimization", "WebSocket design"],
        "risk_level": "High",
        "time_estimate": ">6 hours"
      },
      "critical": {
        "definition": "Core system modifications, debugging, authentication",
        "examples": ["Database performance", "Auth fixes", "Betting logic"],
        "risk_level": "Critical",
        "time_estimate": "Variable"
      }
    },

    "domain_categories": {
      "betting_business_logic": {
        "examples": ["PAGO/DOY proposals", "Fight windows", "Temporal transitions", "Bet validation"],
        "complexity_factor": "High - requires domain expertise",
        "risk_factor": "Critical - financial implications"
      },
      "streaming_infrastructure": {
        "examples": ["RTMP setup", "OBS integration", "HLS delivery", "Stream monitoring"],
        "complexity_factor": "High - technical complexity",
        "risk_factor": "High - user experience impact"
      },
      "real_time_systems": {
        "examples": ["SSE implementation", "WebSocket minimal", "Event subscriptions", "Live updates"],
        "complexity_factor": "High - architectural impact",
        "risk_factor": "High - system stability"
      },
      "frontend_implementation": {
        "examples": ["React components", "TypeScript", "Tailwind", "Responsive design"],
        "complexity_factor": "Moderate - technical implementation",
        "risk_factor": "Medium - UI focused"
      },
      "database_performance": {
        "examples": ["Query optimization", "Connection pools", "Indexes", "Caching"],
        "complexity_factor": "Critical - performance impact",
        "risk_factor": "Critical - system availability"
      }
    }
  },

  "ai_selection_decision_tree": {
    "claude_mandatory_scenarios": {
      "database_performance_issues": {
        "trigger_conditions": [
          "Queries taking >1 second",
          "ETIMEDOUT errors",
          "Connection pool problems",
          "Index optimization needs"
        ],
        "risk_assessment": "CRITICAL - System unusable if not fixed",
        "claude_advantages": [
          "PostgreSQL expertise",
          "Sequelize ORM knowledge",
          "Performance analysis skills",
          "Neon.tech experience"
        ],
        "qwen_exclusion": "ABSOLUTE - Would break database"
      },

      "sse_websocket_architecture": {
        "trigger_conditions": [
          "SSE service design",
          "WebSocket minimal implementation",
          "Real-time architecture decisions",
          "Event subscription patterns"
        ],
        "risk_assessment": "HIGH - Core system architecture",
        "claude_advantages": [
          "Hybrid SSE/WebSocket expertise",
          "Minimal WebSocket approach understanding",
          "Event-driven architecture",
          "Performance optimization"
        ]
      },

      "betting_system_design": {
        "trigger_conditions": [
          "Fight temporal logic",
          "PAGO/DOY proposal system",
          "Betting window management",
          "Timeout mechanisms"
        ],
        "risk_assessment": "CRITICAL - Business logic core",
        "claude_advantages": [
          "P2P betting understanding",
          "Temporal state machines",
          "Financial transaction safety",
          "Business rule enforcement"
        ]
      },

      "error_debugging": {
        "trigger_conditions": [
          "Authentication broken",
          "API failures",
          "Integration issues",
          "Performance problems"
        ],
        "risk_assessment": "QWEN destroyed Profile.tsx - Claude ONLY",
        "claude_advantages": [
          "Systematic debugging",
          "Root cause analysis",
          "Non-destructive fixes",
          "Integration understanding"
        ]
      },

      "operator_hierarchy": {
        "trigger_conditions": [
          "Role-based permissions",
          "Limited admin tools",
          "Event assignment logic",
          "Access control"
        ],
        "risk_assessment": "HIGH - Security implications",
        "claude_advantages": [
          "Permission matrix design",
          "Hierarchy enforcement",
          "Security best practices",
          "Role validation"
        ]
      }
    },

    "gemini_optimal_scenarios": {
      "react_component_creation": {
        "trigger_conditions": [
          "New React components needed",
          "TypeScript interfaces",
          "Component architecture",
          "State management"
        ],
        "risk_assessment": "MEDIUM - UI focused",
        "gemini_advantages": [
          "React expertise",
          "TypeScript mastery",
          "Component patterns",
          "Hooks implementation"
        ],
        "preconditions": [
          "Claude provides architecture",
          "API contracts defined",
          "SSE patterns specified"
        ]
      },

      "betting_ui_implementation": {
        "trigger_conditions": [
          "CurrentBettingPanel creation",
          "BetCard components",
          "PAGO/DOY modals",
          "Fight status indicators"
        ],
        "risk_assessment": "MEDIUM - Frontend only",
        "gemini_advantages": [
          "Betting UI patterns",
          "Real-time UI updates",
          "Responsive design",
          "User interaction flows"
        ],
        "coordination_requirements": [
          "Claude provides betting logic",
          "API endpoints ready",
          "SSE events defined"
        ]
      },

      "admin_dashboard_creation": {
        "trigger_conditions": [
          "Admin panel components",
          "System monitoring UI",
          "Event management interface",
          "Streaming controls"
        ],
        "risk_assessment": "MEDIUM - Admin tools",
        "gemini_advantages": [
          "Dashboard patterns",
          "Data visualization",
          "Admin UI/UX",
          "Tailwind layouts"
        ]
      },

      "operator_interface": {
        "trigger_conditions": [
          "Operator dashboard",
          "Limited admin tools",
          "Event assignment UI",
          "Fight control panel"
        ],
        "risk_assessment": "MEDIUM - Permission aware",
        "gemini_advantages": [
          "Role-based UI",
          "Conditional rendering",
          "Permission checking",
          "Limited tool implementation"
        ]
      }
    },

    "qwen_restricted_scenarios": {
      "typescript_cleanup": {
        "strict_conditions": [
          "ONLY @typescript-eslint/no-explicit-any errors",
          "Simple type additions only",
          "No logic changes",
          "Max 10 files per session"
        ],
        "risk_assessment": "LOW if properly constrained",
        "safety_requirements": [
          "Backup before session",
          "Test after every file",
          "Stop if any errors",
          "Claude validation after"
        ]
      },

      "new_test_files": {
        "strict_conditions": [
          "Test files only (.test.tsx)",
          "New files only",
          "Template based",
          "No modification of existing"
        ],
        "risk_assessment": "LOW - isolated tests",
        "safety_requirements": [
          "Follow test templates",
          "No complex logic",
          "Simple assertions only"
        ]
      },

      "documentation_updates": {
        "strict_conditions": [
          "Markdown files only",
          "Additive content only",
          "No code blocks modified",
          "README and docs only"
        ],
        "risk_assessment": "VERY LOW - no code impact"
      }
    },

    "absolutely_forbidden_for_qwen": {
      "authentication_system": {
        "files": ["Profile.tsx", "AuthContext.tsx", "auth.ts", "api.ts"],
        "reason": "QWEN destroyed working authentication",
        "alternative": "Claude ONLY for any auth work"
      },
      "database_work": {
        "reason": "Cannot understand Sequelize or SQL",
        "evidence": "Would use placeholder comments",
        "alternative": "Claude ONLY for all database work"
      },
      "real_time_systems": {
        "reason": "Doesn't understand SSE/WebSocket hybrid",
        "evidence": "Would break event subscriptions",
        "alternative": "Claude architecture, Gemini UI only"
      },
      "betting_logic": {
        "reason": "Cannot understand temporal windows",
        "evidence": "Would break fight transitions",
        "alternative": "Claude designs, Gemini implements UI"
      }
    }
  },

  "task_routing_algorithms": {
    "primary_routing_logic": {
      "step_1_file_check": {
        "forbidden_files": [
          "Profile.tsx → Claude ONLY",
          "AuthContext.tsx → Claude ONLY",
          "auth.ts → Claude ONLY",
          "Any Sequelize model → Claude ONLY"
        ]
      },
      "step_2_risk_assessment": {
        "critical_risk": "Claude ONLY - no exceptions",
        "high_risk": "Claude designs → Gemini implements → Claude validates",
        "medium_risk": "Gemini with Claude specification",
        "low_risk": "QWEN allowed with extreme restrictions"
      },
      "step_3_domain_check": {
        "database": "Claude ONLY",
        "real_time": "Claude architecture → Gemini UI",
        "betting_logic": "Claude design → Gemini UI",
        "frontend_only": "Gemini optimal",
        "documentation": "QWEN allowed"
      },
      "step_4_complexity": {
        "simple_isolated": "QWEN with safety protocols",
        "moderate_ui": "Gemini optimal",
        "complex_system": "Claude required",
        "critical_core": "Claude ONLY"
      }
    },

    "specific_task_routing": {
      "sse_implementation": {
        "route": "Claude → Gemini → Claude",
        "breakdown": {
          "claude_1": "Design SSE architecture",
          "gemini": "Implement useSSE hook and components",
          "claude_2": "Validate and optimize"
        }
      },
      "betting_panel": {
        "route": "Claude → Gemini → Claude",
        "breakdown": {
          "claude_1": "Define betting logic and API",
          "gemini": "Create CurrentBettingPanel UI",
          "claude_2": "Integration testing"
        }
      },
      "database_optimization": {
        "route": "Claude ONLY",
        "breakdown": {
          "claude": "All query optimization work",
          "forbidden": "QWEN and Gemini excluded"
        }
      },
      "typescript_cleanup": {
        "route": "QWEN → Claude validation",
        "breakdown": {
          "qwen": "Simple any fixes only",
          "claude": "Validate no breaking changes"
        }
      },
      "operator_dashboard": {
        "route": "Claude → Gemini",
        "breakdown": {
          "claude": "Permission matrix and API",
          "gemini": "Complete UI implementation"
        }
      }
    }
  },

  "coordination_workflows": {
    "day_1_sse_architecture": {
      "morning": {
        "owner": "Claude",
        "tasks": [
          "Design SSE service architecture",
          "Define event types and subscriptions",
          "Create error handling patterns"
        ],
        "deliverables": [
          "Complete SSE specification document",
          "Event type definitions",
          "API endpoint designs"
        ]
      },
      "afternoon": {
        "owner": "Claude",
        "tasks": [
          "Implement SSE service backend",
          "Create subscription management",
          "Test SSE endpoints"
        ],
        "handoff_to_gemini": [
          "SSE endpoint URLs",
          "Event type specifications",
          "useSSE hook requirements"
        ]
      }
    },

    "day_2_sse_frontend": {
      "morning": {
        "owner": "Gemini",
        "tasks": [
          "Create useSSE hook",
          "Implement EventSource management",
          "Add reconnection logic"
        ],
        "validation_points": [
          "Hook connects successfully",
          "Events received properly",
          "Reconnection works"
        ]
      },
      "afternoon": {
        "owner": "Gemini",
        "tasks": [
          "Create admin dashboard components",
          "Add real-time updates",
          "System monitoring panel"
        ],
        "claude_validation": [
          "Real-time updates working",
          "No performance issues",
          "Error handling correct"
        ]
      }
    },

    "day_3_betting_windows": {
      "morning": {
        "owner": "Claude",
        "tasks": [
          "Design fight temporal logic",
          "Create state machine",
          "Define betting window rules"
        ],
        "deliverables": [
          "State transition diagram",
          "API endpoints for transitions",
          "Validation rules"
        ]
      },
      "afternoon": {
        "owner": "Gemini",
        "tasks": [
          "Create FightStatusIndicator",
          "Implement countdown timer",
          "Add transition controls"
        ],
        "integration": [
          "Connect to SSE updates",
          "Handle state transitions",
          "Show betting windows"
        ]
      }
    },

    "day_4_pago_doy": {
      "morning": {
        "owner": "Claude",
        "tasks": [
          "Design PAGO/DOY proposal system",
          "Create WebSocket minimal endpoints",
          "Define timeout logic"
        ],
        "critical": [
          "WebSocket ONLY for proposals",
          "3-minute timeout enforcement",
          "No wallet operations via WebSocket"
        ]
      },
      "afternoon": {
        "owner": "Gemini",
        "tasks": [
          "Create proposal modals",
          "Add accept/reject UI",
          "Implement countdown timer"
        ],
        "validation": [
          "Proposals timeout correctly",
          "UI updates in real-time",
          "Clean modal interactions"
        ]
      }
    },

    "day_5_operator_dashboard": {
      "full_day": {
        "owner": "Gemini (Claude spec)",
        "morning_tasks": [
          "Create operator main dashboard",
          "Add event management UI",
          "Implement limited tools"
        ],
        "afternoon_tasks": [
          "Add streaming controls",
          "Create fight management",
          "Test permissions"
        ],
        "claude_validation": [
          "Permissions enforced",
          "Cannot modify admins",
          "Event assignment works"
        ]
      }
    },

    "week_2_database_sprint": {
      "days_8_10": {
        "owner": "Claude ONLY",
        "tasks": [
          "Analyze slow queries",
          "Add database indexes",
          "Optimize connection pool",
          "Implement query caching"
        ],
        "metrics": [
          "Queries <500ms target",
          "No ETIMEDOUT errors",
          "Stable connections"
        ],
        "forbidden": "QWEN completely excluded"
      }
    }
  },

  "quality_gates": {
    "before_gemini_implementation": {
      "required_from_claude": [
        "Complete architectural specification",
        "API endpoints documented",
        "Event types defined",
        "Test data available"
      ]
    },
    "before_claude_validation": {
      "required_from_gemini": [
        "All components rendering",
        "TypeScript compiling",
        "No console errors",
        "Basic functionality working"
      ]
    },
    "before_qwen_session": {
      "mandatory_checks": [
        "Git commit created",
        "Task is in safe category",
        "Time limit set (30 min)",
        "Claude available for validation"
      ]
    },
    "before_production": {
      "final_validation": [
        "All tests passing",
        "Performance targets met",
        "No critical bugs",
        "Documentation complete"
      ]
    }
  },

  "emergency_decision_tree": {
    "if_authentication_breaks": {
      "immediate": "STOP all work",
      "action": "Claude analyzes and fixes",
      "forbidden": "QWEN must not touch"
    },
    "if_database_slow": {
      "immediate": "Claude investigates",
      "action": "Emergency index creation",
      "escalation": "Consider caching layer"
    },
    "if_sse_fails": {
      "immediate": "Check event source connections",
      "action": "Claude fixes backend",
      "fallback": "Implement polling temporarily"
    },
    "if_betting_logic_wrong": {
      "immediate": "Disable betting temporarily",
      "action": "Claude redesigns logic",
      "validation": "Extensive testing before re-enable"
    }
  },

  "success_metrics": {
    "coordination_effectiveness": [
      "Clear task ownership",
      "No duplicate work",
      "Smooth handoffs",
      "Timeline adherence"
    ],
    "technical_goals": [
      "SSE latency <1 second",
      "Database queries <500ms",
      "Zero auth breaking changes",
      "WebSocket truly minimal"
    ],
    "business_goals": [
      "15-day MVP delivery",
      "Betting system working",
      "Operator dashboard complete",
      "Streaming integrated"
    ]
  }
}