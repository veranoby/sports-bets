{
  "metadata": {
    "purpose": "TypeScript interface reference for GalloBets platform - PRODUCTION READY",
    "created": "2025-09-28",
    "updated": "2025-10-14",
    "version": "2.2",
    "status": "✅ PRODUCTION VERIFIED - 0 TypeScript errors",
    "critical_note": "VERIFIED against backend database models and production deployment",
    "recent_additions": "Express Request type extensions (sessionToken), ActiveSession model validation"
  },

  "core_interfaces": {
    "Fight": {
      "file": "/frontend/src/types/index.ts",
      "required_properties": ["id", "eventId", "number", "redCorner", "blueCorner", "weight", "status"],
      "optional_properties": ["description", "notes", "initialOdds", "bettingStartTime", "bettingEndTime", "result", "startTime", "endTime"],
      "status_enum": ["upcoming", "betting", "live", "completed", "cancelled"],
      "database_mapping": {
        "redCorner": "red_corner (database)",
        "blueCorner": "blue_corner (database)",
        "bettingStartTime": "betting_start_time (database)"
      },
      "critical_note": "VERIFIED against backend/src/models/Fight.ts - properties match database schema"
    },
    "User": {
      "file": "/frontend/src/types/index.ts",
      "required_properties": ["id", "username", "email", "role", "isActive", "createdAt", "updatedAt"],
      "optional_properties": ["profileInfo", "lastLogin", "subscription", "wallet", "events"],
      "role_enum": ["admin", "operator", "venue", "user", "gallera"],
      "profileInfo_structure": {
        "basic_fields": ["fullName", "phoneNumber", "address", "identificationNumber", "verificationLevel"],
        "venue_fields": ["businessName", "venueName", "venueLocation", "venueDescription", "venueEmail", "venueWebsite"],
        "gallera_fields": ["galleraName", "galleraLocation", "galleraDescription", "galleraEmail", "galleraWebsite", "galleraSpecialties", "galleraActiveRoosters"],
        "extended_fields": ["location", "description", "establishedDate", "certified", "rating", "premiumLevel", "specialties", "imageUrl"]
      },
      "backend_sync": {
        "automatic_sync": "User.profileInfo changes sync to Venue/Gallera dedicated tables",
        "trigger_fields": ["venueName → venues.name", "galleraName → galleras.name"],
        "endpoint": "/users/profile (PUT) - triggers sync in backend/src/routes/users.ts:220-290"
      }
    },
    "UserSubscription": {
      "file": "/frontend/src/types/index.ts",
      "required_properties": ["id", "plan", "status", "features"],
      "optional_properties": ["expiresAt", "manual_expires_at"],
      "status_enum": ["active", "cancelled", "expired", "pending"],
      "plan_types": ["free", "24-hour", "monthly"],
      "pricing": {
        "free": "$0 (default on expiration/cancellation)",
        "24-hour": "$5 (1 day access)",
        "monthly": "$10 (30 days access)"
      },
      "common_errors": [
        "Using 'type' instead of 'plan' property",
        "Missing 'id' property in form data",
        "Forgetting index signature for form compatibility"
      ]
    },
    "MembershipChangeRequest": {
      "file": "/backend/src/models/MembershipChangeRequest.ts",
      "required_properties": ["id", "userId", "requestedMembershipType", "status", "createdAt"],
      "optional_properties": ["requestNotes", "paymentProofUrl", "completedAt", "completedBy", "rejectionReason"],
      "status_enum": ["pending", "completed", "rejected"],
      "membership_type_enum": ["24-hour", "monthly"],
      "business_rules": [
        "User must have registered phone number to create request",
        "Only one pending request allowed per user at a time",
        "Cannot request 'free' tier (automatically assigned on expiration)",
        "Admin/operator can complete or reject requests",
        "Payment proof URL is optional but recommended"
      ],
      "frontend_integration": {
        "user_component": "/frontend/src/components/user/MembershipSection.tsx",
        "admin_component": "/frontend/src/components/admin/SubscriptionTabs.tsx",
        "api_service": "/frontend/src/services/api.ts (membershipRequestsAPI)"
      },
      "api_endpoints": {
        "create": "POST /api/membership-requests",
        "my_requests": "GET /api/membership-requests/my-requests",
        "pending": "GET /api/membership-requests/pending (admin/operator only)",
        "complete": "PATCH /api/membership-requests/:id/complete (admin/operator only)",
        "reject": "PATCH /api/membership-requests/:id/reject (admin/operator only)"
      },
      "validation_rules": {
        "requestedMembershipType": "Required, must be '24-hour' or 'monthly'",
        "requestNotes": "Optional, max 1000 characters",
        "paymentProofUrl": "Optional, max 500 characters, must be valid URL format",
        "rejectionReason": "Required when rejecting, max 500 characters"
      },
      "common_errors": [
        "Using 'type' instead of 'requestedMembershipType' field",
        "Attempting to request 'free' tier (not allowed)",
        "Creating duplicate pending request (one per user limit)",
        "Missing phone number in user profile"
      ]
    },
    "EventConnection": {
      "file": "/backend/src/models/EventConnection.ts",
      "purpose": "Track user connections to events for real-time viewer count and historical analytics",
      "required_properties": ["id", "event_id", "user_id", "session_id", "connected_at"],
      "optional_properties": ["disconnected_at", "duration_seconds", "ip_address", "user_agent"],
      "database_table": "event_connections",
      "indexes": [
        "idx_event_connections_event_disconnected (event_id, disconnected_at) - For fast viewer queries"
      ],
      "field_descriptions": {
        "id": "number - Primary key, auto-increment",
        "event_id": "number - Foreign key to events table",
        "user_id": "number - Foreign key to users table",
        "session_id": "string - Unique session identifier",
        "connected_at": "Date - Timestamp when user connected",
        "disconnected_at": "Date | null - Timestamp when user disconnected (null if still connected)",
        "duration_seconds": "number | null - Total connection duration in seconds",
        "ip_address": "string | null - User IP address for security auditing",
        "user_agent": "string | null - Browser/device information"
      },
      "usage_scenarios": [
        "Real-time viewer count: Count where disconnected_at IS NULL",
        "Historical analytics: Aggregate data with user joins",
        "Security auditing: Track unusual connection patterns",
        "Performance metrics: Average watch time per event"
      ],
      "api_endpoints": {
        "get_viewers": "GET /api/events/:id/viewers - Real-time viewer count",
        "get_analytics": "GET /api/events/:id/analytics - Historical connection data with user details"
      },
      "automatic_tracking": {
        "connection": "Tracked via streamingSocket.trackConnection() in backend/src/sockets/streamingSocket.ts:8",
        "disconnection": "Tracked via streamingSocket.trackDisconnection() in backend/src/sockets/streamingSocket.ts:22",
        "duration_calculation": "Auto-calculated on disconnection: (disconnected_at - connected_at) / 1000"
      },
      "business_value": [
        "Monitor event popularity in real-time",
        "Identify most popular events/times",
        "Detect account sharing (multiple concurrent connections)",
        "Calculate average engagement per event",
        "Security: Track suspicious connection patterns"
      ]
    },
    "EventData": {
      "file": "/frontend/src/types/index.ts",
      "union_types": {
        "operator": "string | { username: string }",
        "status": "upcoming | live | completed | cancelled | betting | in-progress | scheduled"
      },
      "required_properties": ["id", "name", "status", "venue", "createdAt", "updatedAt", "venueId"],
      "recently_added": ["streamKey", "currentViewers", "activeBets", "completedFights", "totalFights", "totalPrizePool", "streamStatus", "fights"]
    },
    "Venue": {
      "file": "/frontend/src/types/index.ts",
      "required_properties": ["id", "name", "isActive", "createdAt", "updatedAt"],
      "optional_properties": ["address", "location", "description", "status", "images", "ownerId", "contactInfo"],
      "contactInfo_structure": {
        "phone": "string?",
        "email": "string?",
        "website": "string?",
        "address": "string?"
      }
    },
    "Article": {
      "file": "/frontend/src/types/article.ts",
      "required_properties": ["id", "title", "slug", "content", "status", "created_at"],
      "optional_properties": ["excerpt", "featured_image", "published_at", "author", "venue", "venue_id"],
      "backend_auto_generated": ["slug"],
      "slug_generation": {
        "source": "Generated from title field",
        "format": "URL-friendly (lowercase, hyphens, no special chars)",
        "uniqueness": "Enforced by backend with automatic numbering (e.g., title-1, title-2)",
        "frontend_note": "NEVER send slug in POST/PUT requests - backend auto-generates"
      },
      "deprecated_fields": ["summary", "featured_image_url"],
      "api_mapping": {
        "POST /articles": {
          "required": ["title", "content", "excerpt"],
          "optional": ["featured_image", "venue_id"],
          "CRITICAL_WARNING": "Frontend MUST send 'excerpt' NOT 'summary', and 'featured_image' NOT 'featured_image_url'"
        }
      },
      "common_errors": [
        "Using 'summary' instead of 'excerpt' field in API calls",
        "Using 'featured_image_url' instead of 'featured_image' in API calls",
        "Missing required fields: title (min 5 chars), content (min 10 chars), excerpt (min 10, max 500 chars)"
      ]
    },
    "Gallera": {
      "file": "/frontend/src/types/index.ts",
      "required_properties": ["id", "name", "createdAt", "updatedAt"],
      "optional_properties": ["location", "description", "status", "specialties", "fightRecord", "images", "ownerId", "articles"],
      "specialties_union": "string | { breeds: unknown[]; trainingMethods: unknown[]; experience: string }",
      "common_errors": [
        "Assuming specialties is always string",
        "Missing fightRecord property access",
        "Forgetting articles array for gallera detail pages"
      ]
    }
  },

  "upload_interfaces": {
    "upload_response": {
      "file": "/frontend/src/services/api.ts",
      "interface": "ApiResponse<UploadData>",
      "properties": {
        "success": "boolean",
        "data": {
          "filename": "string",
          "originalName": "string",
          "url": "string",
          "size": "number",
          "mimetype": "string"
        }
      },
      "usage_example": "const response = await uploadsAPI.uploadImage(file); const imageUrl = response.data.url;",
      "implementation_notes": [
        "File upload uses FormData with multer backend",
        "Authentication required via Bearer token",
        "Images stored in backend/uploads/images/ directory",
        "Served via /uploads/images/{filename} static route"
      ]
    },
    "frontend_upload_integration": {
      "component": "ArticleEditor.tsx",
      "handler": "handleImageChange",
      "workflow": [
        "User selects file via input[type=file]",
        "handleImageChange calls uploadsAPI.uploadImage(file)",
        "Response provides URL for immediate preview",
        "URL stored in form data as featured_image field",
        "Article save includes image URL in database"
      ],
      "error_handling": "Try-catch with user-friendly alerts",
      "loading_state": "uploading boolean with disabled input"
    }
  },

  "api_response_patterns": {
    "standard_response": {
      "structure": "ApiResponse<T>",
      "properties": ["success", "data", "error?", "code?", "message?"],
      "data_access": "response.data.{entityType}",
      "examples": {
        "venues": "response.data.venues",
        "galleras": "response.data.galleras",
        "users": "response.data.users"
      }
    },
    "pagination_response": {
      "additional_properties": ["total", "totalPages"],
      "access_pattern": "response.data.total"
    }
  },

  "common_ai_errors": {
    "union_type_access": {
      "wrong": "operator.username // unsafe",
      "correct": "typeof operator === 'object' && operator.username ? operator.username : operator"
    },
    "object_to_reactnode": {
      "wrong": "{winner: 'rooster1', method: 'ko'} // directly in JSX",
      "correct": "JSON.stringify(result) or custom rendering component"
    },
    "missing_imports": {
      "verify_before_import": ["Subscription -> UserSubscription", "BetType -> not exists", "StreamQuality -> not exists"],
      "check_exports": "grep 'export.*{TypeName}' /frontend/src/types/index.ts"
    }
  },

  "validation_commands": {
    "type_check": "npx tsc --noEmit",
    "build_check": "npm run build",
    "import_verification": "grep -r 'import.*{TypeName}' frontend/src/",
    "export_verification": "grep 'export.*{TypeName}' frontend/src/types/index.ts"
  },

  "ai_safety_protocol": {
    "before_modifications": [
      "Read existing interface definitions",
      "Verify all imports resolve",
      "Check union type usage patterns",
      "Confirm API response structure"
    ],
    "during_modifications": [
      "Never remove required properties",
      "Add type guards for union types",
      "Use index signatures for form compatibility",
      "Serialize objects before React rendering"
    ],
    "after_modifications": [
      "Run npx tsc --noEmit",
      "Test import/export resolution",
      "Verify no 'any' types introduced",
      "Check union type safety"
    ]
  },

  "claude_backend_fixes_report": {
    "date": "2025-09-29",
    "status": "✅ BACKEND USER INTERFACE OPTIMIZATION COMPLETE",
    "fixes_applied": [
      "User.ts: Added venue/gallera-specific profileInfo fields",
      "UserProfile interface: Extended with businessName, venueName, galleraName etc.",
      "TypeScript compilation: Fixed property access errors in venues.ts & galleras.ts",
      "Data synchronization: Verified User.profileInfo ↔ Venue/Gallera table sync"
    ],
    "impact_verification": {
      "profile_editing": "✅ /users/profile endpoint handles all venue/gallera fields",
      "admin_management": "✅ Admin can edit venue/gallera users with extended profileInfo",
      "data_consistency": "✅ Changes auto-sync to dedicated Venue/Gallera tables"
    },
    "typescript_status": "✅ Zero compilation errors (npx tsc --noEmit)"
  },
  "gemini_cli_success_report": {
    "date": "2025-09-28",
    "status": "✅ TYPESCRIPT COMPILATION SUCCESS",
    "errors_reduced": "FROM 68 → TO 0",
    "critical_fixes_applied": [
      "Fight interface: redCorner/blueCorner (corrected from rooster_1/rooster_2)",
      "Union type safety for operator field",
      "API response type consistency",
      "Component prop type alignment"
    ],
    "production_readiness": "✅ CONFIRMED - Zero compilation errors"
  },
  "backend_type_extensions": {
    "express_request_extensions": {
      "file": "/backend/src/types/express.d.ts",
      "created": "2025-10-14",
      "purpose": "Extend Express Request interface for session management",
      "properties_added": {
        "user": {
          "type": "User (from models)",
          "optional": true,
          "added_by": "Authentication middleware",
          "usage": "Access authenticated user in request handlers"
        },
        "sessionToken": {
          "type": "string",
          "optional": true,
          "added_by": "enhancedAuthenticate middleware",
          "usage": "JWT token for session invalidation on logout"
        }
      },
      "implementation_pattern": {
        "declaration": "declare global { namespace Express { interface Request { user?: User; sessionToken?: string; } } }",
        "export": "export {}; // Required for module augmentation",
        "usage_example": "req.user.id // Available after authentication"
      },
      "critical_notes": [
        "MUST use 'declare global' for Express augmentation",
        "MUST export {} for TypeScript module system",
        "MUST import User type from models",
        "Properties are optional (added by middleware)"
      ],
      "related_middleware": [
        "/backend/src/middleware/enhancedAuth.ts - Sets req.user and req.sessionToken",
        "/backend/src/middleware/auth.ts - Legacy auth (sets req.user only)"
      ]
    },
    "redis_client_interface": {
      "file": "/backend/src/config/redis.ts",
      "class": "SafeRedisClient",
      "created": "2025-10-14",
      "purpose": "Type-safe Redis client wrapper with fallback cache",
      "public_methods": {
        "get": "async get(key: string): Promise<string | null>",
        "set": "async set(key: string, value: string, ttl: number = 300): Promise<void>",
        "setex": "async setex(key: string, ttl: number, value: string): Promise<void> // Legacy alias",
        "del": "async del(pattern: string): Promise<void>",
        "keys": "async keys(pattern: string): Promise<string[]>",
        "isAvailable": "isAvailable(): boolean"
      },
      "helper_functions": {
        "getCache": "async function getCache(key: string): Promise<string | null>",
        "setCache": "async function setCache(key: string, value: string, ttl: number): Promise<void>",
        "delCache": "async function delCache(pattern: string): Promise<void>",
        "initRedis": "async function initRedis(): Promise<void>",
        "checkRedisHealth": "async function checkRedisHealth(): Promise<HealthStatus>"
      },
      "ioredis_compatibility": {
        "version": "5.x",
        "deprecated_properties": [
          "retryDelayOnFailover - Does not exist in ioredis v5"
        ],
        "correct_api_usage": [
          "Use client.set(key, value, 'EX', ttl) instead of client.setex()",
          "Use client.keys(pattern) for pattern matching",
          "connectTimeout, maxRetriesPerRequest, enableOfflineQueue are valid"
        ]
      },
      "critical_notes": [
        "QWEN error: Used non-existent retryDelayOnFailover property",
        "Always verify ioredis API compatibility",
        "Provide both modern and legacy API compatibility",
        "Export helper functions for backward compatibility"
      ]
    },
    "active_session_model": {
      "file": "/backend/src/models/ActiveSession.ts",
      "created": "2025-10-14",
      "purpose": "Session tracking model for concurrent login prevention",
      "properties": {
        "id": "string (UUID)",
        "userId": "string (UUID, foreign key to users)",
        "sessionToken": "string (JWT token, unique)",
        "deviceFingerprint": "string (optional)",
        "ipAddress": "INET (optional)",
        "userAgent": "string (optional)",
        "createdAt": "Date",
        "lastActivity": "Date",
        "expiresAt": "Date",
        "isActive": "boolean"
      },
      "instance_methods": {
        "isExpired": "(): boolean - Check if session expired",
        "invalidate": "(): Promise<void> - Mark session inactive",
        "updateActivity": "(): Promise<void> - Update lastActivity timestamp"
      },
      "sequelize_version": "v6",
      "critical_notes": [
        "QWEN error: Used .associate() method from Sequelize v5",
        "Sequelize v6: Associations defined in models/index.ts, NOT in model files",
        "DO NOT add static .associate() method to models",
        "Use Model.init() with sequelize instance"
      ],
      "correct_association_pattern": {
        "wrong": "ActiveSession.associate = (models) => { ... } // Sequelize v5 pattern",
        "correct": "// In models/index.ts: ActiveSession.belongsTo(User, { foreignKey: 'userId' })"
      }
    }
  },
  "qwen_typescript_incident_2025_10_14": {
    "status": "🚨 CRITICAL INCIDENT - Backend broken by QWEN",
    "errors_introduced": 18,
    "files_affected": [
      "/backend/src/config/redis.ts",
      "/backend/src/middleware/enhancedAuth.ts",
      "/backend/src/middleware/cacheMiddleware.ts",
      "/backend/src/models/ActiveSession.ts"
    ],
    "root_cause": "QWEN modified backend without dependency validation or TypeScript compilation",
    "specific_errors": {
      "missing_dependency": "ioredis package not installed",
      "missing_types": "Request.sessionToken type extension not created",
      "incorrect_api": "retryDelayOnFailover property does not exist in ioredis v5",
      "missing_imports": "Op from sequelize not imported",
      "missing_params": "NextFunction parameter missing in handlers",
      "obsolete_patterns": "Sequelize v5 .associate() used instead of v6 pattern"
    },
    "resolution": {
      "fixed_by": "Claude",
      "time_to_fix": "45 minutes",
      "actions_taken": [
        "npm install ioredis @types/ioredis",
        "Created /backend/src/types/express.d.ts for Request extensions",
        "Fixed ioredis API calls (removed retryDelayOnFailover, used correct set() API)",
        "Added Op import from sequelize",
        "Added NextFunction to all handler signatures",
        "Removed obsolete .associate() method from ActiveSession",
        "Added backward-compatible helper functions to redis.ts"
      ]
    },
    "prevention_rules": {
      "mandatory_for_qwen": [
        "npm install BEFORE using new libraries",
        "npx tsc --noEmit AFTER all code changes",
        "Create type definitions for all extensions",
        "Verify API compatibility with installed package versions",
        "Never modify auth/security files without Claude supervision"
      ],
      "validation_gates": [
        "Dependency installation gate (if package.json changed)",
        "TypeScript compilation gate (zero errors required)",
        "Import/export dependency verification"
      ]
    },
    "lessons_learned": [
      "QWEN cannot be trusted with backend TypeScript modifications",
      "All AI work must pass compilation validation before handoff",
      "Type extensions require separate .d.ts files with proper module augmentation",
      "Always verify package API compatibility (ioredis v4 vs v5)",
      "Sequelize v5 vs v6 patterns are incompatible"
    ]
  }
}