{
  "metadata": {
    "purpose": "TypeScript interface reference for GalloBets platform - PRODUCTION READY",
    "created": "2025-09-28",
    "updated": "2025-09-28",
    "version": "2.0",
    "status": "✅ PRODUCTION VERIFIED - 0 TypeScript errors",
    "critical_note": "VERIFIED against backend database models and production deployment"
  },

  "core_interfaces": {
    "Fight": {
      "file": "/frontend/src/types/index.ts",
      "required_properties": ["id", "eventId", "number", "redCorner", "blueCorner", "weight", "status"],
      "optional_properties": ["description", "notes", "initialOdds", "bettingStartTime", "bettingEndTime", "result", "startTime", "endTime"],
      "status_enum": ["upcoming", "betting", "live", "completed", "cancelled"],
      "database_mapping": {
        "redCorner": "red_corner (database)",
        "blueCorner": "blue_corner (database)",
        "bettingStartTime": "betting_start_time (database)"
      },
      "critical_note": "VERIFIED against backend/src/models/Fight.ts - properties match database schema"
    },
    "UserSubscription": {
      "file": "/frontend/src/types/index.ts",
      "required_properties": ["id", "plan", "status", "features"],
      "optional_properties": ["expiresAt", "manual_expires_at"],
      "status_enum": ["active", "cancelled", "expired", "pending"],
      "common_errors": [
        "Using 'type' instead of 'plan' property",
        "Missing 'id' property in form data",
        "Forgetting index signature for form compatibility"
      ]
    },
    "EventData": {
      "file": "/frontend/src/types/index.ts",
      "union_types": {
        "operator": "string | { username: string }",
        "status": "upcoming | live | completed | cancelled | betting | in-progress | scheduled"
      },
      "required_properties": ["id", "name", "status", "venue", "createdAt", "updatedAt", "venueId"],
      "recently_added": ["streamKey", "currentViewers", "activeBets", "completedFights", "totalFights", "totalPrizePool", "streamStatus", "fights"]
    },
    "Venue": {
      "file": "/frontend/src/types/index.ts",
      "required_properties": ["id", "name", "isActive", "createdAt", "updatedAt"],
      "optional_properties": ["address", "location", "description", "status", "images", "ownerId", "contactInfo"],
      "contactInfo_structure": {
        "phone": "string?",
        "email": "string?",
        "website": "string?",
        "address": "string?"
      }
    },
    "Gallera": {
      "file": "/frontend/src/types/index.ts",
      "required_properties": ["id", "name", "createdAt", "updatedAt"],
      "optional_properties": ["location", "description", "status", "specialties", "fightRecord", "images", "ownerId", "articles"],
      "specialties_union": "string | { breeds: unknown[]; trainingMethods: unknown[]; experience: string }",
      "common_errors": [
        "Assuming specialties is always string",
        "Missing fightRecord property access",
        "Forgetting articles array for gallera detail pages"
      ]
    }
  },

  "api_response_patterns": {
    "standard_response": {
      "structure": "ApiResponse<T>",
      "properties": ["success", "data", "error?", "code?", "message?"],
      "data_access": "response.data.{entityType}",
      "examples": {
        "venues": "response.data.venues",
        "galleras": "response.data.galleras",
        "users": "response.data.users"
      }
    },
    "pagination_response": {
      "additional_properties": ["total", "totalPages"],
      "access_pattern": "response.data.total"
    }
  },

  "common_ai_errors": {
    "union_type_access": {
      "wrong": "operator.username // unsafe",
      "correct": "typeof operator === 'object' && operator.username ? operator.username : operator"
    },
    "object_to_reactnode": {
      "wrong": "{winner: 'rooster1', method: 'ko'} // directly in JSX",
      "correct": "JSON.stringify(result) or custom rendering component"
    },
    "missing_imports": {
      "verify_before_import": ["Subscription -> UserSubscription", "BetType -> not exists", "StreamQuality -> not exists"],
      "check_exports": "grep 'export.*{TypeName}' /frontend/src/types/index.ts"
    }
  },

  "validation_commands": {
    "type_check": "npx tsc --noEmit",
    "build_check": "npm run build",
    "import_verification": "grep -r 'import.*{TypeName}' frontend/src/",
    "export_verification": "grep 'export.*{TypeName}' frontend/src/types/index.ts"
  },

  "ai_safety_protocol": {
    "before_modifications": [
      "Read existing interface definitions",
      "Verify all imports resolve",
      "Check union type usage patterns",
      "Confirm API response structure"
    ],
    "during_modifications": [
      "Never remove required properties",
      "Add type guards for union types",
      "Use index signatures for form compatibility",
      "Serialize objects before React rendering"
    ],
    "after_modifications": [
      "Run npx tsc --noEmit",
      "Test import/export resolution",
      "Verify no 'any' types introduced",
      "Check union type safety"
    ]
  },

  "gemini_cli_success_report": {
    "date": "2025-09-28",
    "status": "✅ TYPESCRIPT COMPILATION SUCCESS",
    "errors_reduced": "FROM 68 → TO 0",
    "critical_fixes_applied": [
      "Fight interface: redCorner/blueCorner (corrected from rooster_1/rooster_2)",
      "Union type safety for operator field",
      "API response type consistency",
      "Component prop type alignment"
    ],
    "production_readiness": "✅ CONFIRMED - Zero compilation errors"
  }
}