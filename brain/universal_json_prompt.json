{
  "universal_json_work_plan_prompt": {
    "purpose": "Universal prompt for generating detailed JSON work plans for AI coding tools",
    "target_tools": ["Claude Code", "Gemini CLI", "other AI coding assistants"],
    "optimization_focus": ["anti-hallucination", "context_injection", "tool_awareness", "TDD_methodology"],
    
    "prompt_template": "Crea un JSON de plan de trabajo optimizado para [Claude Code / Gemini CLI] para implementar: [DESCRIPCIÓN DE LA TAREA]\n\nANTES DE GENERAR EL JSON:\n1. **Consulta tu conocimiento del proyecto:** Revisa documentos PRD/SDD, brainstormings, arquitectura, código existente, y decisiones previas\n2. **Identifica dependencias:** Qué fases/componentes ya están implementados y cuáles son prerequisitos\n3. **Evalúa herramienta target:** \n   - Claude Code: Mejor para backend/workflows complejos, necesita MCPs verificados\n   - Gemini CLI: Mejor para frontend/componentes, necesita configuración modelo específica\n\nESTRUCTURA JSON OBLIGATORIA:\n**knowledge_verification:** \n- Documenta QUÉ conocimiento del proyecto consultaste\n- Lista componentes/fases ya implementados que afectan esta tarea\n- Identifica gaps de conocimiento que podrían causar errores\n\n**task_decomposition:**\n- Descompón en subtareas atómicas (máximo 2-4 horas cada una)\n- Cada subtarea debe tener criterio de éxito medible\n- Ordena por dependencias técnicas\n\n**purpose_and_requirements:**\n- Propósito específico (qué problema resuelve exactamente)\n- Requisitos funcionales (qué debe hacer)\n- Requisitos no-funcionales (performance, seguridad, etc.)\n\n**inputs_and_outputs:**\n- Parámetros de entrada con tipos, validaciones y ejemplos\n- Formato de salida esperado con estructura completa\n- Casos edge que debe manejar\n\n**constraints_and_restrictions:**\n- Limitaciones técnicas de la stack/arquitectura actual\n- Restricciones de negocio específicas del dominio\n- Compatibilidad con sistemas existentes\n\n**apis_and_integrations:**\n- APIs internas que debe usar (con endpoints específicos)\n- APIs externas requeridas (con auth y rate limits)\n- Esquema de base de datos afectado\n\n**test_driven_development:**\n- Tests unitarios que debe superar ANTES de implementar\n- Tests de integración con sistemas existentes\n- Datos mock específicos del dominio\n- Criterios de cobertura (mínimo 80%)\n\n**development_phases:**\n- Fase 1: Setup y tests (failing tests escritos)\n- Fase 2: Implementación mínima (tests passing)\n- Fase 3: Refinamiento e integración\n- Checkpoints de validación en cada fase\n\n**coding_conventions:**\n- Guías de estilo específicas del proyecto\n- Patrones arquitectónicos a seguir\n- Nomenclatura y estructura de archivos\n\n**context_injection:**\n- Referencias a código existente que debe seguir como patrón\n- Arquitectura/esquemas que debe respetar\n- Decisiones técnicas previas que impactan la implementación\n\n**tool_specific_config:**\nPara Claude Code:\n- MCPs requeridos y comandos de verificación\n- Archivos de brain/contexto que debe leer/actualizar\n- Comandos de validación pre-commit\n\nPara Gemini CLI:\n- Configuración modelo (temperatura, tokens, safety)\n- System instructions específicas del proyecto\n- Context files que debe cargar\n\n**risk_mitigation:**\n- Identificar puntos de fallo comunes de la herramienta target\n- Estrategias para evitar alucinaciones/código inconsistente\n- Plan de rollback si la implementación falla\n\n**success_criteria:**\n- Métricas objetivas para validar el éxito\n- Tests de aceptación con stakeholders\n- Integration checks con sistemas downstream\n\nVALIDACIONES FINALES:\n✅ ¿El JSON es lo suficientemente específico para eliminar ambigüedad?\n✅ ¿Incluye todo el contexto necesario del proyecto?\n✅ ¿Los tests están definidos ANTES que la implementación?\n✅ ¿Las tareas están descompuestas atómicamente?\n✅ ¿La configuración es específica para la herramienta target?",

    "key_principles": {
      "universal_applicability": "Works for any programming project/stack",
      "anti_hallucination": "Forces AI to document knowledge sources and identify gaps",
      "tool_awareness": "Optimizes for specific AI coding tool capabilities/limitations",
      "tdd_mandatory": "Tests must be specified before implementation",
      "atomic_decomposition": "Complex tasks broken into 2-4 hour chunks",
      "context_injection": "Leverages existing project patterns and decisions"
    },

    "usage_instructions": {
      "step_1": "Use prompt template with specific task description",
      "step_2": "AI generates comprehensive JSON work plan",
      "step_3": "Copy JSON to Claude Code/Gemini CLI with instruction: 'Follow this JSON work plan exactly'",
      "step_4": "AI tool implements following structured specification"
    },

    "optimization_benefits": [
      "Eliminates AI assumptions and hallucinations",
      "Ensures consistency with existing codebase",
      "Leverages tool-specific strengths",
      "Produces testable, maintainable code",
      "Scales across different projects and stacks"
    ]
  }
}