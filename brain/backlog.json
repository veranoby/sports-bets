{
  "metadata": {
    "purpose": "Granular task tracking and Vibe Coding session management",
    "updated": "2025-09-11",
    "version": "2.1",
    "cross_references": ["priorities_memory_index.json", "sdd_system.json"],
    "work_instructions_file": "/home/veranoby/sports-bets/claude-prompt.json",
    "database_source_of_truth": "/home/veranoby/sports-bets/backend/database-analysis/*.json",
    "prd_sdd_updates": "Architecture decision: Hybrid SSE (admin) + WebSocket (betting only) confirmed",
    "betting_websocket_rationale": "PAGO proposals, timeouts, and bidirectional interactions require WebSocket",
    "critical_blocker_identified": "backend/src/routes/sse.ts missing causing server startup failure",
    "manual_del_operador_completed": "Updated with real state, no Docker, Node Media Server alternatives",
    "rtmp_solution_confirmed": "Node Media Server (no Docker) for local development",
    "production_streaming_architecture_finalized": {
      "vps_rtmp_server": "$5-10/month VPS with nginx-rtmp for 480p streaming",
      "cdn_provider": "Bunny.net selected - $0.005/GB, $15-25/month for projected usage",
      "architecture_flow": "OBS Studio → VPS RTMP → Bunny.net CDN → 1000 viewers",
      "cost_analysis": "Total $25-35/month operational cost vs revenue projection",
      "implementation_timeline": "3-5 days for production deployment"
    },
    "database_optimization_critical_issues": {
      "duplicate_indexes_identified": "events.stream_key (4 duplicates), users.email (4 duplicates), subscriptions.kushki_subscription_id (3 duplicates)",
      "constraint_vs_index_issue": "Cannot DROP INDEX when backed by CONSTRAINT - must DROP CONSTRAINT instead",
      "performance_impact": "Memory waste + INSERT/UPDATE degradation under load",
      "immediate_action_required": "Execute SQL cleanup in Neon.tech editor before production launch"
    },
    "platform_enhancement_analysis_2025": {
      "status": "FULLY_IMPLEMENTED",
      "phase_name": "Comprehensive Platform Feature Analysis & Enhancement Planning",
      "analysis_completion_date": "2025-01-15",
      "implementation_completion_date": "2025-09-11", 
      "total_estimated_hours": 35,
      "total_actual_hours": 25,
      "comprehensive_analysis_completed": {
        "article_system": "✅ COMPLETED - Users can now create articles with approval workflow",
        "social_media_integration": "✅ COMPLETED - SocialShare component with Facebook/Twitter/WhatsApp integration",
        "email_verification": "✅ COMPLETED - Full SMTP service with verification tokens implemented",
        "visual_schema_inconsistency": "✅ COMPLETED - UserEntityCard component provides consistent layout for all entities",
        "live_event_tracking": "✅ COMPLETED - event_connections table with full analytics implemented"
      },
      "detailed_plan_created": {
        "claude_prompt_updated": "Comprehensive technical specifications in claude-prompt.json",
        "implementation_phases": [
          "✅ Phase 1: Visual normalization + email verification (COMPLETED 2025-09-11)",
          "✅ Phase 2: User articles + event tracking (COMPLETED 2025-09-11)", 
          "✅ Phase 3: Social media integration (COMPLETED 2025-09-11)"
        ]
      },
      "priority_features_identified": [
        "✅ P1: Email verification system (COMPLETED - security critical)",
        "✅ P1: Visual schema normalization (COMPLETED - UX consistency)", 
        "✅ P2: User article creation interface (COMPLETED - engagement)",
        "✅ P2: Live event connection tracking (COMPLETED - analytics)",
        "✅ P3: Social media sharing integration (COMPLETED - marketing)"
      ]
    },
    "critical_database_issue_identified": {
      "table": "users",
      "problem": "842 updates vs 6 inserts (140 updates/user)",
      "probable_cause": "Excessive login tracking or session refresh",
      "investigation_required": "Check auth middleware and login frequency",
      "impact": "Performance degradation and unnecessary database load",
      "status": "partially_resolved",
      "current_ratio": 93,
      "implementation_completed": "Auth middleware fixed, login endpoint preserved",
      "next_action": "Reset pg_stats for fresh measurement, verify no other update sources"
    },
    "roles_permissions_clarified": {
      "all_roles_base_capabilities": "ALL roles (user, venue, gallera) can view streams, manage wallet, create/accept bets",
      "additional_capabilities_by_role": {
        "venue": "Manage venue entities + create articles + request events",
        "gallera": "Manage gallera entities + create articles",
        "user": "Base capabilities only"
      },
      "final_confirmation": "All roles confirmed - venues CAN bet and create articles, no inconsistencies remain",
      "profile_editing_requirement": "Venues/galleras need dual editing: user.profile_info + entity table data"
    }
  },
  "phase_2b_completion": {
    "status": "completed",
    "completion_date": "2025-09-06",
    "critical_achievements": [
      "✅ P0 SSE blocker resolved - server startup working",
      "✅ All 5 SSE endpoints implemented and tested",
      "✅ TypeScript compilation issues fixed (ts-node cache)",
      "✅ Neon.tech PostgreSQL connection established",
      "✅ RTMP streaming server operational (ports 1935/8000)",
      "✅ SSE connection management with proper cleanup",
      "✅ Import errors corrected in streaming services"
    ],
    "critical_knowledge_captured": [
      "TypeScript compilation: 'npx tsc' must run from /backend only, not project root",
      "ts-node cache issues: Clear with 'rm -rf node_modules/.cache .ts-node'",
      "SSE architecture pattern established for scalable real-time updates",
      "Connection registry pattern for managing multiple SSE clients"
    ]
  },
  "phase_4_priorities": {
    "status": "active",
    "phase_name": "Database Performance Optimization + Production Streaming Infrastructure", 
    "total_estimated_hours": 14,
    "operator_admin_confirmed": "✅ YA IMPLEMENTADO - Operators use admin environment with role hierarchy. AdminSidebar filtering + Users.tsx data filtering + Articles access working correctly",
    "P0_global_settings_system": {
      "status": "completed",
      "priority": "P0",
      "description": "Admin settings interface to enable/disable wallets/betting vs environment variables",
      "estimated_hours": 8,
      "actual_hours": 8,
      "completion_date": "2025-09-08",
      "features": ["✅ system_settings table", "✅ admin interface", "✅ feature toggles", "✅ Redis caching"],
      "success_criteria_met": "5/5 - Testing report confirms full functionality"
    },
    "P0_database_performance_optimization": {
      "status": "active",
      "priority": "P0",
      "description": "Critical database optimizations for 1000+ user scaling",
      "estimated_hours": 3,
      "immediate_actions": [
        "Drop duplicate constraints/indexes in Neon.tech",
        "Implement connection pooling (max 20 connections)",
        "Add performance monitoring middleware",
        "Optimize EventService queries with eager loading"
      ],
      "performance_target": "Support 500+ concurrent users without degradation"
    },
    "P0_production_streaming_infrastructure": {
      "status": "planned",
      "priority": "P0",
      "description": "VPS + Bunny.net CDN production setup",
      "estimated_hours": 8,
      "requirements": ["VPS nginx-rtmp setup", "Bunny.net integration", "OBS Studio testing"]
    },
    "P1_settings_integration": {
      "status": "planned", 
      "priority": "P1",
      "description": "Integrate settings system with existing wallet/betting endpoints",
      "estimated_hours": 3
    }
  },
  "current_development_focus_2025": {
    "feature_enhancement_phase": {
      "priority": "P0",
      "status": "COMPLETED",
      "completion_date": "2025-09-11",
      "total_estimated_hours": 35,
      "total_actual_hours": 25,
      "focus_areas": {
        "user_experience_consistency": {
          "visual_normalization": "✅ COMPLETED - UserEntityCard component created and integrated",
          "estimated_hours": 3,
          "actual_hours": 2,
          "status": "COMPLETED",
          "completion_date": "2025-09-11"
        },
        "security_enhancement": {
          "email_verification": "✅ COMPLETED - Database schema + backend API + email service ready", 
          "estimated_hours": 6,
          "actual_hours": 4,
          "status": "COMPLETED",
          "completion_date": "2025-09-11"
        },
        "user_engagement": {
          "article_creation_interface": "✅ COMPLETED - Frontend components (CreateArticle.tsx, MyArticles.tsx) functional",
          "estimated_hours": 4,
          "actual_hours": 3,
          "status": "COMPLETED", 
          "completion_date": "2025-09-11"
        },
        "analytics_capability": {
          "live_event_tracking": "✅ COMPLETED - event_connections table + backend API + WebSocket tracking",
          "estimated_hours": 8,
          "actual_hours": 6,
          "status": "COMPLETED",
          "completion_date": "2025-09-11"
        },
        "marketing_integration": {
          "social_media_sharing": "✅ COMPLETED - SocialShare component + react-share integration functional",
          "estimated_hours": 16,
          "actual_hours": 10,
          "status": "COMPLETED",
          "completion_date": "2025-09-11"
        }
      }
    }
  },
  "legacy_active_tasks": {
    "P0_admin_environment": {
      "parent_priority": "admin_environment_completion",
      "status": "near_completion",
      "completion": 90,
      "subtasks": {
        "system_monitoring_refinement": {
          "status": "completed",
          "complexity": "medium",
          "estimated_hours": 4,
          "actual_hours": 3,
          "tool": "claude_code",
          "dependencies": [],
          "description": "Complete SystemMonitoring component with real-time data",
          "acceptance_criteria": [
            "✅ Real-time streaming metrics display with SSE",
            "✅ Database connection monitoring",
            "✅ Error log aggregation functional",
            "✅ Multi-service status tracking (API, DB, Streaming, Cache)",
            "✅ Automatic refresh intervals"
          ],
          "current_blockers": [],
          "completion_notes": "Exceeded expectations - enterprise-grade monitoring dashboard with SSE real-time updates"
        },
        "user_role_hierarchy_completion": {
          "status": "in_progress", 
          "complexity": "medium",
          "estimated_hours": 6,
          "tool": "gemini_cli",
          "dependencies": [],
          "description": "Finalize admin interface for user management across all roles",
          "acceptance_criteria": [
            "Admin can manage users, venues, galleras, operators",
            "Role-based permission enforcement",
            "Bulk user operations functional"
          ],
          "current_blockers": []
        }
      }
    },
    "P0_operator_integration": {
      "parent_priority": "operator_environment_integration",
      "status": "planned",
      "completion": 0,
      "subtasks": {
        "operator_permission_system": {
          "status": "planned",
          "complexity": "high",
          "estimated_hours": 8,
          "tool": "claude_code",
          "dependencies": ["user_role_hierarchy_completion"],
          "description": "Implement hierarchical permissions for operator role",
          "acceptance_criteria": [
            "Operators inherit limited admin capabilities",
            "Cannot manage admin users or operators",
            "Can manage events, venues, users within assigned scope",
            "Permission boundaries clearly enforced"
          ],
          "technical_approach": "Extend existing user/venue/gallera unification pattern",
          "current_blockers": ["Waiting for admin environment completion"]
        },
        "operator_dashboard_creation": {
          "status": "planned",
          "complexity": "medium", 
          "estimated_hours": 6,
          "tool": "gemini_cli",
          "dependencies": ["operator_permission_system"],
          "description": "Create operator-specific dashboard with limited admin tools",
          "acceptance_criteria": [
            "Operator sees only relevant admin sections",
            "Streamlined interface for daily operations",
            "Quick access to event management and streaming controls"
          ],
          "current_blockers": ["Waiting for permission system"]
        }
      }
    },
    "P0_transmission_workflow": {
      "parent_priority": "transmission_workflow_completion",
      "status": "near_completion",
      "completion": 85,
      "subtasks": {
        "rtmp_obs_integration_finalization": {
          "status": "completed",
          "complexity": "high",
          "estimated_hours": 10,
          "actual_hours": 8,
          "tool": "claude_code",
          "dependencies": [],
          "description": "Complete RTMP streaming with OBS configuration",
          "acceptance_criteria": [
            "✅ Stream key generation functional",
            "✅ OBS configuration automated with getOBSConfiguration",
            "✅ Stream quality controls working",
            "✅ Stream start/stop controls operational",
            "✅ RTMP server health monitoring",
            "✅ Stream analytics and viewer tracking",
            "✅ Automated stream lifecycle management"
          ],
          "current_progress": "Enterprise-grade RTMP service implemented with full analytics",
          "current_blockers": [],
          "completion_notes": "Significantly exceeded scope - includes viewer analytics, stream health monitoring, and advanced stream management"
        },
        "websocket_realtime_controls": {
        "status": "completed",
        "complexity": "medium",
        "estimated_hours": 6,
        "actual_hours": 5,
        "tool": "claude_code",
        "dependencies": [],
        "description": "Real-time streaming controls via WebSocket",
        "acceptance_criteria": [
        "✅ Live viewer count updates with 10s intervals",
        "✅ Stream status broadcasting to all namespaces",
        "✅ Performance monitoring real-time",
          "✅ Operator control responsiveness",
          "✅ Dual namespace architecture (/stream and /stream-control)",
          "✅ JWT authentication for both namespaces",
            "✅ Automated inactive viewer cleanup",
            "✅ Comprehensive analytics broadcasting"
          ],
          "current_progress": "Professional WebSocket implementation with dual namespaces and full feature set",
          "current_blockers": [],
          "completion_notes": "Production-ready implementation with authentication, analytics, and automated cleanup"
        },
        "viewer_authentication_system": {
          "status": "planned",
          "complexity": "medium",
          "estimated_hours": 5,
          "tool": "claude_code",
          "dependencies": ["subscription system integration"],
          "description": "Authenticate viewers based on subscription status",
          "acceptance_criteria": [
            "Subscription validation for stream access",
            "JWT tokens for stream authentication",
            "Graceful handling of expired subscriptions"
          ],
          "current_blockers": ["Need subscription system verification"]
        }
      }
    },
    "P0_deployment_preparation": {
      "parent_priority": "mvp_deployment_preparation",
      "status": "planned",
      "completion": 0,
      "subtasks": {
        "production_environment_setup": {
          "status": "planned",
          "complexity": "medium",
          "estimated_hours": 4,
          "tool": "manual_configuration",
          "dependencies": ["all_p0_tasks"],
          "description": "Configure production environment on Neon.tech + hosting",
          "acceptance_criteria": [
            "Environment variables configured",
            "Database migrations executed",
            "SSL certificates installed",
            "Performance monitoring enabled"
          ]
        },
        "end_to_end_testing": {
          "status": "planned",
          "complexity": "medium",
          "estimated_hours": 6,
          "tool": "manual_testing",
          "dependencies": ["production_environment_setup"],
          "description": "Complete system testing with real users",
          "acceptance_criteria": [
            "Full user registration → subscription → stream access flow tested",
            "Operator event creation → stream management tested",
            "Payment processing verified",
            "Performance under load validated"
          ]
        }
      }
    }
  },
  "vibe_coding_sessions": {
    "critical_streaming_workflow": {
      "architecture_decision_final": {
        "hybrid_approach_confirmed": "SSE for admin/notifications + WebSocket for betting only",
        "sse_usage": ["Admin interface real-time updates", "System notifications", "Event status changes", "Stream monitoring"],
        "websocket_usage": ["MINIMAL: Only PAGO/DOY proposals with bidirectional timeout handling"],
        "benefits_target": ["Simplified admin architecture", "Reduced memory leaks", "Better separation of concerns", "Polished betting UX", "Easier debugging"]
      },
      "admin_transmission_management": {
        "database_structure_analysis": {
          "events_table": "status enum: scheduled→in-progress→completed, operator_id, stream_key, stream_url",
          "fights_table": "status enum: upcoming→betting→live→completed, start_time, end_time, number (order)",
          "users_table": "role enum: admin, operator, venue, user, gallera"
        },
        "workflow_states": {
          "event_preparation": "Admin creates event (scheduled) → assigns operator → generates stream_key",
          "event_activation": "Event day → Admin/Operator enables (in-progress) → creates fights list",
          "transmission_cycle": "Start fight (live) → stream active → end fight (completed) → prepare next",
          "between_fights": "Interview sessions (TBD: part of transmission or separate tag)",
          "event_completion": "All fights completed → event status (completed)"
        },
        "technical_requirements": {
          "stream_management": "Seamless start/stop between fights without technical complexity",
          "notification_flow": "Real-time updates to all stakeholders without overwhelming",
          "operator_limitations": "Hierarchical permissions - operators cannot manage admin/operator users",
          "error_handling": "Graceful failure recovery during live transmissions"
        }
      }
    },
    "architecture_decisions_confirmed": {
    "hybrid_approach_finalized": {
    "sse_usage": "Admin interface + system notifications",
    "websocket_usage": "MINIMAL: Only PAGO/DOY proposals with bidirectional timeout handling",
    "rationale": "Betting requires bidirectional real-time for PAGO proposals, matching, timeouts"
    },
      "target_benefits": {
        "verify_sse_endpoints_work": true,
        "test_admin_sse_user_websocket_simultaneously": true,
        "no_breaking_changes": true,
        "simplified_architecture_reduces_bugs": true,
        "reduced_memory_leaks_admin_interface": true,
        "polished_betting_experience_users": true
      },
      "betting_system_requirements": {
        "pago_proposals_only": "ONLY WebSocket use: User B proposes PAGO/DOY → User A accepts/rejects (3min timeout)",
        "auto_matching_sse": "Auto-matching uses SSE notification, not WebSocket", 
        "wallet_manual_refresh": "Wallet operations use manual refresh, no WebSocket",
        "no_dynamic_suggestions": "Betting suggestions are click-based, no live typing",
        "no_chat_no_fight_rooms": "No chat system exists - WebSocket minimal usage only"
      }
    },
    "project_cleanup_requirements": {
      "deprecated_files_removal": {
        "backend_duplicates": [
          "backend/src/sockets/streamingSocket.js (keep .ts)",
          "backend/src/services/rtmpService.js (keep .ts)", 
          "backend/src/services/paymentService.js (keep .ts)",
          "backend/src/services/streamHealthCheck.js (keep .ts)"
        ],
        "frontend_unused": [
          "frontend/src/components/betting/BettingNotifications.tsx (feature disabled)"
        ],
        "consolidation_pattern": "Always keep TypeScript versions, remove JavaScript duplicates"
      },
      "architecture_cleanup": {
        "websocket_singleton_removal": "Remove complex WebSocket singleton patterns",
        "sse_migration": "Replace admin WebSocket usage with SSE",
        "polling_removal": "Remove any remaining polling mechanisms"
      }
    },
    "session_tracking": {
      "last_session": {
        "date": "2025-08-30",
        "tool": "claude_code",
        "focus": "Admin interface system monitoring",
        "duration_hours": 2,
        "outcomes": [
          "SystemMonitoring component structure created",
          "Real-time data flow architecture planned",
          "API endpoints for system status defined"
        ],
        "next_session_prep": "Focus on connecting real-time streaming metrics"
      },
      "upcoming_sessions": [
        {
          "planned_date": "2025-09-01",
          "tool": "claude_code", 
          "focus": "Complete RTMP integration and testing",
          "estimated_duration": 3,
          "prerequisites": ["Review current RTMPConfig component", "Test OBS connection"]
        },
        {
          "planned_date": "2025-09-02",
          "tool": "gemini_cli",
          "focus": "Operator permission system implementation",
          "estimated_duration": 4,
          "prerequisites": ["Admin environment completion verified"]
        }
      ]
    },
    "session_outcomes_log": [
      {
        "date": "2025-08-29",
        "tool": "gemini_cli", 
        "focus": "Database schema review and frontend integration",
        "achievements": [
          "Confirmed PostgreSQL schema complete",
          "Identified subscription system integration points",
          "User role hierarchy clarified"
        ],
        "challenges": [
          "Operator permission boundaries need definition",
          "Stream analytics integration complex"
        ],
        "follow_up_required": [
          "Define exact operator limitations",
          "Plan WebSocket integration approach"
        ]
      }
    ]
  },
  "coding_environment": {
    "primary_tools": {
      "claude_code": {
        "use_case": "Complex backend logic, API development, database integration",
        "current_focus": "RTMP streaming system completion",
        "coordination_with_brain": "Check sdd_system.json + priorities before sessions"
      },
      "gemini_cli": {
        "use_case": "Frontend components, UI interactions, React development",
        "current_focus": "Admin dashboard and operator interface",
        "coordination_with_brain": "Reference UI_UX.json for consistency"
      },
      "gemini_2.5_pro": {
        "use_case": "Architecture planning, JSON specifications, strategic decisions",
        "current_focus": "System design validation and planning sessions",
        "coordination_with_brain": "Use all brain files for comprehensive context"
      },
      "cursor_windsurf": {
        "use_case": "UI refinements, debugging, code review",
        "current_focus": "Interface polishing and user experience optimization",
        "coordination_with_brain": "Reference UI_UX.json + user feedback"
      }
    },
    "development_workflow": {
      "planning_phase": "Gemini 2.5 Pro + Claude with brain context → JSON specifications",
      "implementation_phase": "Claude Code (backend) + Gemini CLI (frontend)",
      "verification_phase": "Claude GitHub integration + manual browser testing",
      "refinement_phase": "Cursor/Windsurf for UI polish"
    }
  },
  "critical_context_notes": {
    "gemini_cli_failure_prevention": {
      "previous_failures": "JSONs too strategic vs operational, generic vs code-specific, architectural vs practical",
      "lessons_learned_sse_blocker": "Missing sse.ts file not specified in JSON instructions - need file-level specificity",
      "json_improvements_applied": {
        "file_specificity": "claude-prompt.json updated with exact file creation requirements",
        "import_verification": "Check all imports have corresponding files",
        "before_after_examples": "Show exact code changes needed"
      },
      "required_approach": [
        "File-level specificity - exactamente qué archivos crear",
        "Line-level context - dónde están los errores actuales",
        "Before/after examples - mostrar código actual vs esperado",
        "Tool-specific commands - comandos exactos para Gemini CLI"
      ]
    },
    "focus_areas": {
      "primary": "Admin environment (including operator)",
      "excluded": "User environment (venues, galleras) - NOT working on this yet",
      "critical_workflow": "Admin streaming transmission management with many subtleties"
    },
    "streaming_workflow_requirements": {
      "flow": [
        "1. Event created for specific day (status: scheduled)",
        "2. Event day arrives → enable event (status: in-progress)", 
        "3. Create fights in order (status: upcoming)",
        "4. Start fight → transmission (status: live)",
        "5. End fight → transmission (status: completed)",
        "6. Prepare next fight OR interview session",
        "7. Repeat until event complete"
      ],
      "interview_sessions": "Between fights - need to decide if part of transmission or separate tag",
      "user_experience": "Non-technical users need fluid, easy process",
      "notification_system": "Be extremely careful with notification implementation"
    },
    "crud_completion_status": "All CRUD elements should be finished (users, events, fights, articles, venues, galleras, ads)",
    "database_integrity": "backend/database-analysis/*.json is source of truth, not models/sequelize - report inconsistencies"
  },
  "technical_debt": {
    "high_priority": [
      {
        "item": "Database constraint optimization",
        "impact": "Performance degradation as users scale", 
        "estimated_fix_time": 4,
        "defer_until": "Post-MVP launch",
        "rationale": "Current performance acceptable for MVP user load"
      }
    ],
    "medium_priority": [
      {
        "item": "WebSocket connection pooling",
        "impact": "Resource usage optimization",
        "estimated_fix_time": 6,
        "defer_until": "After user base > 100 concurrent",
        "rationale": "Not blocking for initial user acquisition"
      }
    ],
    "low_priority": [
      {
        "item": "Code documentation completion", 
        "impact": "Developer experience",
        "estimated_fix_time": 8,
        "defer_until": "Team expansion or handoff needed",
        "rationale": "Solo development doesn't require extensive docs immediately"
      }
    ]
  },
  "implementation_guidelines": {
      "file_specificity_requirements": {
        "exact_files": "Always specify exact file paths to modify",
        "line_numbers": "Identify specific line ranges with current errors",
        "before_after": "Show actual current code vs expected replacement",
        "gemini_cli_commands": "Provide exact commands for tool execution"
      },
      "database_verification": {
        "primary_source": "backend/database-analysis/*.json files",
        "secondary_check": "Sequelize models (but don't trust 100%)",
        "inconsistency_reporting": "Always flag mismatches between analysis and models"
      }
    },
    "immediate_work_priorities": [
      "P0 CRITICAL: Database constraint cleanup (SQL execution)",
      "P0 CRITICAL: Backend connection pooling implementation",
      "P0 CRITICAL: Performance monitoring middleware",
      "P1: VPS + Bunny.net CDN setup for production streaming",
      "P1: WebSocket connection management optimization"
    ],
    "brain_update_triggers": {
    "task_status_changes": {
      "trigger": "When task moves between not_started → in_progress → completed",
      "action": "Update completion percentage and identify new blockers"
    },
    "session_completion": {
      "trigger": "After each Vibe Coding session",
      "action": "Log outcomes, challenges, and plan next session"
    },
    "blocker_identification": {
      "trigger": "When development blocked by external dependency",
      "action": "Update priorities_memory_index.json with timeline impact"
    },
    "architecture_decisions": {
      "trigger": "When technical approach changes during implementation",
      "action": "Update sdd_system.json with new decisions and rationale"
    },
    "scope_changes": {
      "trigger": "When task requirements expand or contract",
      "action": "Update prd_system.json and recalculate timeline impact"
    }
  }
}