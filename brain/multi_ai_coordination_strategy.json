{
  "📋_TABLE_OF_CONTENTS": {
    "critical_rules": "Lines 5-136 (READ FIRST - Non-negotiable)",
    "ai_responsibilities": "Lines 137-200",
    "execution_workflows": "Lines 201-280",
    "validation_gates": "Lines 281-330",
    "failure_recovery": "Lines 331-420",
    "session_logs": "Lines 421-550",
    "business_clarifications": "Lines 551-650"
  },

  "metadata": {
    "version": "3.0",
    "updated": "2025-10-30",
    "purpose": "Multi-AI coordination strategy - concise, scannable, critical info first",
    "note": "This file is READ-FIRST by all AIs. Keep it under 700 lines. Verbose sections moved to session_logs."
  },

  "🔴_MCP_ACTIVATION_FOR_ALL_AIS": {
    "severity": "CRITICAL",
    "when_to_activate": {
      "database_sql_work": {"mcps": ["--c7", "--context7"], "why": "PostgreSQL type system expertise"},
      "multi_step_backend": {"mcps": ["--seq", "--sequential"], "why": "Dependency planning"},
      "react_typescript": {"mcps": ["--c7", "--context7"], "why": "React + TypeScript patterns"},
      "responsive_design": {"mcps": ["--play", "--playwright"], "why": "UI validation"},
      "code_analysis": {"mcps": ["--seq", "--sequential"], "why": "Systematic decomposition"}
    },
    "incident_lesson": "2025-10-30: PostgreSQL error occurred without Context7. LESSON: MCPs aren't optional - they're mandatory for quality."
  },

  "🔴_BASIC_PROTOCOL_ALL_AIS": {
    "severity": "CRITICAL",
    "rule_1": "READ COMPLETELY - Don't assume context. If user says 'I deleted users except admin' → that's a FACT.",
    "rule_2": "NO FILE CREATION - Reports go in chat text only. Updates go to brain/ only. NEVER create .md files.",
    "rule_3": "BRAIN = SOURCE OF TRUTH - Update brain/ after every major task. Never scatter docs across root.",
    "rule_4": "EFFICIENCY NOT SPEED - Plan before executing. Trust user's explicit statements. Don't re-verify what they already confirmed.",
    "rule_5": "REPORT IN TEXT - Analysis happens in chat message area, not separate files."
  },

  "debugging_methodology_protocol": {
    "when": "User reports error with stack trace, or previous fix attempts failed",
    "responsible_ai": "Claude (root-cause-analyst mode recommended)",
    "step_1_analyze_not_fix": "PAUSE - Do NOT modify code yet. Ask: 'What assumptions could cause this? What conditions must be true?'",
    "step_2_identify_root_causes": "Walk through AT LEAST 2 possible causes based on stack trace and common misuse patterns",
    "step_3_validate_hypothesis": "Propose fix with specific test steps to validate (e.g., 'Add console.log(context) before failing line')",
    "step_4_avoid_repeats": "Never repeat previous failed attempts. Ask clarifying questions if uncertain.",
    "enforcement": "Claude checks root cause BEFORE proposing fix"
  },

  "ai_responsibilities": {
    "claude": {
      "primary": "Validation engine + architecture oversight",
      "mandatory": [
        "TypeScript compilation after each QWEN/Gemini session",
        "App.tsx routing verification for new pages",
        "Import/export dependency resolution",
        "Integration testing and gap filling",
        "Brain system updates with lessons learned"
      ]
    },
    "qwen": {
      "primary": "Backend API modifications (20-30 min sessions only)",
      "mandatory": [
        "ACTIVATE: --seq --sequential BEFORE backend work",
        "SIMULATE + CONFIRM protocol for all changes",
        "npm install BEFORE using new libraries",
        "npx tsc --noEmit AFTER all code changes",
        "git diff --name-only BEFORE commit to verify scope"
      ],
      "forbidden": [
        "Auth.ts, models, migrations without Claude approval",
        "Backend dependency adds without npm install",
        "Modifications outside [FILES_TO_MODIFY] list",
        "Code commits without TypeScript validation"
      ]
    },
    "gemini": {
      "primary": "React + TypeScript components (20-30 min sessions)",
      "mandatory": [
        "ACTIVATE: --c7 --context7 + optional --play BEFORE coding",
        "npx tsc --noEmit (ZERO errors required)",
        "npm run build (must succeed)",
        "No 'any' types - strict mode enforced",
        "Test responsive design at 375px, 768px, 1024px"
      ],
      "validation": "All work must pass TypeScript + build before handoff"
    }
  },

  "execution_workflows": {
    "simulate_y_confirmar_protocol": {
      "when": "QWEN about to modify backend (routes, models, middleware)",
      "step_1_simulate": "Describe exactly what you'll change: files, imports, dependencies, test commands",
      "step_2_confirm": "Verify against actual codebase: Does file exist? Are imports available? Will this break anything?",
      "step_3_document": "[SIMULATED] → [CONFIRMED] → [MODIFIED] in commit message",
      "failure": "If simulation reveals problem → REPORT it, do NOT attempt fix. Message: '[SIMULATION FAILED] Cannot [task]: Reason: [why] / Recommendation: [solution]'"
    },
    "checkpoint_system": {
      "when": "After any QWEN/Gemini session creates/modifies pages",
      "verify": [
        "App.tsx routes: All created pages have Route entries?",
        "AdminSidebar.tsx: All admin pages have sidebar entries?",
        "Build passes: npm run build succeeds?",
        "Commit has [WIRED] or [VERIFIED] tag?"
      ],
      "incident": "2025-10-18: Pages created but routes disappeared in intermediate commits"
    },
    "3_ai_pipeline": {
      "phase_1_qwen": "20-30 min: Backend API extensions with --seq --sequential",
      "phase_2_gemini": "20-30 min: Frontend UI with --c7 --context7",
      "phase_3_claude": "15-20 min: Integration validation + brain updates"
    }
  },

  "validation_gates": {
    "typescript_compilation": {
      "command": "npx tsc --noEmit",
      "required": "ZERO errors",
      "failure": "Stop session immediately, rollback, escalate to Claude"
    },
    "build_process": {
      "command": "npm run build",
      "required": "Successful completion in dist/",
      "failure": "Full session rollback required"
    },
    "dependency_check": {
      "command": "git diff HEAD package.json && npm install",
      "required": "All deps installed before using them",
      "enforcement": "Critical for QWEN (broke backend on 2025-10-14)"
    },
    "scope_validation": {
      "command": "git diff --name-only",
      "required": "ONLY files in [FILES_TO_MODIFY] changed",
      "failure": "REVERT scope violations before commit"
    }
  },

  "failure_recovery": {
    "unplanned_changes_analysis": {
      "detect": "git diff shows files outside AI task scope",
      "classify_as": {
        "error": "Syntax errors, broken builds, TODOs → REVERT immediately",
        "destructive": "Breaks APIs, changes types, schema mods → REVERT + investigate",
        "improvement": "ESLint formatting, code quality, performance → RETAIN with [APPROVED_IMPROVEMENT] tag"
      },
      "incident": "2025-10-19: QWEN modified Administrators.tsx (out of scope) with valid ESLint improvements. Should have analyzed before reverting."
    },
    "build_stability": {
      "typescript_fails": "Stop AI, rollback, document error patterns",
      "build_fails": "Full session rollback: git reset --hard HEAD~1",
      "imports_broken": "Fix paths immediately before proceeding"
    },
    "git_stash_safety": {
      "rule": "NEVER stash user's changes without explicit permission",
      "action": "ASK FIRST: 'About to stash [files]. OK?'",
      "document": "If stashing, record in brain/ with recovery command"
    }
  },

  "session_log_2025_10_30_critical_protocol": {
    "mistakes_made": [
      "Created 3 .md report files (violated 'no more .md' instruction)",
      "Ran verification queries when user already provided result (wasted tokens)",
      "Ignored explicit statement 'deleted all users except admin' and tried to verify",
      "Made assumptions instead of reading complete message"
    ],
    "lessons_learned": [
      "CRITICAL instructions = absolute rules, not suggestions",
      "Trust user's explicit statements - don't re-verify",
      "READ COMPLETELY before making any assumptions",
      "Efficiency = planning well, not executing fast"
    ],
    "solutions_implemented": [
      "Updated /home/veranoby/.claude/CLAUDE.md with BASIC_PROTOCOL + MCP_ACTIVATION_PROTOCOL",
      "Added 🔴_MCP_ACTIVATION_FOR_ALL_AIS and 🔴_BASIC_PROTOCOL_ALL_AIS to brain/",
      "Added debugging_methodology_protocol (this section)",
      "Condensed brain/ from 1369 lines → 650 lines for scannability"
    ]
  },

  "session_log_2025_10_19": {
    "issue": "User profile edit returns 403 Forbidden",
    "root_cause": "Frontend using PUT /users/:id (admin-only) instead of PUT /users/profile (self-edit)",
    "solution": "Added userAPI.updateProfile() method for self-edit workflow",
    "pattern_created": "Self-Edit with Read-Only Fields - use for future self-edit endpoints",
    "security_improvements": [
      "✅ Username/email cannot be modified after creation",
      "✅ Admin cannot modify profile_info via PUT /:id",
      "✅ Only role/isActive fields modifiable by admins"
    ]
  },

  "business_model_clarifications_2025_10_30": {
    "events_venues": {
      "definition": "Events are competitions held AT venues (stadiums). events.venue_id → user with role='venue'",
      "rule": "ONLY role='venue' users can host events. Not galleras, not regular users.",
      "semantic": "venue_id means 'physical location', not 'arbitrary owner'"
    },
    "articles_authors": {
      "definition": "Articles created BY users (admin/venue/gallera). articles.author_id → creator",
      "rule": "Regular users CANNOT create articles. Only admin/venue/gallera roles.",
      "deprecated": "articles.venue_id should be removed after data consolidation"
    },
    "principle": "Foreign keys represent SEMANTIC relationships, not just type compatibility. Verify the MEANING, not just the data types."
  },

  "qwen_scope_creep_prevention_2025_10_19": {
    "incident": "QWEN modified files outside scope (Administrators.tsx, Dashboard.tsx, News.tsx) with valid ESLint improvements",
    "root_cause": "[FILES_TO_MODIFY] lacked strong enforcement language",
    "prevention": [
      "Add to QWEN prompts: '🔴 NEVER modify any file NOT in [FILES_TO_MODIFY] list'",
      "Add: 'If you see opportunity to improve other files → STOP and document it, do NOT change'",
      "Add: 'BEFORE commit: Run git diff --name-only and verify ONLY approved files changed'",
      "Add: 'IF tempted → Report as [OUT_OF_SCOPE] and let Claude decide'"
    ]
  },

  "filter_logic_best_practices_2025_10_30": {
    "incident": "QWEN created Op.or filter conflict: search and subscription filters overwrote each other instead of combining",
    "root_cause": "Sequelize pattern: Assignment to where[Op.or] twice = second overwrites first",
    "lesson_for_all_ais": "When building MULTIPLE filter conditions in ORM queries, understand whether filters should be COMBINED or SEPARATE",
    "solution_pattern": {
      "problem": "❌ Multiple assignments to same operator key overwrites previous value",
      "code_example_wrong": "if (search) { where[Op.or] = [...search conditions]; } if (subscription) { where[Op.or] = [...subscription conditions]; } // Second overwrites first!",
      "solution_approach": "✅ Create conditions array and push each filter condition, then combine with Op.and at the end",
      "code_example_correct": "const conditions = []; if (search) { conditions.push({ [Op.or]: [...] }); } if (subscription) { conditions.push({ [Op.or]: [...] }); } if (conditions.length > 0) { where[Op.and] = conditions; }",
      "semantic_rule": "Op.and wraps multiple filter objects. Op.or applies WITHIN a single condition. Combining filters = Op.and(filter1, filter2, filter3)"
    },
    "prevention": [
      "When combining multiple independent filters (search + subscription + status + etc): use conditions[] pattern",
      "Each filter gets its own [Op.or] for internal options, but filters combine via [Op.and]",
      "BEFORE implementing: Sketch the filter logic: (search_term OR search_email) AND (subscription_free OR subscription_expired) AND ...",
      "TEST: Verify filters work INDEPENDENTLY and COMBINED. Don't test only one at a time.",
      "VALIDATE: Check git diff to see actual SQL pattern - should see Op.and wrapping Op.or conditions"
    ],
    "applicability": "Sequelize ORM, other ORMs with similar pattern logic",
    "tested_in_files": [
      "backend/src/routes/users.ts:67-140 (search + subscriptionType filters)",
      "backend/src/routes/venues.ts:72-145 (search + ownerSubscription filters)",
      "backend/src/routes/galleras.ts:49-122 (search + ownerSubscription filters)"
    ]
  },

  "claude_fase_1_2_3_consolidation_2025_10_30": {
    "status": "🔴 INCOMPLETE VERIFICATION - Implemented but NOT fully tested in live environment",
    "phase_1_editvenueegalleramodal": {
      "change": "Removed venuesAPI.update/create, gallerasAPI.update/create calls",
      "new_approach": "usersAPI.updateProfile() with mapped entity fields → User.profileInfo",
      "files": ["frontend/src/components/admin/EditVenueGalleraModal.tsx:125-196"],
      "verification_status": "✅ Static analysis passed (no removed calls remain)",
      "potential_issues": [
        "⚠️ NOT TESTED: usersAPI.updateProfile() signature - verify accepts {profileInfo: {...}}",
        "⚠️ NOT TESTED: Entity field mapping - verify venueName/galleraName fields render correctly in edit modal"
      ]
    },
    "phase_2_createusermodal": {
      "change": "Extended with role-conditional business fields (venue/gallera)",
      "new_features": [
        "venueName, venueLocation, venueDescription, venueEmail, venueWebsite",
        "galleraName, galleraLocation, galleraDescription, galleraEmail, galleraWebsite, galleraSpecialties, galleraActiveRoosters"
      ],
      "files": ["frontend/src/components/admin/CreateUserModal.tsx:9-479"],
      "verification_status": "✅ TypeScript compilation passed, conditional rendering logic correct",
      "potential_issues": [
        "⚠️ NOT TESTED: handleChange array handling for galleraSpecialties/galleraActiveRoosters",
        "⚠️ NOT TESTED: useToast hook - check if imported correctly (line 31 uses addToast but hook may export differently)",
        "⚠️ NOT TESTED: Form submission - verify all fields sent to backend correctly"
      ]
    },
    "phase_3_image_validation": {
      "change": "Added backend validation for image array sizes",
      "rules": ["Galleras: max 3 images", "Venues: max 2 images"],
      "files": ["backend/src/routes/users.ts:295-310"],
      "verification_status": "✅ Code pattern correct, validation placed before save",
      "potential_issues": [
        "⚠️ NOT TESTED: Frontend image upload - verify client respects limits or server rejection graceful",
        "⚠️ NOT TESTED: Error message formatting - verify 'Maximum X images allowed' matches frontend error handling"
      ]
    },
    "testing_required_before_production": [
      "1. Create venue user in admin → Verify all venueName fields save correctly",
      "2. Create gallera user in admin → Verify galleraSpecialties/galleraActiveRoosters persist",
      "3. Edit venue/gallera in modal → Verify Entity Info tab updates saved correctly",
      "4. Upload 4 images for gallera → Verify server rejects with 400 BadRequest",
      "5. Upload 3 images for venue → Verify server rejects with 400 BadRequest (max=2)"
    ],
    "verification_approach": "Static analysis and grep-based only. NO runtime testing performed. User should test in admin environment."
  },

  "next_sessions": {
    "claude_task": "🔴 LIVE TESTING REQUIRED - Test FASE 1,2,3 in admin environment before go-live",
    "gemini_task": "Admin filters frontend UI (4 × 30 min sessions, --c7 --context7 required)",
    "testing_focus": "Verify user creation workflow: create→edit→save with complete business info",
    "backend_status": "✅ COMPLETE - Op.or filters + image validation ready. Ready for frontend testing."
  }
}
