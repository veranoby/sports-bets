{
  "📋_TABLE_OF_CONTENTS": {
    "critical_rules": "Lines 5-136 (READ FIRST - Non-negotiable)",
    "ai_responsibilities": "Lines 137-200",
    "execution_workflows": "Lines 201-280",
    "validation_gates": "Lines 281-330",
    "failure_recovery": "Lines 331-420",
    "recommended_practices": "Lines 421-550",
    "business_clarifications": "Lines 551-650"
  },

  "metadata": {
    "version": "4.0",
    "updated": "2025-11-01",
    "purpose": "Multi-AI coordination strategy - concise, scannable, critical info first",
    "note": "This file is READ-FIRST by all AIs. Keep it under 700 lines. Session logs moved to temporary files.",
    "prompt_files_location": "PROJECT ROOT (claude-prompt.json, qwen-prompt.json, gemini-prompt.json) - moved from brain/ for easier AI access"
  },

  "🔴_MCP_ACTIVATION_FOR_ALL_AIS": {
    "severity": "CRITICAL",
    "when_to_activate": {
      "database_sql_work": {"mcps": ["--c7", "--context7"], "why": "PostgreSQL type system expertise"},
      "multi_step_backend": {"mcps": ["--seq", "--sequential"], "why": "Dependency planning"},
      "react_typescript": {"mcps": ["--c7", "--context7"], "why": "React + TypeScript patterns"},
      "responsive_design": {"mcps": ["--play", "--playwright"], "why": "UI validation"},
      "code_analysis": {"mcps": ["--seq", "--sequential"], "why": "Systematic decomposition"}
    },
    "incident_lesson": "2025-10-30: PostgreSQL error occurred without Context7. LESSON: MCPs aren't optional - they're mandatory for quality."
  },

  "🔴_MODEL_AWARENESS_PROTOCOL": {
    "severity": "CRITICAL",
    "rule": "Every AI session MUST start by declaring model and task appropriateness",
    "haiku_4_5_limitations": {
      "appropriate_tasks": ["Single-file edits <50 lines", "Code formatting", "Pre-defined test commands", "Simple git ops", "File reading"],
      "forbidden_tasks": ["Multi-file implementations", "Architecture decisions", "Debugging", "Database work", "Integration", "Agent/MCP usage"],
      "mandatory_response_if_inappropriate": "This task requires Sonnet/Opus. Reason: [multi-file|architecture|debugging|database|integration]. Please switch to appropriate model.",
      "assumption_blockers": {
        "forbidden_phrases": ["probably works", "should be fine", "typically"],
        "required_phrases": ["Reading [file] to verify...", "Confirmed by [evidence]..."]
      },
      "loop_prevention": {
        "same_file_twice": "STOP immediately and report to user",
        "command_fails": "STOP, report to user, do NOT retry",
        "uncertainty": "ASK user, do NOT assume"
      }
    },
    "sonnet_opus_capabilities": {
      "can_handle": ["All complexity", "Multi-step workflows", "Agent coordination", "MCP usage", "Meta-cognition"],
      "start_protocol": ["Read ~/.claude/CLAUDE.md", "Read project CLAUDE.md", "Read brain/multi_ai_coordination_strategy.json", "Classify task", "Check MCP table", "Activate agents/MCPs", "Document activation", "Proceed"]
    },
    "enforcement": "If Haiku receives forbidden task → Must refuse and recommend Sonnet/Opus"
  },

  "🔴_BASIC_PROTOCOL_ALL_AIS": {
    "severity": "CRITICAL",
    "rule_1": "READ COMPLETELY - Don't assume context. If user says 'I deleted users except admin' → that's a FACT.",
    "rule_2": "NO FILE CREATION - Reports go in chat text only. Updates go to brain/ only. NEVER create .md files.",
    "rule_3": "BRAIN = SOURCE OF TRUTH - Update brain/ after every major task. Never scatter docs across root.",
    "rule_4": "EFFICIENCY NOT SPEED - Plan before executing. Trust user's explicit statements. Don't re-verify what they already confirmed.",
    "rule_5": "REPORT IN TEXT - Analysis happens in chat message area, not separate files."
  },

  "debugging_methodology_protocol": {
    "when": "User reports error with stack trace, or previous fix attempts failed",
    "responsible_ai": "Claude (root-cause-analyst mode recommended)",
    "step_1_analyze_not_fix": "PAUSE - Do NOT modify code yet. Ask: 'What assumptions could cause this? What conditions must be true?'",
    "step_2_identify_root_causes": "Walk through AT LEAST 2 possible causes based on stack trace and common misuse patterns",
    "step_3_validate_hypothesis": "Propose fix with specific test steps to validate (e.g., 'Add console.log(context) before failing line')",
    "step_4_avoid_repeats": "Never repeat previous failed attempts. Ask clarifying questions if uncertain.",
    "enforcement": "Claude checks root cause BEFORE proposing fix"
  },

  "ai_responsibilities": {
    "claude": {
      "primary": "Validation engine + architecture oversight",
      "recommended_model": "Sonnet 4.5 (full capabilities) or Opus 4 (maximum complexity)",
      "forbidden_model": "Haiku 4.5 (insufficient for validation/architecture tasks)",
      "mandatory": [
        "Declare model at session start: 'Model: claude-sonnet-4-5'",
        "TypeScript compilation after each QWEN/Gemini session",
        "App.tsx routing verification for new pages",
        "Import/export dependency resolution",
        "Integration testing and gap filling",
        "Brain system updates with lessons learned"
      ]
    },
    "qwen": {
      "primary": "Backend API modifications (20-30 min sessions only)",
      "recommended_model": "QWEN2.5-Coder 32B Instruct (NOT smaller variants)",
      "model_verification": "If using smaller QWEN → limit to single-file edits only",
      "mandatory": [
        "Declare model at session start: 'Model: qwen2.5-coder-32b-instruct'",
        "ACTIVATE: --seq --sequential BEFORE backend work",
        "SIMULATE + CONFIRM protocol for all changes",
        "npm install BEFORE using new libraries",
        "npx tsc --noEmit AFTER all code changes",
        "git diff --name-only BEFORE commit to verify scope"
      ],
      "forbidden": [
        "Auth.ts, models, migrations without Claude approval",
        "Backend dependency adds without npm install",
        "Modifications outside [FILES_TO_MODIFY] list",
        "Code commits without TypeScript validation"
      ]
    },
    "gemini": {
      "primary": "React + TypeScript components (20-30 min sessions)",
      "recommended_model": "Gemini 2.0 Flash Thinking (NOT Gemini 1.5 Flash)",
      "model_verification": "If using older Gemini → require Context7 MCP activation",
      "mandatory": [
        "Declare model at session start: 'Model: gemini-2.0-flash-thinking-exp'",
        "ACTIVATE: --c7 --context7 + optional --play BEFORE coding",
        "npx tsc --noEmit (ZERO errors required)",
        "npm run build (must succeed)",
        "No 'any' types - strict mode enforced",
        "Test responsive design at 375px, 768px, 1024px"
      ],
      "validation": "All work must pass TypeScript + build before handoff"
    }
  },

  "execution_workflows": {
    "simulate_y_confirmar_protocol": {
      "when": "QWEN about to modify backend (routes, models, middleware)",
      "step_1_simulate": "Describe exactly what you'll change: files, imports, dependencies, test commands",
      "step_2_confirm": "Verify against actual codebase: Does file exist? Are imports available? Will this break anything?",
      "step_3_document": "[SIMULATED] → [CONFIRMED] → [MODIFIED] in commit message",
      "failure": "If simulation reveals problem → REPORT it, do NOT attempt fix. Message: '[SIMULATION FAILED] Cannot [task]: Reason: [why] / Recommendation: [solution]'"
    },
    "checkpoint_system": {
      "when": "After any QWEN/Gemini session creates/modifies pages",
      "verify": [
        "App.tsx routes: All created pages have Route entries?",
        "AdminSidebar.tsx: All admin pages have sidebar entries?",
        "Build passes: npm run build succeeds?",
        "Commit has [WIRED] or [VERIFIED] tag?"
      ],
      "incident": "2025-10-18: Pages created but routes disappeared in intermediate commits"
    },
    "3_ai_pipeline": {
      "phase_1_qwen": "20-30 min: Backend API extensions with --seq --sequential",
      "phase_2_gemini": "20-30 min: Frontend UI with --c7 --context7",
      "phase_3_claude": "15-20 min: Integration validation + brain updates"
    }
  },

  "validation_gates": {
    "model_appropriateness": {
      "check": "Is model appropriate for task complexity?",
      "haiku_check": "If Haiku AND task in forbidden list → STOP and recommend Sonnet",
      "enforcement": "First action of EVERY session: Model declaration + appropriateness verification",
      "failure": "Session cannot proceed - recommend model switch to user"
    },
    "flag_activation_verification": {
      "when": "Before ANY code modification or database work",
      "required_declarations": [
        "Database/SQL work → Must show: 'Activating --c7 --context7'",
        "Multi-step backend → Must show: 'Activating --seq --sequential'",
        "React/TypeScript → Must show: 'Activating --c7 --context7'",
        "UI testing → Must show: 'Activating --play --playwright'"
      ],
      "verification_method": "AI must OUTPUT activation statement BEFORE starting work",
      "enforcement": "If AI starts work without declaring flags → INVALID SESSION",
      "user_detection": "If no flag declaration in first 3 messages → interrupt and ask AI to restart properly"
    },
    "typescript_compilation": {
      "command": "npx tsc --noEmit",
      "required": "ZERO errors",
      "failure": "Stop session immediately, rollback, escalate to Claude"
    },
    "build_process": {
      "command": "npm run build",
      "required": "Successful completion in dist/",
      "failure": "Full session rollback required"
    },
    "dependency_check": {
      "command": "git diff HEAD package.json && npm install",
      "required": "All deps installed before using them",
      "enforcement": "Critical for QWEN (broke backend on 2025-10-14)"
    },
    "scope_validation": {
      "command": "git diff --name-only",
      "required": "ONLY files in [FILES_TO_MODIFY] changed",
      "failure": "REVERT scope violations before commit"
    }
  },

  "failure_recovery": {
    "unplanned_changes_analysis": {
      "detect": "git diff shows files outside AI task scope",
      "classify_as": {
        "error": "Syntax errors, broken builds, TODOs → REVERT immediately",
        "destructive": "Breaks APIs, changes types, schema mods → REVERT + investigate",
        "improvement": "ESLint formatting, code quality, performance → RETAIN with [APPROVED_IMPROVEMENT] tag"
      }
    },
    "build_stability": {
      "typescript_fails": "Stop AI, rollback, document error patterns",
      "build_fails": "Full session rollback: git reset --hard HEAD~1",
      "imports_broken": "Fix paths immediately before proceeding"
    },
    "git_stash_safety": {
      "rule": "NEVER stash user's changes without explicit permission",
      "action": "ASK FIRST: 'About to stash [files]. OK?'",
      "document": "If stashing, record in brain/ with recovery command"
    }
  },

  "recommended_practices_optimization": {
    "strategies_for_perfect_json_work_plans": {
      "comprehensive_planning": [
        "Include all required file reads before starting work",
        "Identify dependencies and potential conflicts",
        "Define success criteria clearly",
        "List validation steps before implementation",
        "Plan for error handling and edge cases"
      ],
      "structured_formatting": [
        "Use consistent JSON structure with clear metadata",
        "Include file paths, required changes, and expected outcomes",
        "Document test commands and validation gates",
        "Provide fallback plans if primary approaches fail",
        "Specify rollback procedures for safety"
      ],
      "error_prevention": [
        "Pre-verification of all assumptions with codebase analysis",
        "Type compatibility checks before implementation",
        "Scope validation to prevent unwanted side effects",
        "Dependency mapping to understand impact of changes",
        "Mandatory TypeScript compilation after changes"
      ],
      "quality_assurance": [
        "Zero 'any' types enforcement in TypeScript projects",
        "Consistent pattern application across similar components",
        "Integration testing with existing codebase",
        "Performance impact analysis for database changes",
        "Security validation for user-facing features"
      ]
    },
    "json_plan_template": {
      "metadata": {
        "task_name": "Brief, descriptive task name",
        "complexity": "LOW/MEDIUM/HIGH",
        "estimated_time": "Minutes",
        "session_model_required": "Specific model requirement",
        "git_branch": "Target branch for work"
      },
      "critical_protocols": {
        "session_start_declaration": "Model declaration with task type and flags",
        "mcp_activation_mandatory": "Required MCPs for the specific task type",
        "simulate_confirm_protocol": "Explicit simulation and confirmation steps",
        "no_file_creation": "Restrictions on what can be created vs modified",
        "infinite_loop_prevention": "Prevention mechanisms for common loops"
      },
      "reference_files_read_first": [
        "List of required files to read before implementation",
        "Documentation that provides context",
        "Current implementations for consistency"
      ],
      "step_by_step_implementation": {
        "step_number": {
          "action": "Specific action to take",
          "file": "Target file for the action",
          "purpose": "Why this step is needed",
          "simulate": "What will be done in simulation phase",
          "confirm_before_creating": "What to verify before proceeding",
          "validate_after_creation": "How to validate the change"
        }
      },
      "success_criteria": [
        "Zero TypeScript errors",
        "Build process succeeds",
        "No 'any' types introduced",
        "Files modified only as specified",
        "All features implemented correctly"
      ],
      "error_handling": {
        "typescript_errors": "Stop immediately if compilation fails",
        "build_errors": "Do not commit if build fails",
        "infinite_loop_detection": "Stop if same file edited multiple times"
      }
    },
    "general_lessons_learned": {
      "pre_implementation_validation": {
        "description": "Always validate assumptions and read relevant files BEFORE implementation",
        "strategies": [
          "Read type/interface definitions before implementing functions",
          "Verify API signatures exist before calling them",
          "Check import paths and dependencies before starting work",
          "Understand the full scope of changes to prevent incomplete implementations"
        ]
      },
      "incremental_development": {
        "description": "Break complex tasks into smaller, verifiable steps",
        "strategies": [
          "Implement and test one feature at a time",
          "Use checkpoints to validate progress",
          "Verify each step before moving to the next",
          "Roll back immediately if any step fails validation"
        ]
      },
      "consistency_enforcement": {
        "description": "Maintain consistent patterns across the codebase",
        "strategies": [
          "Follow established naming conventions",
          "Use consistent component structures and props",
          "Apply uniform error handling patterns",
          "Maintain consistent data flow and state management"
        ]
      },
      "error_prevention_patterns": {
        "description": "Proactive strategies to prevent common implementation errors",
        "strategies": [
          "Type safety: Avoid 'any' types, use explicit interfaces",
          "Null safety: Use optional chaining and null checks",
          "API validation: Verify endpoints exist before implementation",
          "Dependency checking: Ensure all imports are available before use"
        ]
      }
    }
  },

  "business_model_clarifications_2025_10_30": {
    "events_venues": {
      "definition": "Events are competitions held AT venues (stadiums). events.venue_id → user with role='venue'",
      "rule": "ONLY role='venue' users can host events. Not galleras, not regular users.",
      "semantic": "venue_id means 'physical location', not 'arbitrary owner'"
    },
    "articles_authors": {
      "definition": "Articles created BY users (admin/venue/gallera). articles.author_id → creator",
      "rule": "Regular users CANNOT create articles. Only admin/venue/gallera roles.",
      "deprecated": "articles.venue_id should be removed after data consolidation"
    },
    "principle": "Foreign keys represent SEMANTIC relationships, not just type compatibility. Verify the MEANING, not just the data types."
  },

  "qwen_scope_creep_prevention_2025_10_19": {
    "incident": "QWEN modified files outside scope (Administrators.tsx, Dashboard.tsx, News.tsx) with valid ESLint improvements",
    "root_cause": "[FILES_TO_MODIFY] lacked strong enforcement language",
    "prevention": [
      "Add to QWEN prompts: '🔴 NEVER modify any file NOT in [FILES_TO_MODIFY] list'",
      "Add: 'If you see opportunity to improve other files → STOP and document it, do NOT change'",
      "Add: 'BEFORE commit: Run git diff --name-only and verify ONLY approved files changed'",
      "Add: 'IF tempted → Report as [OUT_OF_SCOPE] and let Claude decide'"
    ]
  },

  "filter_logic_best_practices_2025_10_30": {
    "incident": "QWEN created Op.or filter conflict: search and subscription filters overwrote each other instead of combining",
    "root_cause": "Sequelize pattern: Assignment to where[Op.or] twice = second overwrites first",
    "lesson_for_all_ais": "When building MULTIPLE filter conditions in ORM queries, understand whether filters should be COMBINED or SEPARATE",
    "solution_pattern": {
      "problem": "❌ Multiple assignments to same operator key overwrites previous value",
      "code_example_wrong": "if (search) { where[Op.or] = [...search conditions]; } if (subscription) { where[Op.or] = [...subscription conditions]; } // Second overwrites first!",
      "solution_approach": "✅ Create conditions array and push each filter condition, then combine with Op.and at the end",
      "code_example_correct": "const conditions = []; if (search) { conditions.push({ [Op.or]: [...] }); } if (subscription) { conditions.push({ [Op.or]: [...] }); } if (conditions.length > 0) { where[Op.and] = conditions; }",
      "semantic_rule": "Op.and wraps multiple filter objects. Op.or applies WITHIN a single condition. Combining filters = Op.and(filter1, filter2, filter3)"
    },
    "prevention": [
      "When combining multiple independent filters (search + subscription + status + etc): use conditions[] pattern",
      "Each filter gets its own [Op.or] for internal options, but filters combine via [Op.and]",
      "BEFORE implementing: Sketch the filter logic: (search_term OR search_email) AND (subscription_free OR subscription_expired) AND ...",
      "TEST: Verify filters work INDEPENDENTLY and COMBINED. Don't test only one at a time.",
      "VALIDATE: Check git diff to see actual SQL pattern - should see Op.and wrapping Op.or conditions"
    ],
    "applicability": "Sequelize ORM, other ORMs with similar pattern logic",
    "tested_in_files": [
      "backend/src/routes/users.ts:67-140 (search + subscriptionType filters)",
      "backend/src/routes/venues.ts:72-145 (search + ownerSubscription filters)",
      "backend/src/routes/galleras.ts:49-122 (search + ownerSubscription filters)"
    ]
  },

  "next_sessions": {
    "protocol_enforcement": "All AIs must follow mandatory_reads_at_start, exit_infinite_loops_protocol, AND model_awareness_protocol",
    "model_verification": "CRITICAL: All AIs must declare model in first message. User should interrupt if missing.",
    "coordination_strategy": "Sonnet coordinates, delegates to QWEN (PRIMARY EXECUTOR: backend+frontend) / Gemini (secondary) / Haiku (simple tasks only)",
    "prompt_files_location": "Read [ai]-prompt.json from PROJECT ROOT (not brain/) for task-specific instructions"
  }
}