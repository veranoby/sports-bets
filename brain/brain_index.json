{
  "metadata": {
    "purpose": "Navigation map and comprehensive guide for GalloBets brain system",
    "project_name": "GalloBets - Professional Cockfighting Streaming Platform",
    "created": "2025-08-31",
    "updated": "2025-09-21",
    "version": "2.0"
  },
  
  "project_context": {
    "current_phase": "MVP Development Sprint - Day 1 of 15",
    "deadline": "September 21, 2025 - MVP Launch",
    "primary_stakeholder": "veranoby (solo founder/developer)",
    "business_model": "Subscription streaming + P2P betting platform",
    "tech_stack": {
      "database": "PostgreSQL on Neon.tech",
      "backend": "Node.js + Express + Sequelize + TypeScript",
      "frontend": "React + TypeScript + Tailwind CSS",
      "real_time": "SSE (admin) + Minimal WebSocket (betting)",
      "streaming": "RTMP + OBS Studio + HLS",
      "payments": "Kushki"
    },
    "critical_status": {
      "database_performance": "CRITICAL: 1-3s queries need optimization",
      "typescript_errors": "370+ @typescript-eslint/no-explicit-any",
      "qwen_incidents": "Destroyed Profile.tsx and authentication",
      "timeline_pressure": "15 days to MVP launch"
    }
  },
  
  "file_structure": {
    "coordination_files": {
      "multi_ai_coordination_strategy.json": {
        "purpose": "Comprehensive multi-AI coordination framework",
        "importance": "CRITICAL",
        "update_frequency": "When AI coordination changes",
        "primary_use": "Understanding AI strengths, weaknesses, and optimal workflows"
      },
      "multi_ai_decision_matrix.json": {
        "purpose": "Task routing decision tree for AI selection",
        "importance": "CRITICAL",
        "update_frequency": "When new task patterns identified",
        "primary_use": "Determining which AI should handle specific tasks"
      },
      "gemini_optimization_patterns.json": {
        "purpose": "Gemini-specific React/TypeScript patterns",
        "importance": "HIGH",
        "update_frequency": "When new patterns discovered",
        "primary_use": "Gemini implementation excellence patterns"
      }
    },
    
    "technical_files": {
      "sdd_system.json": {
        "purpose": "System design and technical architecture",
        "importance": "CRITICAL",
        "update_frequency": "When architecture decisions change",
        "primary_use": "Technical consistency and architecture reference"
      },
      "prd_system.json": {
        "purpose": "Product requirements and business context",
        "importance": "HIGH",
        "update_frequency": "When business requirements change",
        "primary_use": "Feature specifications and business alignment"
      },
      "backlog.json": {
        "purpose": "Task tracking and 15-day timeline management",
        "importance": "CRITICAL",
        "update_frequency": "Daily during MVP sprint",
        "primary_use": "Development coordination and progress tracking"
      }
    },
    
    "instruction_files": {
      "AI_UNIVERSAL_INSTRUCTIONS.json": {
        "purpose": "Universal safety protocols for ANY AI",
        "importance": "CRITICAL",
        "update_frequency": "When incidents occur or protocols change",
        "primary_use": "MANDATORY first read for any AI starting work"
      },
      "../CLAUDE.md": {
        "purpose": "Claude-specific development instructions",
        "importance": "HIGH",
        "primary_use": "Claude architecture and validation patterns"
      },
      "../GEMINI.md": {
        "purpose": "Gemini React/TypeScript implementation guide",
        "importance": "HIGH",
        "primary_use": "Gemini UI component patterns and SSE integration"
      },
      "../QWEN.md": {
        "purpose": "QWEN safety protocols and restrictions",
        "importance": "CRITICAL",
        "primary_use": "Preventing QWEN destructive behavior"
      }
    },
    
    "legacy_files": {
      "brain_index.json": {
        "purpose": "This file - Brain system navigation",
        "note": "You are reading this file"
      },
      "guide_for_using_the_system.json": {
        "purpose": "Operational procedures",
        "status": "Updated with new coordination patterns and JSON work templates"
      },
      "UI_UX.json": {
        "purpose": "Design decisions",
        "status": "Active for UI consistency"
      },
      "development_lessons_master.md": {
        "purpose": "Historical lessons learned",
        "status": "Reference for patterns"
      }
    }
  },
  
  "query_patterns": {
    "starting_new_task": {
      "required_files": [
        "AI_UNIVERSAL_INSTRUCTIONS.json",
        "multi_ai_decision_matrix.json",
        "backlog.json"
      ],
      "process": "Check instructions → Verify task routing → Review current status"
    },
    
    "architecture_decisions": {
      "required_files": [
        "sdd_system.json",
        "multi_ai_coordination_strategy.json",
        "prd_system.json"
      ],
      "process": "Technical architecture → AI capabilities → Business requirements"
    },
    
    "implementation_work": {
      "claude_path": ["CLAUDE.md", "sdd_system.json", "backlog.json"],
      "gemini_path": ["GEMINI.md", "gemini_optimization_patterns.json", "backlog.json"],
      "qwen_path": ["QWEN.md", "AI_UNIVERSAL_INSTRUCTIONS.json", "FORBIDDEN files list"]
    },
    
    "debugging_issues": {
      "required_files": [
        "multi_ai_decision_matrix.json",
        "AI_UNIVERSAL_INSTRUCTIONS.json"
      ],
      "rule": "CLAUDE ONLY for debugging - QWEN destroys code"
    },
    
    "creating_good_json_work_plans": {
      "required_files": [
        "guide_for_using_the_system.json",
        "sdd_system.json",
        "prd_system.json"
      ],
      "process": "Review project knowledge → Identify dependencies → Create structured JSON with mandatory elements",
      "mandatory_elements": [
        "knowledge_verification",
        "task_decomposition", 
        "purpose_and_requirements",
        "inputs_and_outputs",
        "constraints_and_restrictions",
        "apis_and_integrations",
        "test_driven_development",
        "development_phases",
        "coding_conventions",
        "context_injection"
      ]
    }
  },
  
  "critical_decisions": {
    "real_time_architecture": {
      "decision": "Hybrid SSE + Minimal WebSocket",
      "sse_for": "Admin updates, notifications, bet lists",
      "websocket_for": "ONLY PAGO/DOY proposals (3-min timeout)",
      "rationale": "Simplicity, fewer memory leaks, easier debugging"
    },
    
    "betting_system": {
      "temporal_logic": "upcoming → betting → live → completed",
      "critical_rule": "Bets ONLY during 'betting' status",
      "pago_doy": "WebSocket proposals with timeout",
      "wallet": "Manual refresh, no WebSocket"
    },
    
    "operator_hierarchy": {
      "principle": "Operators cannot modify admin/operator users",
      "implementation": "Shared admin environment with restrictions",
      "ui_approach": "Role-based component filtering"
    },
    
    "ai_coordination": {
      "database": "Claude EXCLUSIVE",
      "ui_components": "Gemini PRIMARY",
      "debugging": "Claude ONLY",
      "qwen_usage": "EXTREMELY LIMITED"
    }
  },
  
  "current_priorities": {
    "today_day_1": [
      "SSE architecture design (Claude)",
      "Review existing codebase",
      "Plan week 1 implementation"
    ],
    
    "week_1_critical": [
      "Day 1-2: SSE implementation",
      "Day 3-4: Frontend SSE integration",
      "Day 5-6: Betting windows system",
      "Day 7: Operator dashboard"
    ],
    
    "week_2_critical": [
      "Day 8-10: DATABASE PERFORMANCE FIX",
      "Day 11-12: Integration testing",
      "Day 13-14: Polish and cleanup",
      "Day 15: DEPLOYMENT"
    ]
  },
  
  "update_protocols": {
    "daily_updates": {
      "morning": "Update backlog.json with day's plan",
      "evening": "Update progress and blockers",
      "handoff": "Document in coordination files"
    },
    
    "incident_updates": {
      "qwen_destruction": "Update AI_UNIVERSAL_INSTRUCTIONS.json + QWEN.md",
      "performance_issues": "Update sdd_system.json + backlog.json",
      "architecture_changes": "Update all technical files"
    },
    
    "success_updates": {
      "feature_complete": "Update backlog.json status",
      "pattern_discovered": "Update optimization patterns files",
      "milestone_reached": "Update all tracking files"
    }
  },
  
  "ai_routing_quick_reference": {
    "always_claude": [
      "Database anything",
      "Authentication anything",
      "Debugging anything",
      "Architecture design",
      "Integration validation"
    ],
    
    "prefer_gemini": [
      "React components",
      "TypeScript interfaces",
      "UI implementation",
      "SSE frontend hooks",
      "Responsive design"
    ],
    
    "qwen_only_if": [
      "Simple TypeScript 'any' fixes",
      "New test files",
      "Documentation additions",
      "Maximum 30 minutes",
      "Claude available to validate"
    ],
    
    "never_qwen": [
      "Profile.tsx",
      "AuthContext.tsx",
      "Any authentication",
      "Any database work",
      "Any debugging"
    ]
  },
  
  "success_metrics": {
    "technical": [
      "Database queries <500ms",
      "SSE latency <1s",
      "Zero auth issues",
      "TypeScript compiles"
    ],
    
    "business": [
      "Betting windows working",
      "Operator dashboard functional",
      "Streaming integrated",
      "Payments processing"
    ],
    
    "timeline": [
      "Daily progress on track",
      "Week 1 goals met",
      "MVP deployed by Sept 21"
    ]
  },
  
  "emergency_contacts": {
    "if_blocked": "Review multi_ai_decision_matrix.json for routing",
    "if_confused": "Read AI_UNIVERSAL_INSTRUCTIONS.json",
    "if_timeline_risk": "Check backlog.json and cut P1 features",
    "if_qwen_breaks": "STOP, git reset, call Claude"
  }
}