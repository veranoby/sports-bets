{
  "metadata": {
    "purpose": "Comprehensive API endpoint reference for GalloBets platform",
    "created": "2025-09-27",
    "version": "1.0",
    "critical_note": "NEVER change these endpoints without updating this documentation",
    "validation_command": "npm run test:api-endpoints"
  },

  "base_configuration": {
    "backend_url": "http://localhost:3001",
    "api_prefix": "/api",
    "authentication": "Bearer token in Authorization header",
    "content_type": "application/json"
  },

  "authentication_endpoints": {
    "login": {
      "method": "POST",
      "path": "/auth/login",
      "body": {"login": "string", "password": "string"},
      "response": {"success": true, "data": {"token": "jwt", "user": "object"}},
      "auth_required": false
    },
    "check_membership": {
      "method": "POST",
      "path": "/auth/check-membership-status",
      "auth_required": true
    }
  },

  "user_endpoints": {
    "get_profile": {
      "method": "GET",
      "path": "/users/profile",
      "response": {"success": true, "data": {"user": "object"}},
      "auth_required": true,
      "note": "CRITICAL: Route MUST be before /:id to avoid UUID parsing"
    },
    "update_profile": {
      "method": "PUT",
      "path": "/users/profile",
      "body": {"profileInfo": "object"},
      "auth_required": true,
      "special_features": {
        "data_synchronization": "Automatically syncs venue/gallera profile data to dedicated tables",
        "venue_fields": ["venueName", "venueLocation", "venueDescription", "venueEmail", "venueWebsite"],
        "gallera_fields": ["galleraName", "galleraLocation", "galleraDescription", "galleraEmail", "galleraWebsite", "galleraSpecialties", "galleraActiveRoosters"],
        "display_logic": "venue/gallera names replace username in headers and profile display"
      }
    },
    "list_users": {
      "method": "GET",
      "path": "/users",
      "query_params": ["limit", "offset", "role", "isActive", "search"],
      "auth_required": true,
      "roles": ["admin", "operator"]
    },
    "get_user_by_id": {
      "method": "GET",
      "path": "/users/:id",
      "auth_required": true
    },
    "create_user": {
      "method": "POST",
      "path": "/users",
      "body": {"username": "string", "email": "string", "password": "string", "role": "string"},
      "auth_required": true,
      "roles": ["admin", "operator"]
    },
    "update_user_password": {
      "method": "PUT",
      "path": "/users/:id/password",
      "body": {"password": "string"},
      "validation": {
        "password": "min 8 chars, 1 uppercase, 1 lowercase, 1 number"
      },
      "auth_required": true,
      "roles": ["admin", "operator"],
      "security": "Operators cannot modify admin/operator accounts",
      "added_by": "QWEN optimization - admin password management feature"
    }
  },

  "venue_endpoints": {
    "CRITICAL_NOTE": "Frontend MUST use /venues NOT /users?role=venue",
    "list_venues": {
      "method": "GET",
      "path": "/venues",
      "query_params": ["limit", "offset", "search"],
      "response": {"success": true, "data": {"venues": "array", "total": "number"}},
      "auth_required": false,
      "middleware": "optionalAuth"
    },
    "create_venue": {
      "method": "POST",
      "path": "/venues",
      "auth_required": true
    },
    "get_venue_by_id": {
      "method": "GET",
      "path": "/venues/:id",
      "auth_required": false,
      "middleware": "optionalAuth",
      "response": {"success": true, "data": "venue_object_with_owner"}
    },
    "update_venue": {
      "method": "PUT",
      "path": "/venues/:id",
      "auth_required": true
    },
    "delete_venue": {
      "method": "DELETE",
      "path": "/venues/:id",
      "auth_required": true,
      "roles": ["admin"]
    }
  },

  "gallera_endpoints": {
    "CRITICAL_NOTE": "Frontend MUST use /galleras NOT /users?role=gallera",
    "list_galleras": {
      "method": "GET",
      "path": "/galleras",
      "query_params": ["limit", "offset", "search"],
      "response": {"success": true, "data": {"galleras": "array", "total": "number"}},
      "auth_required": false,
      "middleware": "optionalAuth"
    },
    "create_gallera": {
      "method": "POST",
      "path": "/galleras",
      "auth_required": true
    },
    "get_gallera_by_id": {
      "method": "GET",
      "path": "/galleras/:id",
      "auth_required": false,
      "middleware": "optionalAuth",
      "response": {"success": true, "data": "gallera_object_with_owner"}
    },
    "update_gallera": {
      "method": "PUT",
      "path": "/galleras/:id",
      "auth_required": true
    },
    "delete_gallera": {
      "method": "DELETE",
      "path": "/galleras/:id",
      "auth_required": true,
      "roles": ["admin"]
    }
  },

  "article_endpoints": {
    "CRITICAL_NOTE": "Route order matters: /featured MUST come before /:id",
    "list_articles": {
      "method": "GET",
      "path": "/articles",
      "query_params": ["search", "venueId", "status", "limit", "offset"],
      "auth_required": false,
      "middleware": "optionalAuth"
    },
    "featured_articles": {
      "method": "GET",
      "path": "/articles/featured",
      "query_params": ["limit", "type"],
      "response": {"success": true, "data": {"articles": "array", "type": "string", "total": "number"}},
      "auth_required": false,
      "route_order": "MUST be before /:id route"
    },
    "get_article": {
      "method": "GET",
      "path": "/articles/:id",
      "auth_required": false,
      "middleware": "optionalAuth"
    },
    "create_article": {
      "method": "POST",
      "path": "/articles",
      "body": {
        "title": "string (min 5, max 255 chars)",
        "content": "string (min 10 chars)",
        "excerpt": "string (min 10, max 500 chars)",
        "featured_image": "string (optional URL)",
        "venue_id": "string (optional UUID)"
      },
      "auth_required": true,
      "roles": ["admin", "gallera", "venue"],
      "CRITICAL_VALIDATION": {
        "field_names": "MUST use 'excerpt' NOT 'summary', 'featured_image' NOT 'featured_image_url'",
        "slug_generation": "✅ FIXED: Backend auto-generates URL-friendly slug from title - NEVER send slug field",
        "sanitization": "Content is automatically sanitized by DOMPurify middleware",
        "status_logic": "admin=published, gallera/venue=pending",
        "ownership": "gallera/venue can only create their own articles"
      },
      "common_400_errors": [
        "✅ FIXED: Empty string validation for optional fields",
        "✅ FIXED: notNull Violation Article.slug cannot be null (backend now auto-generates)",
        "Sending 'summary' instead of 'excerpt'",
        "Sending 'featured_image_url' instead of 'featured_image'",
        "Title too short (<5 chars) or too long (>255 chars)",
        "Content too short (<10 chars)",
        "Excerpt too short (<10 chars) or too long (>500 chars)"
      ]
    },
    "update_article": {
      "method": "PUT",
      "path": "/articles/:id",
      "body": {
        "title": "string (optional, min 5, max 255 chars)",
        "content": "string (optional, min 10 chars)",
        "excerpt": "string (optional, min 10, max 500 chars)",
        "featured_image": "string (optional URL)",
        "venue_id": "string (optional UUID)",
        "status": "string (optional: draft|pending|published|archived)"
      },
      "auth_required": true,
      "roles": ["admin", "gallera", "venue"],
      "ownership": "Only admin or article owner can update",
      "status_restrictions": "Non-admin publish requests go to pending"
    },
    "delete_article": {
      "method": "DELETE",
      "path": "/articles/:id",
      "auth_required": true,
      "roles": ["admin", "gallera", "venue"],
      "ownership": "Only admin or article owner can delete"
    }
  },

  "upload_endpoints": {
    "upload_image": {
      "method": "POST",
      "path": "/uploads/image",
      "content_type": "multipart/form-data",
      "body": {
        "image": "File (required, type: image/jpeg|image/jpg|image/png|image/webp)"
      },
      "response": {
        "success": true,
        "data": {
          "filename": "string (unique filename with timestamp and user ID)",
          "originalName": "string (original filename)",
          "url": "string (full URL to access the image)",
          "size": "number (file size in bytes)",
          "mimetype": "string (image MIME type)"
        }
      },
      "auth_required": true,
      "validation": {
        "max_file_size": "5MB",
        "allowed_types": ["image/jpeg", "image/jpg", "image/png", "image/webp"],
        "filename_pattern": "{timestamp}-{userId}.{extension}"
      },
      "storage_location": "backend/uploads/images/",
      "served_via": "/uploads/images/{filename}"
    },
    "delete_image": {
      "method": "DELETE",
      "path": "/uploads/image/:filename",
      "auth_required": true,
      "validation": {
        "ownership": "Users can only delete images they uploaded (filename contains userId)",
        "admin_override": "Admins can delete any image"
      },
      "response": {
        "success": true,
        "message": "Image deleted successfully"
      }
    }
  },

  "event_endpoints": {
    "list_events": {
      "method": "GET",
      "path": "/events",
      "auth_required": false,
      "middleware": "optionalAuth"
    },
    "get_event": {
      "method": "GET",
      "path": "/events/:id",
      "auth_required": false
    },
    "create_event": {
      "method": "POST",
      "path": "/events",
      "auth_required": true
    },
    "get_event_stats": {
      "method": "GET",
      "path": "/events/:id/stats",
      "auth_required": true,
      "response": {
        "success": true,
        "data": {
          "totalFights": "number",
          "completedFights": "number",
          "totalBets": "number",
          "totalPrizePool": "number",
          "progress": "number (percentage 0-100)"
        }
      },
      "note": "Basic event statistics for admins/operators"
    },
    "get_current_viewers": {
      "method": "GET",
      "path": "/events/:id/viewers",
      "auth_required": false,
      "response": {
        "success": true,
        "data": {
          "currentViewers": "number",
          "eventId": "string"
        }
      },
      "note": "Real-time count of connected users via EventConnection table",
      "implementation": "backend/src/routes/events.ts:795"
    },
    "get_event_analytics": {
      "method": "GET",
      "path": "/events/:id/analytics",
      "auth_required": true,
      "roles": ["admin", "operator"],
      "response": {
        "success": true,
        "data": {
          "totalConnections": "number",
          "uniqueViewers": "number",
          "averageDurationSeconds": "number",
          "connections": "Array<{id, user_id, user: {id, username}, connected_at, disconnected_at, duration_seconds}>"
        }
      },
      "note": "Historical analytics with detailed user connection data",
      "use_case": "Admin dashboard to see who watched event and for how long",
      "implementation": "backend/src/routes/events.ts:815"
    }
  },

  "bet_endpoints": {
    "my_bets": {
      "method": "GET",
      "path": "/bets/my-bets",
      "auth_required": true
    },
    "create_bet": {
      "method": "POST",
      "path": "/bets",
      "auth_required": true
    },
    "compatible_bets": {
      "method": "GET",
      "path": "/bets/compatible",
      "query_params": ["fightId", "side", "minAmount", "maxAmount"],
      "auth_required": true
    }
  },

  "wallet_endpoints": {
    "get_balance": {
      "method": "GET",
      "path": "/wallet/balance",
      "auth_required": true
    },
    "add_funds": {
      "method": "POST",
      "path": "/wallet/add-funds",
      "body": {"amount": "number"},
      "auth_required": true
    },
    "get_transactions": {
      "method": "GET",
      "path": "/wallet/transactions",
      "auth_required": true
    }
  },

  "membership_request_endpoints": {
    "CRITICAL_NOTE": "Membership requests for users to request plan changes (free → 24-hour @ $5 or monthly @ $10)",
    "create_request": {
      "method": "POST",
      "path": "/membership-requests",
      "body": {
        "requestedMembershipType": "string (required: 24-hour|monthly)",
        "requestNotes": "string (optional, max 1000 chars)",
        "paymentProofUrl": "string (optional URL, max 500 chars)"
      },
      "auth_required": true,
      "validation": {
        "phone_required": "User must have registered phone number",
        "no_duplicate_pending": "Cannot create request if user has pending request",
        "membership_types": ["24-hour ($5)", "monthly ($10)"]
      },
      "response": {
        "success": true,
        "data": "MembershipChangeRequest object"
      }
    },
    "my_requests": {
      "method": "GET",
      "path": "/membership-requests/my-requests",
      "query_params": ["status", "limit", "offset"],
      "auth_required": true,
      "response": {
        "success": true,
        "data": {
          "requests": "array",
          "total": "number",
          "limit": "number",
          "offset": "number"
        }
      }
    },
    "get_pending": {
      "method": "GET",
      "path": "/membership-requests/pending",
      "query_params": {
        "search": "string (optional)",
        "limit": "number (optional, 1-200, default 100)",
        "status": "string (optional: 'pending'|'completed'|'rejected'|'all', default 'pending')"
      },
      "auth_required": true,
      "roles": ["admin", "operator"],
      "response": {
        "success": true,
        "data": {
          "requests": "array (with user info + subscription)",
          "total": "number"
        }
      },
      "note": "Updated 2025-10-11: Added status filter to support all request states"
    },
    "complete_request": {
      "method": "PATCH",
      "path": "/membership-requests/:id/complete",
      "body": {
        "adminNotes": "string (optional, max 500 chars)"
      },
      "auth_required": true,
      "roles": ["admin"],
      "validation": {
        "status_check": "Request must be pending",
        "processor_recorded": "processedBy userId automatically set"
      }
    },
    "reject_request": {
      "method": "PATCH",
      "path": "/membership-requests/:id/reject",
      "body": {
        "rejectionReason": "string (required, min 10, max 1000 chars)",
        "adminNotes": "string (optional, max 500 chars)"
      },
      "auth_required": true,
      "roles": ["admin"],
      "validation": {
        "status_check": "Request must be pending",
        "reason_required": "Must provide rejection reason"
      }
    },
    "delete_request": {
      "method": "DELETE",
      "path": "/membership-requests/:id",
      "auth_required": true,
      "roles": ["admin"],
      "validation": {
        "status_check": "Request must NOT be pending (only completed/rejected can be deleted)",
        "safety_reason": "Prevents accidental deletion of pending requests"
      },
      "note": "Use for cleanup of processed requests only"
    }
  },

  "subscription_admin_endpoints": {
    "CRITICAL_NOTE": "Admin manual membership management - Created 2025-10-11",
    "admin_update_membership": {
      "method": "PUT",
      "path": "/subscriptions/admin/:userId/membership",
      "body": {
        "membership_type": "string (required: 'free'|'24-hour'|'monthly')",
        "assigned_username": "string (required, 1-100 chars)"
      },
      "auth_required": true,
      "roles": ["admin"],
      "logic": {
        "free": "Cancels active subscriptions",
        "24-hour": "Creates subscription with 24h expiry",
        "monthly": "Creates subscription with 30 day expiry"
      },
      "response": {
        "success": true,
        "data": {
          "id": "uuid",
          "type": "daily|monthly",
          "status": "active",
          "expiresAt": "ISO date",
          "manual_expires_at": "ISO date"
        }
      },
      "metadata_tracking": {
        "assignedBy": "username who assigned",
        "assignedAt": "ISO timestamp",
        "manualAssignment": true
      }
    }
  },

  "system_endpoints": {
    "health_check": {
      "method": "GET",
      "path": "/health",
      "auth_required": false
    },
    "get_alerts": {
      "method": "GET",
      "path": "/system/alerts",
      "auth_required": true
    },
    "get_live_stats": {
      "method": "GET",
      "path": "/system/stats",
      "auth_required": true
    }
  },

  "common_mistakes_to_avoid": {
    "wrong_venue_endpoint": {
      "NEVER_USE": "/users?role=venue",
      "ALWAYS_USE": "/venues",
      "reason": "Dedicated endpoints exist with proper data structure"
    },
    "wrong_gallera_endpoint": {
      "NEVER_USE": "/users?role=gallera",
      "ALWAYS_USE": "/galleras",
      "reason": "Dedicated endpoints exist with proper data structure"
    },
    "route_ordering": {
      "CRITICAL": "Specific routes (/featured) MUST come before parameterized routes (/:id)",
      "example": "articles/featured before articles/:id"
    },
    "profile_route": {
      "CRITICAL": "/users/profile MUST come before /users/:id",
      "reason": "Prevents 'profile' being parsed as UUID"
    }
  },

  "frontend_api_client_patterns": {
    "import_pattern": "import { venuesAPI, gallerasAPI, userAPI } from '../../services/api'",
    "correct_usage": {
      "venues": "const response = await venuesAPI.getAll();",
      "galleras": "const response = await gallerasAPI.getAll();",
      "users": "const response = await userAPI.getAll({ role: 'admin' });"
    },
    "data_access_patterns": {
      "venues": "response.data.venues",
      "galleras": "response.data.galleras",
      "users": "response.data.users"
    }
  },

  "testing_endpoints": {
    "quick_validation": {
      "venues": "curl -X GET http://localhost:3001/api/venues",
      "galleras": "curl -X GET http://localhost:3001/api/galleras",
      "articles_featured": "curl -X GET 'http://localhost:3001/api/articles/featured?limit=5&type=banner'",
      "profile": "curl -X GET http://localhost:3001/api/users/profile -H 'Authorization: Bearer TOKEN'"
    }
  },

  "prevention_checklist": [
    "✅ Check this documentation before changing any API calls",
    "✅ Test endpoints with curl before committing",
    "✅ Run npm run build && npm start to verify compiled changes",
    "✅ Verify frontend can load data from correct endpoints",
    "✅ Never change API calls during ESLint/TypeScript optimizations"
  ],

  "production_status": {
    "date": "2025-09-28",
    "status": "✅ PRODUCTION READY - 100% API completeness verified",
    "gemini_cli_completion": {
      "userAPI.delete": "✅ COMPLETED",
      "userAPI.update": "✅ COMPLETED",
      "fightsAPI.delete": "✅ COMPLETED",
      "typescript_errors": "✅ REDUCED FROM 68 → 0",
      "component_cleanup": "✅ COMPLETED (non-destructive)"
    },
    "critical_systems_status": {
      "authentication": "✅ Production JWT secrets configured",
      "event_management": "✅ Complete CRUD workflows",
      "betting_engine": "✅ PAGO/DOY + settlement logic",
      "streaming_pipeline": "✅ RTMP → HLS + SSE monitoring",
      "admin_dashboard": "✅ Full management capabilities",
      "operator_interface": "✅ Event control workflows",
      "database_optimization": "✅ Query performance <500ms"
    },
    "production_ready": true,
    "24h_launch_status": "✅ GO FOR PRODUCTION"
  }
}