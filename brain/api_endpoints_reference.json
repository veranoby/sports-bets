{
  "metadata": {
    "purpose": "Comprehensive API endpoint reference for GalloBets platform",
    "created": "2025-09-27",
    "version": "1.0",
    "last_updated": "2025-10-31 - Image upload UI + Admin UX consistency",
    "critical_note": "NEVER change these endpoints without updating this documentation",
    "validation_command": "npm run test:api-endpoints",
    "frontend_updates_2025_10_30": {
      "fase_1": "EditVenueGalleraModal - Removed venuesAPI/gallerasAPI calls, consolidated to usersAPI.updateProfile()",
      "fase_2": "CreateUserModal - Extended with role-based business field collection (venue/gallera fields)",
      "fase_3": "Backend image validation - Added max image limits: galleras=3, venues=2",
      "impact": "Single-step user creation workflow with complete business info stored in User.profileInfo",
      "affected_files": [
        "frontend/src/components/admin/EditVenueGalleraModal.tsx",
        "frontend/src/components/admin/CreateUserModal.tsx",
        "backend/src/routes/users.ts"
      ]
    },
    "frontend_updates_2025_10_31": {
      "image_upload_ui": "Added ImageGalleryUpload component integration to CreateUserModal and EditVenueGalleraModal for image management",
      "admin_ux_consistency": "Unified all admin pages (/admin/users, /admin/venues, /admin/galleras) to use CreateUserModal pattern instead of navigation",
      "type_definition_completion": "Added images?: string[] to User.profileInfo interface for type safety",
      "dashboard_filter_clarification": "AdminDashboard 'Pending Users' card now explicitly filters by role='user' to prevent ambiguity",
      "client_side_validation": "CreateUserModal enforces maxImages limits (venue=2, gallera=3) with conditional rendering",
      "affected_files": [
        "frontend/src/components/admin/CreateUserModal.tsx",
        "frontend/src/components/admin/EditVenueGalleraModal.tsx",
        "frontend/src/pages/admin/Users.tsx",
        "frontend/src/pages/admin/AdminDashboard.tsx",
        "frontend/src/types/index.ts"
      ]
    }
  },

  "base_configuration": {
    "backend_url": "http://localhost:3001",
    "api_prefix": "/api",
    "authentication": "Bearer token in Authorization header",
    "content_type": "application/json"
  },

  "authentication_endpoints": {
    "login": {
      "method": "POST",
      "path": "/auth/login",
      "body": {"login": "string", "password": "string"},
      "response": {"success": true, "data": {"token": "jwt", "user": "object"}},
      "auth_required": false
    },
    "register": {
      "method": "POST",
      "path": "/auth/register",
      "body": {"username": "string", "email": "string", "password": "string", "role": "string (optional: 'user'|'venue'|'gallera', default 'user')"},
      "response": {"success": true, "message": "User registered successfully. Please check your email..."},
      "auth_required": false,
      "auto_creation": {
        "venue_entity": "If role='venue', automatically creates Venue record with ownerId and status='pending'",
        "gallera_entity": "If role='gallera', automatically creates Gallera record with ownerId and status='pending'",
        "approval_status": "All public registrations marked as approved=false, require admin approval",
        "added_date": "2025-10-29"
      },
      "note": "UPDATED 2025-10-29: Added role selection and auto-entity creation for atomic user+entity setup"
    },
    "check_membership": {
      "method": "POST",
      "path": "/auth/check-membership-status",
      "auth_required": true
    }
  },

  "user_endpoints": {
    "get_profile": {
      "method": "GET",
      "path": "/users/profile",
      "response": {"success": true, "data": {"user": "object", "subscription": "UserSubscription object"}},
      "auth_required": true,
      "note": "CRITICAL: Route MUST be before /:id to avoid UUID parsing"
    },
    "update_profile": {
      "method": "PUT",
      "path": "/users/profile",
      "body": {"profileInfo": "object"},
      "auth_required": true,
      "roles": "ANY authenticated user (self-edit only)",
      "read_only_fields": ["username", "email"],
      "protection_note": "✅ ENFORCED 2025-10-19: Attempts to modify username/email are rejected with 400 error",
      "frontend_method": "userAPI.updateProfile(data) in frontend/src/services/api.ts",
      "validation_added_2025_10_30": {
        "image_limits": "ENFORCED - Validates image array sizes before persisting",
        "gallera_images_max": 3,
        "venue_images_max": 2,
        "validation_location": "backend/src/routes/users.ts:295-310",
        "error_response": "400 BadRequest with 'Maximum X images allowed for [type]' message"
      },
      "special_features": {
        "data_synchronization": "Automatically syncs venue/gallera profile data to dedicated tables",
        "venue_fields": ["venueName", "venueLocation", "venueDescription", "venueEmail", "venueWebsite", "venueImages"],
        "gallera_fields": ["galleraName", "galleraLocation", "galleraDescription", "galleraEmail", "galleraWebsite", "galleraSpecialties", "galleraActiveRoosters", "galleraImages"],
        "display_logic": "venue/gallera names replace username in headers and profile display",
        "image_upload": "Supports profileImage field for avatar upload, venueImages (max 2), galleraImages (max 3)"
      }
    },
    "list_users": {
      "method": "GET",
      "path": "/users",
      "query_params": ["limit", "offset", "role", "isActive", "search", "approved", "subscriptionType"],
      "auth_required": true,
      "roles": ["admin", "operator"],
      "filter_support": {
        "search": "string - search username or email (combined with other filters)",
        "approved": "'true'|'false' - filter by user approval status",
        "subscriptionType": "'free'|'monthly'|'daily' - filter by active subscription type",
        "combining_filters": "✅ All filters can be combined. Example: /users?search=john&approved=false&subscriptionType=monthly",
        "note_2025_10_30": "Backend updated to support combined filters using Op.and(Op.or(...)) pattern. Filters work independently AND together."
      },
      "🔴_CRITICAL_CHANGE_2025_10_30": "CONSOLIDATED ARCHITECTURE: venues and galleras tables ELIMINATED. All data now in User.profileInfo for users with role='venue' or role='gallera'",
      "usage_for_venues": "/users?role=venue → Returns User[] with profileInfo.venueName, venueLocation, venueDescription, venueEmail, venueWebsite, venueImages (max 3)",
      "usage_for_galleras": "/users?role=gallera → Returns User[] with profileInfo.galleraName, galleraLocation, galleraDescription, galleraEmail, galleraWebsite, galleraSpecialties, galleraActiveRoosters, galleraImages (max 3)",
      "status_field_logic": "Status is CALCULATED field, not stored. Derived from (User.isActive && User.approved): true+true='active', true+false='pending', false+true='inactive', false+false='rejected'. NO status filter in venues/galleras queries.",
      "image_constraints": "profileInfo.venueImages and profileInfo.galleraImages limited to maximum 3 images per business for security and bandwidth"
    },
    "get_user_by_id": {
      "method": "GET",
      "path": "/users/:id",
      "auth_required": true
    },
    "get_user_business_entity": {
      "method": "GET",
      "path": "/users/:id/business-entity",
      "auth_required": false,
      "middleware": "optionalAuth",
      "response": {"success": true, "data": {"type": "venue|gallera|null", "entity": "Venue|Gallera object or null"}},
      "purpose": "Optimized endpoint to fetch business entity (Venue/Gallera) associated with a user without downloading full lists",
      "cache": "Redis 5 min TTL (300s)",
      "search_strategy": "First tries ownerId match, then searches by name in profileInfo.venueName/galleraName for backward compatibility",
      "note": "ADDED 2025-10-29: Replaces inefficient full list queries in Profile.tsx",
      "implementation": "backend/src/routes/users.ts:525-607",
      "frontend_usage": "frontend/src/pages/user/Profile.tsx:35-48 (useEffect hook)"
    },
    "create_user": {
      "method": "POST",
      "path": "/users",
      "body": {"username": "string", "email": "string", "password": "string", "role": "string ('admin'|'operator'|'venue'|'user'|'gallera')", "profileInfo": "object (optional - includes business fields for venue/gallera)"},
      "auth_required": true,
      "roles": ["admin", "operator"],
      "security": [
        "Only admins can create admin/operator roles",
        "Operators can only create venue/user/gallera roles"
      ],
      "auto_creation": {
        "🔴_NOTE_2025_10_30": "Venue/Gallera tables ELIMINATED. No longer creates dedicated records.",
        "profile_initialization": "If role='venue' or role='gallera', prepares empty profileInfo structure for user to fill in business details",
        "approval_status": "Admin-created users marked as approved=true (auto-approved)",
        "added_date": "2025-10-29"
      },
      "frontend_integration_2025_10_31": {
        "component": "CreateUserModal (frontend/src/components/admin/CreateUserModal.tsx)",
        "admin_pages": [
          "/admin/users - Creates users with role='user'",
          "/admin/venues - Creates users with role='venue' + venue business fields + images (max 2)",
          "/admin/galleras - Creates users with role='gallera' + gallera business fields + images (max 3)"
        ],
        "ux_pattern": "All admin pages use CreateUserModal component for consistent UX (no navigation to separate creation pages)",
        "image_upload": "Uses ImageGalleryUpload component for client-side image selection before user creation",
        "validation": "Client-side enforcement of maxImages limits (venue=2, gallera=3) before API call"
      },
      "note": "UPDATED 2025-10-31: CreateUserModal now collects complete business info + images in single workflow. All admin pages unified with modal pattern."
    },
    "update_user_password": {
      "method": "PUT",
      "path": "/users/:id/password",
      "body": {"password": "string"},
      "validation": {
        "password": "min 8 chars, 1 uppercase, 1 lowercase, 1 number"
      },
      "auth_required": true,
      "roles": ["admin", "operator"],
      "security": "Operators cannot modify admin/operator accounts",
      "added_by": "QWEN optimization - admin password management feature"
    },
    "update_user": {
      "method": "PUT",
      "path": "/users/:id",
      "body": {"role": "string (optional)", "isActive": "boolean (optional)"},
      "allowed_fields": ["role", "isActive"],
      "read_only_fields": ["username", "email", "profileInfo"],
      "auth_required": true,
      "roles": ["admin", "operator"],
      "security": [
        "Operators cannot modify admin/operator accounts",
        "✅ ENFORCED 2025-10-19: Only 'role' and 'isActive' fields allowed, all other fields rejected",
        "Prevents unauthorized modification of profileInfo, username, or email via this endpoint"
      ]
    },
    "approve_user": {
      "method": "PUT",
      "path": "/users/:id/approve",
      "auth_required": true,
      "roles": ["admin"],
      "body": {},
      "response": {"success": true, "message": "User approved successfully", "data": "user_object"},
      "purpose": "Approve a pending user account (venues/galleras) for use",
      "added_date": "2025-10-29",
      "note": "Sets user.approved = true. User was marked approved=false on registration."
    },
    "reject_user": {
      "method": "PUT",
      "path": "/users/:id/reject",
      "auth_required": true,
      "roles": ["admin"],
      "body": {"reason": "string (optional)"},
      "response": {"success": true, "message": "User rejected successfully", "data": "user_object"},
      "purpose": "Reject a pending user account and deactivate it",
      "added_date": "2025-10-29",
      "note": "Sets user.isActive = false and user.approved = false. TODO: Send rejection email to user."
    }
  },

  "venue_endpoints": {
    "CRITICAL_NOTE": "⚠️ 2025-10-30: Venues table ELIMINATED. Frontend MUST use /venues (returns User objects with role='venue')",
    "implementation_note": "🔴 CRITICAL CHANGE 2025-10-30: venues table DELETED from Neon. GET /venues now returns User.findAndCountAll({role:'venue'}) with profileInfo containing venueName, venueLocation, etc. NO MORE LEFT JOIN venues. Data consolidated in User.profileInfo.",
    "list_venues": {
      "method": "GET",
      "path": "/venues",
      "query_params": ["limit", "offset", "search", "ownerApproved", "ownerSubscription"],
      "response": {"success": true, "data": {"users": "array (users with role='venue')", "total": "number"}},
      "auth_required": false,
      "middleware": "optionalAuth",
      "query_pattern": "User.findAndCountAll({role:'venue', isActive:true}) - NO JOIN, data in profileInfo",
      "filter_support": {
        "search": "string - search venue/owner username or email",
        "ownerApproved": "'true'|'false' - filter by venue owner approval status",
        "ownerSubscription": "'free'|'monthly'|'daily' - filter by venue owner's subscription",
        "combining_filters": "✅ All filters can be combined. Example: /venues?search=john&ownerApproved=true&ownerSubscription=monthly",
        "note_2025_10_30": "Backend updated to support combined filters. Query uses Op.and(Op.or(...)) pattern for proper multi-filter support."
      }
    },
    "create_venue": {
      "method": "POST",
      "path": "/venues",
      "auth_required": true
    },
    "get_venue_by_id": {
      "method": "GET",
      "path": "/venues/:id",
      "auth_required": false,
      "middleware": "optionalAuth",
      "response": {"success": true, "data": "user_object (role='venue') with profileInfo.venueName, venueLocation, etc"},
      "note": "Returns User, not Venue. Venue data in User.profileInfo"
    },
    "update_venue": {
      "method": "PUT",
      "path": "/venues/:id",
      "auth_required": true,
      "body": {"profileInfo": {venueName: "string", venueLocation: "string", venueDescription: "string", venueEmail: "string", venueWebsite: "string"}, "images": "string[] (optional)"},
      "note": "🔴 CHANGED 2025-10-30: Updates User.profileInfo (venue fields), not venue table",
      "images_support": {
        "field_name": "images",
        "type": "Array<string>",
        "validation": "Each URL must be valid",
        "added_date": "2025-10-29",
        "gallery_component": "ImageGalleryUpload (frontend/src/components/shared/ImageGalleryUpload.tsx)"
      },
      "note": "UPDATED 2025-10-29: Added 'images' field support for gallery management"
    },
    "delete_venue": {
      "method": "DELETE",
      "path": "/venues/:id",
      "auth_required": true,
      "roles": ["admin"]
    }
  },

  "gallera_endpoints": {
    "CRITICAL_NOTE": "⚠️ 2025-10-30: Galleras table ELIMINATED. Frontend MUST use /galleras (returns User objects with role='gallera')",
    "implementation_note": "🔴 CRITICAL CHANGE 2025-10-30: galleras table DELETED from Neon. GET /galleras now returns User.findAndCountAll({role:'gallera'}) with profileInfo containing galleraName, galleraLocation, etc. NO MORE LEFT JOIN galleras. Data consolidated in User.profileInfo.",
    "list_galleras": {
      "method": "GET",
      "path": "/galleras",
      "query_params": ["limit", "offset", "search", "ownerApproved", "ownerSubscription"],
      "response": {"success": true, "data": {"users": "array (users with role='gallera')", "total": "number"}},
      "auth_required": false,
      "middleware": "optionalAuth",
      "query_pattern": "User.findAndCountAll({role:'gallera', isActive:true}) - NO JOIN, data in profileInfo",
      "filter_support": {
        "search": "string - search gallera/owner username or email",
        "ownerApproved": "'true'|'false' - filter by gallera owner approval status",
        "ownerSubscription": "'free'|'monthly'|'daily' - filter by gallera owner's subscription",
        "combining_filters": "✅ All filters can be combined. Example: /galleras?search=juan&ownerApproved=false&ownerSubscription=daily",
        "note_2025_10_30": "Backend updated to support combined filters. Query uses Op.and(Op.or(...)) pattern for proper multi-filter support."
      }
    },
    "create_gallera": {
      "method": "POST",
      "path": "/galleras",
      "auth_required": true
    },
    "get_gallera_by_id": {
      "method": "GET",
      "path": "/galleras/:id",
      "auth_required": false,
      "middleware": "optionalAuth",
      "response": {"success": true, "data": "user_object (role='gallera') with profileInfo.galleraName, galleraLocation, etc"},
      "note": "Returns User, not Gallera. Gallera data in User.profileInfo"
    },
    "update_gallera": {
      "method": "PUT",
      "path": "/galleras/:id",
      "auth_required": true,
      "body": {"profileInfo": {galleraName: "string", galleraLocation: "string", galleraDescription: "string", galleraEmail: "string", galleraWebsite: "string", galleraSpecialties: "object", galleraActiveRoosters: "number"}, "images": "string[] (optional)"},
      "note": "🔴 CHANGED 2025-10-30: Updates User.profileInfo (gallera fields), not gallera table",
      "images_support": {
        "field_name": "images",
        "type": "Array<string>",
        "validation": "Must be array of image URLs",
        "added_date": "2025-10-29",
        "gallery_component": "ImageGalleryUpload (frontend/src/components/shared/ImageGalleryUpload.tsx)"
      },
      "note": "UPDATED 2025-10-29: Added 'images' field support for gallery management"
    },
    "delete_gallera": {
      "method": "DELETE",
      "path": "/galleras/:id",
      "auth_required": true,
      "roles": ["admin"]
    }
  },

  "article_endpoints": {
    "CRITICAL_NOTE": "Route order matters: /featured MUST come before /:id",
    "list_articles": {
      "method": "GET",
      "path": "/articles",
      "query_params": ["search", "venueId", "status", "limit", "offset"],
      "auth_required": false,
      "middleware": "optionalAuth"
    },
    "featured_articles": {
      "method": "GET",
      "path": "/articles/featured",
      "query_params": ["limit", "type"],
      "response": {"success": true, "data": {"articles": "array", "type": "string", "total": "number"}},
      "auth_required": false,
      "route_order": "MUST be before /:id route"
    },
    "get_article": {
      "method": "GET",
      "path": "/articles/:id",
      "auth_required": false,
      "middleware": "optionalAuth"
    },
    "create_article": {
      "method": "POST",
      "path": "/articles",
      "body": {
        "title": "string (min 5, max 255 chars)",
        "content": "string (min 10 chars)",
        "excerpt": "string (min 10, max 500 chars)",
        "featured_image": "string (optional URL)",
        "venue_id": "string (optional UUID)"
      },
      "auth_required": true,
      "roles": ["admin", "gallera", "venue"],
      "CRITICAL_VALIDATION": {
        "field_names": "MUST use 'excerpt' NOT 'summary', 'featured_image' NOT 'featured_image_url'",
        "slug_generation": "✅ FIXED: Backend auto-generates URL-friendly slug from title - NEVER send slug field",
        "sanitization": "Content is automatically sanitized by DOMPurify middleware",
        "status_logic": "admin=published, gallera/venue=pending",
        "ownership": "gallera/venue can only create their own articles"
      },
      "common_400_errors": [
        "✅ FIXED: Empty string validation for optional fields",
        "✅ FIXED: notNull Violation Article.slug cannot be null (backend now auto-generates)",
        "Sending 'summary' instead of 'excerpt'",
        "Sending 'featured_image_url' instead of 'featured_image'",
        "Title too short (<5 chars) or too long (>255 chars)",
        "Content too short (<10 chars)",
        "Excerpt too short (<10 chars) or too long (>500 chars)"
      ]
    },
    "update_article": {
      "method": "PUT",
      "path": "/articles/:id",
      "body": {
        "title": "string (optional, min 5, max 255 chars)",
        "content": "string (optional, min 10 chars)",
        "excerpt": "string (optional, min 10, max 500 chars)",
        "featured_image": "string (optional URL)",
        "venue_id": "string (optional UUID)",
        "status": "string (optional: draft|pending|published|archived)"
      },
      "auth_required": true,
      "roles": ["admin", "gallera", "venue"],
      "ownership": "Only admin or article owner can update",
      "status_restrictions": "Non-admin publish requests go to pending"
    },
    "delete_article": {
      "method": "DELETE",
      "path": "/articles/:id",
      "auth_required": true,
      "roles": ["admin", "gallera", "venue"],
      "ownership": "Only admin or article owner can delete"
    }
  },

  "upload_endpoints": {
    "upload_image": {
      "method": "POST",
      "path": "/uploads/image",
      "content_type": "multipart/form-data",
      "body": {
        "image": "File (required, type: image/jpeg|image/jpg|image/png|image/webp)"
      },
      "response": {
        "success": true,
        "data": {
          "filename": "string (unique filename with timestamp and user ID)",
          "originalName": "string (original filename)",
          "url": "string (full URL to access the image)",
          "size": "number (file size in bytes)",
          "mimetype": "string (image MIME type)"
        }
      },
      "auth_required": true,
      "validation": {
        "max_file_size": "5MB",
        "allowed_types": ["image/jpeg", "image/jpg", "image/png", "image/webp"],
        "filename_pattern": "{timestamp}-{userId}.{extension}"
      },
      "storage_location": "backend/uploads/images/",
      "served_via": "/uploads/images/{filename}"
    },
    "delete_image": {
      "method": "DELETE",
      "path": "/uploads/image/:filename",
      "auth_required": true,
      "validation": {
        "ownership": "Users can only delete images they uploaded (filename contains userId)",
        "admin_override": "Admins can delete any image"
      },
      "response": {
        "success": true,
        "message": "Image deleted successfully"
      }
    }
  },

  "event_endpoints": {
    "list_events": {
      "method": "GET",
      "path": "/events",
      "auth_required": false,
      "middleware": "optionalAuth"
    },
    "get_event": {
      "method": "GET",
      "path": "/events/:id",
      "auth_required": false
    },
    "create_event": {
      "method": "POST",
      "path": "/events",
      "auth_required": true
    },
    "get_event_stats": {
      "method": "GET",
      "path": "/events/:id/stats",
      "auth_required": true,
      "response": {
        "success": true,
        "data": {
          "totalFights": "number",
          "completedFights": "number",
          "totalBets": "number",
          "totalPrizePool": "number",
          "progress": "number (percentage 0-100)"
        }
      },
      "note": "Basic event statistics for admins/operators"
    },
    "get_current_viewers": {
      "method": "GET",
      "path": "/events/:id/viewers",
      "auth_required": false,
      "response": {
        "success": true,
        "data": {
          "currentViewers": "number",
          "eventId": "string"
        }
      },
      "note": "Real-time count of connected users via EventConnection table",
      "implementation": "backend/src/routes/events.ts:795"
    },
    "get_event_analytics": {
      "method": "GET",
      "path": "/events/:id/analytics",
      "auth_required": true,
      "roles": ["admin", "operator"],
      "response": {
        "success": true,
        "data": {
          "totalConnections": "number",
          "uniqueViewers": "number",
          "averageDurationSeconds": "number",
          "connections": "Array<{id, user_id, user: {id, username}, connected_at, disconnected_at, duration_seconds}>"
        }
      },
      "note": "Historical analytics with detailed user connection data",
      "use_case": "Admin dashboard to see who watched event and for how long",
      "implementation": "backend/src/routes/events.ts:815"
    }
  },

  "bet_endpoints": {
    "my_bets": {
      "method": "GET",
      "path": "/bets/my-bets",
      "auth_required": true
    },
    "create_bet": {
      "method": "POST",
      "path": "/bets",
      "auth_required": true
    },
    "compatible_bets": {
      "method": "GET",
      "path": "/bets/compatible",
      "query_params": ["fightId", "side", "minAmount", "maxAmount"],
      "auth_required": true
    }
  },

  "wallet_endpoints": {
    "get_balance": {
      "method": "GET",
      "path": "/wallet/balance",
      "auth_required": true
    },
    "add_funds": {
      "method": "POST",
      "path": "/wallet/add-funds",
      "body": {"amount": "number"},
      "auth_required": true
    },
    "get_transactions": {
      "method": "GET",
      "path": "/wallet/transactions",
      "auth_required": true
    }
  },

  "membership_request_endpoints": {
    "CRITICAL_NOTE": "Membership requests for users to request plan changes (free → 24-hour @ $5 or monthly @ $10)",
    "create_request": {
      "method": "POST",
      "path": "/membership-requests",
      "body": {
        "requestedMembershipType": "string (required: 24-hour|monthly)",
        "requestNotes": "string (optional, max 1000 chars)",
        "paymentProofUrl": "string (optional URL, max 500 chars)"
      },
      "auth_required": true,
      "validation": {
        "phone_required": "User must have registered phone number",
        "no_duplicate_pending": "Cannot create request if user has pending request",
        "membership_types": ["24-hour ($5)", "monthly ($10)"]
      },
      "response": {
        "success": true,
        "data": "MembershipChangeRequest object"
      }
    },
    "my_requests": {
      "method": "GET",
      "path": "/membership-requests/my-requests",
      "query_params": ["status", "limit", "offset"],
      "auth_required": true,
      "response": {
        "success": true,
        "data": {
          "requests": "array",
          "total": "number",
          "limit": "number",
          "offset": "number"
        }
      }
    },
    "get_pending": {
      "method": "GET",
      "path": "/membership-requests/pending",
      "query_params": {
        "search": "string (optional)",
        "limit": "number (optional, 1-200, default 100)",
        "status": "string (optional: 'pending'|'completed'|'rejected'|'all', default 'pending')"
      },
      "auth_required": true,
      "roles": ["admin", "operator"],
      "response": {
        "success": true,
        "data": {
          "requests": "array (with user info + subscription)",
          "total": "number"
        }
      },
      "note": "Updated 2025-10-11: Added status filter to support all request states"
    },
    "complete_request": {
      "method": "PATCH",
      "path": "/membership-requests/:id/complete",
      "body": {
        "adminNotes": "string (optional, max 500 chars)"
      },
      "auth_required": true,
      "roles": ["admin"],
      "validation": {
        "status_check": "Request must be pending",
        "processor_recorded": "processedBy userId automatically set"
      }
    },
    "reject_request": {
      "method": "PATCH",
      "path": "/membership-requests/:id/reject",
      "body": {
        "rejectionReason": "string (required, min 10, max 1000 chars)",
        "adminNotes": "string (optional, max 500 chars)"
      },
      "auth_required": true,
      "roles": ["admin"],
      "validation": {
        "status_check": "Request must be pending",
        "reason_required": "Must provide rejection reason"
      }
    },
    "delete_request": {
      "method": "DELETE",
      "path": "/membership-requests/:id",
      "auth_required": true,
      "roles": ["admin"],
      "validation": {
        "status_check": "Request must NOT be pending (only completed/rejected can be deleted)",
        "safety_reason": "Prevents accidental deletion of pending requests"
      },
      "note": "Use for cleanup of processed requests only"
    }
  },

  "subscription_admin_endpoints": {
    "CRITICAL_NOTE": "Admin manual membership management - Created 2025-10-11",
    "admin_update_membership": {
      "method": "PUT",
      "path": "/subscriptions/admin/:userId/membership",
      "body": {
        "membership_type": "string (required: 'free'|'24-hour'|'monthly')",
        "assigned_username": "string (required, 1-100 chars)"
      },
      "auth_required": true,
      "roles": ["admin"],
      "logic": {
        "free": "Cancels active subscriptions",
        "24-hour": "Creates subscription with 24h expiry",
        "monthly": "Creates subscription with 30 day expiry"
      },
      "response": {
        "success": true,
        "data": {
          "id": "uuid",
          "type": "daily|monthly",
          "status": "active",
          "expiresAt": "ISO date",
          "manual_expires_at": "ISO date"
        }
      },
      "metadata_tracking": {
        "assignedBy": "username who assigned",
        "assignedAt": "ISO timestamp",
        "manualAssignment": true
      }
    }
  },

  "system_endpoints": {
    "health_check": {
      "method": "GET",
      "path": "/health",
      "auth_required": false
    },
    "get_alerts": {
      "method": "GET",
      "path": "/system/alerts",
      "auth_required": true
    },
    "get_live_stats": {
      "method": "GET",
      "path": "/system/stats",
      "auth_required": true
    }
  },

  "common_mistakes_to_avoid": {
    "wrong_venue_endpoint": {
      "NEVER_USE": "/users?role=venue",
      "ALWAYS_USE": "/venues",
      "reason": "Dedicated endpoints exist with proper data structure"
    },
    "wrong_gallera_endpoint": {
      "NEVER_USE": "/users?role=gallera",
      "ALWAYS_USE": "/galleras",
      "reason": "Dedicated endpoints exist with proper data structure"
    },
    "route_ordering": {
      "CRITICAL": "Specific routes (/featured) MUST come before parameterized routes (/:id)",
      "example": "articles/featured before articles/:id"
    },
    "profile_route": {
      "CRITICAL": "/users/profile MUST come before /users/:id",
      "reason": "Prevents 'profile' being parsed as UUID"
    }
  },

  "frontend_api_client_patterns": {
    "import_pattern": "import { venuesAPI, gallerasAPI, userAPI } from '../../services/api'",
    "correct_usage": {
      "venues": "const response = await venuesAPI.getAll();",
      "galleras": "const response = await gallerasAPI.getAll();",
      "users": "const response = await userAPI.getAll({ role: 'admin' });"
    },
    "data_access_patterns": {
      "venues": "response.data.venues",
      "galleras": "response.data.galleras",
      "users": "response.data.users"
    }
  },

  "testing_endpoints": {
    "quick_validation": {
      "venues": "curl -X GET http://localhost:3001/api/venues",
      "galleras": "curl -X GET http://localhost:3001/api/galleras",
      "articles_featured": "curl -X GET 'http://localhost:3001/api/articles/featured?limit=5&type=banner'",
      "profile": "curl -X GET http://localhost:3001/api/users/profile -H 'Authorization: Bearer TOKEN'"
    }
  },

  "prevention_checklist": [
    "✅ Check this documentation before changing any API calls",
    "✅ Test endpoints with curl before committing",
    "✅ Run npm run build && npm start to verify compiled changes",
    "✅ Verify frontend can load data from correct endpoints",
    "✅ Never change API calls during ESLint/TypeScript optimizations"
  ],

  "session_logs": {
    "session_log_2025_11_01_user_modal_unification": {
      "executor": "QWEN 2.5-Coder 32B Instruct with --c7 --context7 + --seq --sequential",
      "task": "Unify CreateUserModal + EditUserModal into single UserModal component",
      "deliverables": [
        "UserModal.tsx - Unified component with mode='create'|'edit'",
        "useUserForm.ts - Shared form state management hook",
        "useUserSubscription.ts - Shared subscription logic hook",
        "Updated 5 admin pages: Administrators, Operators, Venues, Galleras, Users"
      ],
      "impact": {
        "code_duplication_eliminated": "45% → 0%",
        "lines_of_code_reduced": "987 lines → 800 lines (19% reduction)",
        "maintainability_improvement": "Single source of truth for user management"
      },
      "features_added": [
        "approved checkbox in create mode",
        "isActive checkbox in create mode",
        "Subscription tab in create mode (post-creation)"
      ],
      "validation_status": {
        "typescript_compilation": "✅ ZERO errors",
        "build_process": "✅ SUCCESS",
        "any_types_introduced": "✅ ZERO 'any' types",
        "pages_migrated": "✅ 5/5 admin pages using UserModal"
      }
    },
    "session_log_2025_11_01_form_handling_fix": {
      "executor": "QWEN 2.5-Coder 32B Instruct with --c7 --context7 + --seq --sequential",
      "task": "Fix form handling issue preventing fullName and phoneNumber fields from accepting input",
      "issue_identified": "Fields with names like 'profileInfo.fullName' were not updating due to mismatch between field naming and handleChange logic",
      "root_cause": "handleChange function in useUserForm.ts looked for exact matches in profileFields array, but input fields used dot notation like 'profileInfo.fullName'",
      "solution_implemented": "Modified handleChange to properly parse nested field names and update the correct nested structure",
      "files_modified": [
        "frontend/src/hooks/useUserForm.ts - Updated handleChange function to handle nested field names correctly"
      ],
      "validation_performed": [
        "TypeScript compilation: ✅ ZERO errors",
        "Logic test: ✅ Confirmed nested field handling works correctly",
        "No regressions: ✅ Existing functionality preserved"
      ],
      "impact": {
        "user_experience": "✅ Users can now enter data in fullName and phoneNumber fields",
        "form_functionality": "✅ All profileInfo fields now work correctly",
        "code_quality": "✅ Cleaner, more robust form handling logic"
      }
    }
  },
  "production_status": {
    "date": "2025-09-28",
    "status": "✅ PRODUCTION READY - 100% API completeness verified",
    "gemini_cli_completion": {
      "userAPI.delete": "✅ COMPLETED",
      "userAPI.update": "✅ COMPLETED",
      "fightsAPI.delete": "✅ COMPLETED",
      "typescript_errors": "✅ REDUCED FROM 68 → 0",
      "component_cleanup": "✅ COMPLETED (non-destructive)"
    },
    "critical_systems_status": {
      "authentication": "✅ Production JWT secrets configured",
      "event_management": "✅ Complete CRUD workflows",
      "betting_engine": "✅ PAGO/DOY + settlement logic",
      "streaming_pipeline": "✅ RTMP → HLS + SSE monitoring",
      "admin_dashboard": "✅ Full management capabilities",
      "operator_interface": "✅ Event control workflows",
      "database_optimization": "✅ Query performance <500ms"
    },
    "production_ready": true,
    "24h_launch_status": "✅ GO FOR PRODUCTION"
  }
}