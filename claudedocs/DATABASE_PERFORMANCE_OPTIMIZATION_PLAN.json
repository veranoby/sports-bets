{
  "plan_metadata": {
    "created": "2025-10-12",
    "owner": "Claude - Performance Engineer",
    "target": "Reduce database query times from 1-3+ seconds to <500ms (95th percentile)",
    "database": "PostgreSQL on Neon.tech via Sequelize ORM",
    "estimated_total_hours": 12
  },

  "phase_1_confirmation_and_measurement": {
    "description": "Measure and verify actual performance bottlenecks with data",
    "duration_minutes": 120,

    "task_1_verify_missing_indexes": {
      "objective": "Identify missing indexes causing table scans",
      "files_to_analyze": [
        "/home/veranoby/sports-bets/backend/src/models/Bet.ts",
        "/home/veranoby/sports-bets/backend/src/models/Fight.ts",
        "/home/veranoby/sports-bets/backend/src/models/Event.ts",
        "/home/veranoby/sports-bets/backend/src/models/User.ts",
        "/home/veranoby/sports-bets/backend/src/models/Wallet.ts",
        "/home/veranoby/sports-bets/backend/src/models/Transaction.ts"
      ],
      "commands_to_run": [
        {
          "command": "psql $DATABASE_URL -c \"SELECT schemaname, tablename, indexname FROM pg_indexes WHERE schemaname = 'public' ORDER BY tablename;\"",
          "purpose": "List all existing indexes"
        },
        {
          "command": "psql $DATABASE_URL -c \"SELECT relname as table_name, seq_scan, seq_tup_read, idx_scan, idx_tup_fetch FROM pg_stat_user_tables WHERE schemaname = 'public' ORDER BY seq_scan DESC LIMIT 10;\"",
          "purpose": "Identify tables with high sequential scans"
        },
        {
          "command": "grep -r \"where:\" /home/veranoby/sports-bets/backend/src/routes/*.ts | grep -E \"(fightId|userId|eventId|status)\" | head -20",
          "purpose": "Identify common WHERE clause patterns in routes"
        }
      ],
      "expected_findings": [
        "Missing composite indexes on (user_id, status) for bets table",
        "Missing indexes on (event_id, status) for fights table",
        "Missing indexes on foreign keys in transactions table",
        "Missing covering indexes for common query patterns"
      ],
      "success_criteria": {
        "indexes_identified": ">= 5 missing critical indexes",
        "seq_scans_baseline": "Document current sequential scan counts"
      },
      "duration_minutes": 45
    },

    "task_2_detect_n1_queries": {
      "objective": "Identify N+1 query patterns causing performance issues",
      "files_to_analyze": [
        "/home/veranoby/sports-bets/backend/src/routes/bets.ts",
        "/home/veranoby/sports-bets/backend/src/routes/events.ts",
        "/home/veranoby/sports-bets/backend/src/routes/fights.ts",
        "/home/veranoby/sports-bets/backend/src/routes/users.ts"
      ],
      "detection_method": "Enable SQL logging and analyze request patterns",
      "commands_to_run": [
        {
          "command": "NODE_ENV=development npm run dev 2>&1 | grep -E 'Executing \\(default\\):' | head -50",
          "purpose": "Capture SQL queries during development requests"
        },
        {
          "command": "grep -n \"include:\" /home/veranoby/sports-bets/backend/src/routes/bets.ts",
          "purpose": "Identify include patterns in bets routes"
        },
        {
          "command": "grep -n \"include:\" /home/veranoby/sports-bets/backend/src/routes/events.ts",
          "purpose": "Identify include patterns in events routes"
        }
      ],
      "known_issues": [
        {
          "file": "/home/veranoby/sports-bets/backend/src/routes/bets.ts",
          "line": 33,
          "issue": "Missing separate:false on Fight->Event include",
          "impact": "N+1 query for each bet to fetch event details"
        },
        {
          "file": "/home/veranoby/sports-bets/backend/src/routes/events.ts",
          "line": 158,
          "issue": "Deep nesting Fight->Bets without pagination",
          "impact": "Loading all bets for all fights in single query"
        },
        {
          "file": "/home/veranoby/sports-bets/backend/src/routes/fights.ts",
          "line": 48,
          "issue": "Include Bets without required:false causing slow joins",
          "impact": "Full table join on bets for every fight query"
        }
      ],
      "expected_findings": [
        "3-5 N+1 query patterns in betting endpoints",
        "2-3 missing required:false flags",
        "1-2 missing separate:true for large collections"
      ],
      "success_criteria": {
        "n1_patterns_identified": ">= 5 critical N+1 patterns",
        "baseline_query_count": "Document queries per request"
      },
      "duration_minutes": 45
    },

    "task_3_analyze_connection_pool": {
      "objective": "Measure connection pool utilization and timeout patterns",
      "files_to_check": [
        "/home/veranoby/sports-bets/backend/src/config/database.ts"
      ],
      "current_config": {
        "file": "/home/veranoby/sports-bets/backend/src/config/database.ts",
        "lines": "16-26",
        "settings": {
          "max": 10,
          "min": 2,
          "acquire": 45000,
          "idle": 5000,
          "evict": 15000
        }
      },
      "commands_to_run": [
        {
          "command": "curl http://localhost:3000/api/monitoring/health | jq '.data.database.poolStats'",
          "purpose": "Check current pool utilization"
        },
        {
          "command": "grep -E '(ETIMEDOUT|SequelizeConnectionError|ConnectionRefusedError)' /home/veranoby/sports-bets/backend/logs/*.log | wc -l",
          "purpose": "Count connection timeout errors"
        },
        {
          "command": "psql $DATABASE_URL -c \"SELECT count(*) as active_connections FROM pg_stat_activity WHERE datname = current_database();\"",
          "purpose": "Check active database connections"
        }
      ],
      "load_test_procedure": [
        "Install: npm install -g autocannon",
        "Run: autocannon -c 50 -d 30 http://localhost:3000/api/events",
        "Monitor: Watch pool stats endpoint during test",
        "Record: Capture max pool utilization and wait times"
      ],
      "expected_findings": [
        "Pool maxing out at 10 connections under load",
        "ETIMEDOUT errors during peak usage",
        "High acquire wait times (>5 seconds)",
        "Neon.tech connection limits being reached"
      ],
      "success_criteria": {
        "baseline_pool_utilization": "Document max connections used",
        "timeout_error_count": "Document ETIMEDOUT frequency",
        "avg_acquire_time": "Document average connection acquisition time"
      },
      "duration_minutes": 30
    }
  },

  "phase_2_implementation": {
    "description": "Apply optimizations based on confirmed issues",
    "duration_hours": 8,

    "priority_1_add_critical_indexes": {
      "objective": "Add missing indexes to eliminate table scans",
      "duration_hours": 2,
      "migration_file": "/home/veranoby/sports-bets/backend/migrations/20251012000000-add-critical-performance-indexes.js",
      "indexes_to_add": [
        {
          "table": "bets",
          "index_name": "idx_bets_user_status",
          "columns": ["user_id", "status"],
          "reason": "Used in GET /api/bets (line 23) - user's bets by status",
          "expected_improvement": "90% reduction in query time for user bet listings"
        },
        {
          "table": "bets",
          "index_name": "idx_bets_fight_status_pending",
          "columns": ["fight_id", "status"],
          "where": "status = 'pending'",
          "reason": "Used in GET /api/bets/available/:fightId (line 95) - available bets",
          "expected_improvement": "80% reduction for available bets queries"
        },
        {
          "table": "fights",
          "index_name": "idx_fights_event_status_number",
          "columns": ["event_id", "status", "number"],
          "reason": "Used in GET /api/fights (line 21) and betting window queries",
          "expected_improvement": "75% reduction for fight listings by event"
        },
        {
          "table": "events",
          "index_name": "idx_events_status_scheduled_date",
          "columns": ["status", "scheduled_date"],
          "reason": "Used in GET /api/events (line 94-98) - upcoming events filter",
          "expected_improvement": "85% reduction for upcoming events queries"
        },
        {
          "table": "transactions",
          "index_name": "idx_transactions_wallet_type_status",
          "columns": ["wallet_id", "type", "status"],
          "reason": "Common pattern for transaction history queries",
          "expected_improvement": "70% reduction for wallet transaction queries"
        },
        {
          "table": "bets",
          "index_name": "idx_bets_parent_bet_proposal",
          "columns": ["parent_bet_id", "proposal_status"],
          "reason": "Used in PAGO/DOY proposal queries (line 615, 720)",
          "expected_improvement": "80% reduction for proposal queries"
        },
        {
          "table": "event_connections",
          "index_name": "idx_event_connections_event_disconnected",
          "columns": ["event_id", "disconnected_at"],
          "reason": "Used in GET /api/events/:id/viewers (events.ts line 799)",
          "expected_improvement": "90% reduction for viewer count queries"
        }
      ],
      "migration_script": {
        "up": [
          "CREATE INDEX CONCURRENTLY idx_bets_user_status ON bets(user_id, status);",
          "CREATE INDEX CONCURRENTLY idx_bets_fight_status_pending ON bets(fight_id, status) WHERE status = 'pending';",
          "CREATE INDEX CONCURRENTLY idx_fights_event_status_number ON fights(event_id, status, number);",
          "CREATE INDEX CONCURRENTLY idx_events_status_scheduled_date ON events(status, scheduled_date);",
          "CREATE INDEX CONCURRENTLY idx_transactions_wallet_type_status ON transactions(wallet_id, type, status);",
          "CREATE INDEX CONCURRENTLY idx_bets_parent_bet_proposal ON bets(parent_bet_id, proposal_status) WHERE parent_bet_id IS NOT NULL;",
          "CREATE INDEX CONCURRENTLY idx_event_connections_event_disconnected ON event_connections(event_id, disconnected_at);"
        ],
        "down": [
          "DROP INDEX CONCURRENTLY IF EXISTS idx_bets_user_status;",
          "DROP INDEX CONCURRENTLY IF EXISTS idx_bets_fight_status_pending;",
          "DROP INDEX CONCURRENTLY IF EXISTS idx_fights_event_status_number;",
          "DROP INDEX CONCURRENTLY IF EXISTS idx_events_status_scheduled_date;",
          "DROP INDEX CONCURRENTLY IF EXISTS idx_transactions_wallet_type_status;",
          "DROP INDEX CONCURRENTLY IF EXISTS idx_bets_parent_bet_proposal;",
          "DROP INDEX CONCURRENTLY IF EXISTS idx_event_connections_event_disconnected;"
        ]
      },
      "testing_procedure": [
        "Run migration: npm run migrate",
        "Verify indexes: psql $DATABASE_URL -c \"\\di+ idx_bets_*\"",
        "Test query: EXPLAIN ANALYZE SELECT * FROM bets WHERE user_id = '...' AND status = 'pending';",
        "Compare: Before vs After execution time"
      ],
      "rollback_procedure": [
        "Run: npm run migrate:undo",
        "Verify rollback: Check pg_indexes for dropped indexes"
      ]
    },

    "priority_2_fix_n1_queries": {
      "objective": "Eliminate N+1 query patterns with eager loading fixes",
      "duration_hours": 3,
      "files_to_modify": [
        {
          "file": "/home/veranoby/sports-bets/backend/src/routes/bets.ts",
          "line": 31,
          "current_code": "return await Bet.findAndCountAll({\n  where,\n  include: [\n    {\n      model: Fight,\n      as: \"fight\",\n      include: [\n        {\n          model: Event,\n          as: \"event\",\n          where: eventId ? { id: eventId } : {},\n          attributes: ['id', 'title', 'status', 'scheduledDate']\n        },\n      ],\n      attributes: ['id', 'number', 'status', 'redCorner', 'blueCorner']\n    },\n  ],",
          "optimized_code": "return await Bet.findAndCountAll({\n  where,\n  include: [\n    {\n      model: Fight,\n      as: \"fight\",\n      required: true, // ADDED: Prevent separate queries\n      include: [\n        {\n          model: Event,\n          as: \"event\",\n          required: true, // ADDED: Prevent separate queries\n          where: eventId ? { id: eventId } : {},\n          attributes: ['id', 'title', 'status', 'scheduledDate']\n        },\n      ],\n      attributes: ['id', 'number', 'status', 'redCorner', 'blueCorner']\n    },\n  ],\n  subQuery: false, // ADDED: Force single query with joins",
          "improvement": "Reduces 20+ queries to 1 query for listing user bets"
        },
        {
          "file": "/home/veranoby/sports-bets/backend/src/routes/events.ts",
          "line": 102,
          "current_code": "const events = await Event.findAndCountAll({\n  where,\n  attributes,\n  include: [\n    { model: Venue, as: 'venue', attributes: ['id', 'name', 'location'] },\n    { model: User, as: 'operator', attributes: ['id', 'username'] },\n    { model: User, as: 'creator', attributes: ['id', 'username'] },\n    { model: Fight, as: 'fights', attributes: ['id', 'number', 'status', 'red_corner', 'blue_corner'] }\n  ],",
          "optimized_code": "const events = await Event.findAndCountAll({\n  where,\n  attributes,\n  include: [\n    { model: Venue, as: 'venue', attributes: ['id', 'name', 'location'], required: false },\n    { model: User, as: 'operator', attributes: ['id', 'username'], required: false },\n    { model: User, as: 'creator', attributes: ['id', 'username'], required: false },\n    { \n      model: Fight, \n      as: 'fights', \n      attributes: ['id', 'number', 'status', 'red_corner', 'blue_corner'],\n      required: false,\n      separate: true, // ADDED: Separate query with IN clause for large collections\n      limit: 50 // ADDED: Limit fights per event\n    }\n  ],\n  subQuery: false,",
          "improvement": "Prevents loading all fights for all events; uses efficient IN queries"
        },
        {
          "file": "/home/veranoby/sports-bets/backend/src/routes/events.ts",
          "line": 153,
          "current_code": "const event = await Event.findByPk(req.params.id, {\n  include: [\n    { model: Venue, as: 'venue' },\n    { model: User, as: 'operator', attributes: ['id', 'username', 'email'] },\n    { model: User, as: 'creator', attributes: ['id', 'username', 'email'] },\n    { \n      model: Fight, \n      as: 'fights',\n      include: [{ model: Bet, as: 'bets', attributes: ['id', 'amount', 'status'] }]\n    }\n  ]\n});",
          "optimized_code": "const event = await Event.findByPk(req.params.id, {\n  include: [\n    { model: Venue, as: 'venue', required: false },\n    { model: User, as: 'operator', attributes: ['id', 'username', 'email'], required: false },\n    { model: User, as: 'creator', attributes: ['id', 'username', 'email'], required: false },\n    { \n      model: Fight, \n      as: 'fights',\n      required: false,\n      separate: true, // OPTIMIZATION: Separate query for fights\n      include: [\n        { \n          model: Bet, \n          as: 'bets', \n          attributes: ['id', 'amount', 'status'],\n          required: false,\n          where: { status: 'active' }, // OPTIMIZATION: Only load active bets\n          limit: 100 // OPTIMIZATION: Limit bets per fight\n        }\n      ]\n    }\n  ]\n});",
          "improvement": "Massive reduction for event detail pages with many fights/bets"
        },
        {
          "file": "/home/veranoby/sports-bets/backend/src/routes/fights.ts",
          "line": 44,
          "current_code": "const fight = await Fight.findByPk(req.params.id, {\n  include: [\n    { model: Event, as: \"event\" },\n    {\n      model: Bet,\n      as: \"bets\",\n      include: [\n        { model: User, as: \"user\", attributes: [\"id\", \"username\"] },\n      ],\n    },\n  ],\n});",
          "optimized_code": "const fight = await Fight.findByPk(req.params.id, {\n  include: [\n    { model: Event, as: \"event\", required: false },\n    {\n      model: Bet,\n      as: \"bets\",\n      required: false,\n      separate: true, // OPTIMIZATION: Separate query with IN clause\n      where: { status: { [Op.in]: ['active', 'pending'] } }, // OPTIMIZATION: Only relevant bets\n      include: [\n        { model: User, as: \"user\", attributes: [\"id\", \"username\"], required: false },\n      ],\n    },\n  ],\n});",
          "improvement": "Reduces queries from N+1 to 2 queries total for fight details"
        }
      ],
      "testing_procedure": [
        "Enable SQL logging: Set logging: console.log in database.ts",
        "Test endpoint: curl http://localhost:3000/api/bets",
        "Count queries: grep 'Executing (default):' logs | wc -l",
        "Compare: Before (20+ queries) vs After (1-2 queries)",
        "Load test: autocannon -c 20 -d 10 http://localhost:3000/api/events"
      ],
      "expected_improvements": {
        "GET /api/bets": "20+ queries -> 1 query (95% reduction)",
        "GET /api/events": "50+ queries -> 3 queries (94% reduction)",
        "GET /api/events/:id": "100+ queries -> 3 queries (97% reduction)",
        "GET /api/fights/:id": "10+ queries -> 2 queries (80% reduction)"
      }
    },

    "priority_3_optimize_connection_pool": {
      "objective": "Tune connection pool for Neon.tech constraints",
      "duration_hours": 1,
      "file_to_modify": "/home/veranoby/sports-bets/backend/src/config/database.ts",
      "current_settings": {
        "line": "10-26",
        "max": 10,
        "min": 2,
        "acquire": 45000,
        "idle": 5000,
        "evict": 15000
      },
      "optimized_settings": {
        "max": 15,
        "min": 3,
        "acquire": 30000,
        "idle": 10000,
        "evict": 20000,
        "connectionTimeoutMillis": 20000,
        "query_timeout": 30000,
        "statement_timeout": 30000
      },
      "rationale": {
        "max_increase": "Neon.tech supports up to 100 connections; 15 is conservative for current load",
        "min_increase": "Keep 3 warm connections to avoid cold start delays",
        "acquire_decrease": "Fail faster to prevent request pile-up",
        "idle_increase": "Keep connections alive longer to reduce setup overhead",
        "query_timeout": "Prevent runaway queries from holding connections"
      },
      "code_changes": {
        "file": "/home/veranoby/sports-bets/backend/src/config/database.ts",
        "line_10": "const MAX_CONNECTIONS = 15; // INCREASED: From 10 to 15 for better throughput",
        "line_18": "min: 3, // INCREASED: Keep more warm connections",
        "line_19": "acquire: 30000, // DECREASED: Fail faster to prevent pile-up",
        "line_20": "idle: 10000, // INCREASED: Keep connections alive longer",
        "line_21": "evict: 20000, // INCREASED: Reduce eviction churn",
        "line_64_add": "query_timeout: 30000, // ADDED: Prevent runaway queries",
        "line_65_add": "statement_timeout: 30000, // ADDED: Database-level timeout"
      },
      "additional_optimizations": [
        "Add connection retry logic with exponential backoff",
        "Implement circuit breaker for database failures",
        "Add connection pool health checks",
        "Log slow queries (>1 second) for investigation"
      ],
      "testing_procedure": [
        "Deploy changes to staging",
        "Run load test: autocannon -c 50 -d 60 http://localhost:3000/api/events",
        "Monitor pool stats: curl http://localhost:3000/api/monitoring/health",
        "Check error logs: grep ETIMEDOUT logs/*.log",
        "Verify no connection exhaustion under load"
      ],
      "expected_improvements": {
        "connection_timeouts": "Reduce from 10-20 per minute to <1 per minute",
        "avg_acquire_time": "Reduce from 2-5 seconds to <500ms",
        "pool_utilization": "Maintain <80% utilization under normal load"
      }
    },

    "priority_4_add_query_monitoring": {
      "objective": "Add instrumentation for ongoing performance monitoring",
      "duration_hours": 2,
      "files_to_create": [
        "/home/veranoby/sports-bets/backend/src/middleware/queryMonitoring.ts"
      ],
      "features_to_add": [
        "Automatic slow query logging (>500ms threshold)",
        "Query count tracking per request",
        "Connection pool utilization metrics",
        "Database error rate tracking",
        "Query performance percentiles (p50, p95, p99)"
      ],
      "integration_points": [
        "Add middleware to Express app",
        "Hook into Sequelize logging",
        "Expose metrics endpoint: GET /api/monitoring/db-performance",
        "Add Prometheus-compatible metrics"
      ],
      "implementation_steps": [
        "Create queryMonitoring.ts middleware",
        "Add request query counting",
        "Implement slow query logging",
        "Create performance dashboard endpoint",
        "Document metrics in API docs"
      ]
    }
  },

  "phase_3_validation": {
    "description": "Measure improvements and validate success criteria",
    "duration_hours": 2,

    "measurement_procedure": [
      {
        "step": "Baseline Measurement",
        "commands": [
          "Run load test: autocannon -c 50 -d 60 -H 'Authorization: Bearer $TOKEN' http://localhost:3000/api/bets > baseline.txt",
          "Capture slow query log: psql $DATABASE_URL -c \"SELECT query, calls, mean_exec_time, max_exec_time FROM pg_stat_statements ORDER BY mean_exec_time DESC LIMIT 20;\" > baseline_queries.txt"
        ]
      },
      {
        "step": "Apply Optimizations",
        "commands": [
          "Run migrations: npm run migrate",
          "Deploy code changes: git commit && git push",
          "Restart server: pm2 restart gallobets-backend"
        ]
      },
      {
        "step": "Post-Optimization Measurement",
        "commands": [
          "Run load test: autocannon -c 50 -d 60 -H 'Authorization: Bearer $TOKEN' http://localhost:3000/api/bets > optimized.txt",
          "Capture slow query log: psql $DATABASE_URL -c \"SELECT query, calls, mean_exec_time, max_exec_time FROM pg_stat_statements ORDER BY mean_exec_time DESC LIMIT 20;\" > optimized_queries.txt",
          "Compare results: diff baseline.txt optimized.txt"
        ]
      },
      {
        "step": "Verify Index Usage",
        "commands": [
          "Check index scans: psql $DATABASE_URL -c \"SELECT relname, idx_scan, seq_scan FROM pg_stat_user_tables WHERE schemaname = 'public' ORDER BY seq_scan DESC;\"",
          "Verify new indexes: psql $DATABASE_URL -c \"SELECT schemaname, tablename, indexname, idx_scan FROM pg_stat_user_indexes WHERE schemaname = 'public' AND indexname LIKE 'idx_%' ORDER BY idx_scan DESC;\""
        ]
      }
    ],

    "success_criteria": {
      "query_performance": {
        "p50_response_time": {
          "target": "<200ms",
          "baseline": "500-1000ms",
          "measurement": "autocannon latency percentiles"
        },
        "p95_response_time": {
          "target": "<500ms",
          "baseline": "1500-3000ms",
          "measurement": "autocannon latency percentiles"
        },
        "p99_response_time": {
          "target": "<1000ms",
          "baseline": "3000-5000ms",
          "measurement": "autocannon latency percentiles"
        }
      },
      "query_counts": {
        "n1_elimination": {
          "target": "1-3 queries per request",
          "baseline": "10-50 queries per request",
          "measurement": "SQL logging + query counting middleware"
        }
      },
      "connection_pool": {
        "timeout_errors": {
          "target": "<1 error per hour",
          "baseline": "10-20 errors per hour",
          "measurement": "Error log analysis"
        },
        "avg_acquire_time": {
          "target": "<200ms",
          "baseline": "2000-5000ms",
          "measurement": "Pool stats monitoring"
        },
        "max_pool_utilization": {
          "target": "<80% under normal load",
          "baseline": "95-100% under normal load",
          "measurement": "Pool stats monitoring"
        }
      },
      "index_effectiveness": {
        "sequential_scans": {
          "target": "<10% of queries",
          "baseline": "40-60% of queries",
          "measurement": "pg_stat_user_tables analysis"
        },
        "index_usage": {
          "target": ">90% of queries use indexes",
          "baseline": "40-60% of queries use indexes",
          "measurement": "pg_stat_user_indexes analysis"
        }
      }
    },

    "monitoring_setup": {
      "tools_to_configure": [
        "pg_stat_statements extension for query analysis",
        "Custom /api/monitoring/db-performance endpoint",
        "Grafana dashboard for real-time metrics",
        "Alert rules for performance degradation"
      ],
      "metrics_to_track": [
        "Query execution time percentiles",
        "Connection pool utilization",
        "Cache hit rates",
        "Slow query frequency",
        "Error rates by type"
      ],
      "alert_thresholds": [
        "p95 query time > 500ms for 5 minutes",
        "Connection pool utilization > 90% for 2 minutes",
        "ETIMEDOUT errors > 5 in 1 minute",
        "Sequential scans > 100 per minute"
      ]
    },

    "regression_testing": {
      "test_scenarios": [
        {
          "name": "User Bet Listing",
          "endpoint": "GET /api/bets?limit=20",
          "expected_queries": 1,
          "expected_time": "<200ms"
        },
        {
          "name": "Event List with Fights",
          "endpoint": "GET /api/events?limit=10",
          "expected_queries": 3,
          "expected_time": "<300ms"
        },
        {
          "name": "Event Detail Page",
          "endpoint": "GET /api/events/:id",
          "expected_queries": 3,
          "expected_time": "<400ms"
        },
        {
          "name": "Available Bets",
          "endpoint": "GET /api/bets/available/:fightId",
          "expected_queries": 1,
          "expected_time": "<150ms"
        },
        {
          "name": "Fight Detail",
          "endpoint": "GET /api/fights/:id",
          "expected_queries": 2,
          "expected_time": "<250ms"
        }
      ],
      "automated_test_script": "/home/veranoby/sports-bets/backend/scripts/performance-regression-test.sh"
    }
  },

  "rollback_plan": {
    "description": "Procedures to rollback changes if issues arise",
    "triggers": [
      "P95 response time increases by >20%",
      "Error rate increases by >50%",
      "Production incidents related to database",
      "Connection pool exhaustion"
    ],
    "rollback_steps": [
      {
        "step": 1,
        "action": "Revert code changes",
        "commands": [
          "git revert HEAD~3",
          "npm run build",
          "pm2 restart gallobets-backend"
        ]
      },
      {
        "step": 2,
        "action": "Rollback migrations",
        "commands": [
          "npm run migrate:undo",
          "Verify: psql $DATABASE_URL -c \"\\di+ idx_bets_*\""
        ]
      },
      {
        "step": 3,
        "action": "Restore connection pool settings",
        "file": "/home/veranoby/sports-bets/backend/src/config/database.ts",
        "restore_values": {
          "max": 10,
          "acquire": 45000
        }
      }
    ],
    "communication_plan": [
      "Notify team in Slack #engineering channel",
      "Update status page if customer-facing",
      "Document rollback reason for post-mortem"
    ]
  },

  "documentation_deliverables": {
    "files_to_create": [
      {
        "path": "/home/veranoby/sports-bets/claudedocs/DATABASE_OPTIMIZATION_RESULTS.md",
        "content": "Before/after metrics with graphs and analysis"
      },
      {
        "path": "/home/veranoby/sports-bets/claudedocs/QUERY_OPTIMIZATION_GUIDE.md",
        "content": "Best practices for writing performant Sequelize queries"
      },
      {
        "path": "/home/veranoby/sports-bets/backend/migrations/20251012000000-add-critical-performance-indexes.js",
        "content": "Migration file with all new indexes"
      }
    ],
    "readme_updates": [
      "Add performance benchmarks section",
      "Document database optimization history",
      "Add monitoring dashboard links"
    ]
  },

  "timeline_summary": {
    "phase_1_confirmation": "2 hours",
    "phase_2_implementation": "8 hours",
    "phase_3_validation": "2 hours",
    "total_duration": "12 hours",
    "recommended_schedule": [
      "Day 1 Morning: Phase 1 - Confirmation & Measurement",
      "Day 1 Afternoon: Phase 2 - Priority 1 (Indexes)",
      "Day 2 Morning: Phase 2 - Priority 2 (N+1 Queries)",
      "Day 2 Afternoon: Phase 2 - Priority 3 (Connection Pool) + Priority 4 (Monitoring)",
      "Day 3 Morning: Phase 3 - Validation & Documentation"
    ]
  },

  "risk_assessment": {
    "risks": [
      {
        "risk": "Indexes increase write latency",
        "likelihood": "Low",
        "impact": "Low",
        "mitigation": "Use CONCURRENTLY, test write performance"
      },
      {
        "risk": "Connection pool changes cause exhaustion",
        "likelihood": "Medium",
        "impact": "High",
        "mitigation": "Gradual rollout, monitor closely, quick rollback ready"
      },
      {
        "risk": "N+1 fixes break existing functionality",
        "likelihood": "Low",
        "impact": "Medium",
        "mitigation": "Comprehensive testing, separate:true for safety"
      },
      {
        "risk": "Neon.tech connection limits hit",
        "likelihood": "Low",
        "impact": "High",
        "mitigation": "Stay under 20 connections, monitor usage"
      }
    ]
  }
}
