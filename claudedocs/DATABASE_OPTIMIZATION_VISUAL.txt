╔══════════════════════════════════════════════════════════════════════════════╗
║                  GALLOBETS DATABASE PERFORMANCE OPTIMIZATION                 ║
║                         Systematic Implementation Plan                        ║
╚══════════════════════════════════════════════════════════════════════════════╝

┌──────────────────────────────────────────────────────────────────────────────┐
│  CURRENT STATE → TARGET STATE                                                │
├──────────────────────────────────────────────────────────────────────────────┤
│  Query Time (p95):        1500-3000ms  →  <500ms      (80-85% FASTER)       │
│  Queries per Request:     20-50        →  1-3         (95% REDUCTION)        │
│  Connection Timeouts:     10-20/hour   →  <1/hour     (95% REDUCTION)       │
│  Sequential Scans:        40-60%       →  <10%        (85% REDUCTION)        │
│  Throughput:              <20 req/s    →  >100 req/s  (5x INCREASE)          │
└──────────────────────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────────────────────┐
│  THREE-PHASE IMPLEMENTATION (12 hours)                                       │
└──────────────────────────────────────────────────────────────────────────────┘

 ╔════════════════════════════════════════════════════════════════════════════╗
 ║ PHASE 1: CONFIRMATION & MEASUREMENT (2 hours)                              ║
 ╚════════════════════════════════════════════════════════════════════════════╝

    ┌─────────────────────────────────────────────────────────────┐
    │ Task 1: Verify Missing Indexes (45 min)                     │
    ├─────────────────────────────────────────────────────────────┤
    │ • Query pg_indexes for existing indexes                     │
    │ • Analyze pg_stat_user_tables for seq_scans                 │
    │ • Grep codebase for WHERE clause patterns                   │
    │                                                              │
    │ Expected Findings:                                           │
    │   ✗ Missing: bets(user_id, status)                          │
    │   ✗ Missing: bets(fight_id, status) WHERE pending           │
    │   ✗ Missing: fights(event_id, status, number)               │
    │   ✗ Missing: events(status, scheduled_date)                 │
    │   ✗ Missing: transactions(wallet_id, type, status)          │
    │   ✗ High seq_scan counts on critical tables                 │
    └─────────────────────────────────────────────────────────────┘

    ┌─────────────────────────────────────────────────────────────┐
    │ Task 2: Detect N+1 Queries (45 min)                         │
    ├─────────────────────────────────────────────────────────────┤
    │ • Enable SQL logging in Sequelize                           │
    │ • Count queries for key endpoints                           │
    │ • Identify missing required:false/separate:true             │
    │                                                              │
    │ Expected Findings:                                           │
    │   ✗ routes/bets.ts:31       → 20+ queries (should be 1)    │
    │   ✗ routes/events.ts:102    → 50+ queries (should be 3)    │
    │   ✗ routes/events.ts:153    → 100+ queries (should be 3)   │
    │   ✗ routes/fights.ts:44     → 10+ queries (should be 2)    │
    └─────────────────────────────────────────────────────────────┘

    ┌─────────────────────────────────────────────────────────────┐
    │ Task 3: Analyze Connection Pool (30 min)                    │
    ├─────────────────────────────────────────────────────────────┤
    │ • Monitor pool utilization under load                       │
    │ • Count ETIMEDOUT errors in logs                            │
    │ • Load test: 50 concurrent connections                      │
    │                                                              │
    │ Expected Findings:                                           │
    │   ✗ Pool maxing at 10/10 connections                        │
    │   ✗ ETIMEDOUT errors under load                             │
    │   ✗ High acquire wait times (>5 seconds)                    │
    │   ✗ Suboptimal pool configuration                           │
    └─────────────────────────────────────────────────────────────┘

 ╔════════════════════════════════════════════════════════════════════════════╗
 ║ PHASE 2: IMPLEMENTATION (8 hours)                                          ║
 ╚════════════════════════════════════════════════════════════════════════════╝

    ┌─────────────────────────────────────────────────────────────┐
    │ Priority 1: Add Critical Indexes (2 hours)                  │
    ├─────────────────────────────────────────────────────────────┤
    │                                                              │
    │  7 Indexes to Create:                                        │
    │                                                              │
    │  1. idx_bets_user_status                                    │
    │     ├─ Table: bets(user_id, status)                         │
    │     └─ Impact: 90% faster user bet listings                 │
    │                                                              │
    │  2. idx_bets_fight_status_pending (PARTIAL)                 │
    │     ├─ Table: bets(fight_id, status) WHERE pending          │
    │     └─ Impact: 80% faster available bets queries            │
    │                                                              │
    │  3. idx_fights_event_status_number                          │
    │     ├─ Table: fights(event_id, status, number)              │
    │     └─ Impact: 75% faster fight listings                    │
    │                                                              │
    │  4. idx_events_status_scheduled_date                        │
    │     ├─ Table: events(status, scheduled_date)                │
    │     └─ Impact: 85% faster upcoming events                   │
    │                                                              │
    │  5. idx_transactions_wallet_type_status                     │
    │     ├─ Table: transactions(wallet_id, type, status)         │
    │     └─ Impact: 70% faster transaction history               │
    │                                                              │
    │  6. idx_bets_parent_bet_proposal (PARTIAL)                  │
    │     ├─ Table: bets(parent_bet_id, proposal_status)          │
    │     └─ Impact: 80% faster PAGO/DOY queries                  │
    │                                                              │
    │  7. idx_event_connections_event_disconnected                │
    │     ├─ Table: event_connections(event_id, disconnected_at)  │
    │     └─ Impact: 90% faster viewer count queries              │
    │                                                              │
    │  Command: npm run migrate                                    │
    │  File: 20251012000000-add-critical-performance-indexes.js   │
    └─────────────────────────────────────────────────────────────┘

    ┌─────────────────────────────────────────────────────────────┐
    │ Priority 2: Fix N+1 Queries (3 hours)                       │
    ├─────────────────────────────────────────────────────────────┤
    │                                                              │
    │  Fix #1: routes/bets.ts (line 31)                           │
    │  ├─ Issue: Separate queries for Fight/Event on each bet    │
    │  ├─ Solution: Add required:true + subQuery:false            │
    │  └─ Impact: 20+ queries → 1 query (95% reduction)           │
    │                                                              │
    │  Fix #2: routes/events.ts (line 102)                        │
    │  ├─ Issue: Loading ALL fights for ALL events                │
    │  ├─ Solution: Add separate:true + limit:50                  │
    │  └─ Impact: 50+ queries → 3 queries (94% reduction)         │
    │                                                              │
    │  Fix #3: routes/events.ts (line 153)                        │
    │  ├─ Issue: Deep nesting Fight->Bet without limits           │
    │  ├─ Solution: separate:true on both + limit:100             │
    │  └─ Impact: 100+ queries → 3 queries (97% reduction)        │
    │                                                              │
    │  Fix #4: routes/fights.ts (line 44)                         │
    │  ├─ Issue: N+1 for loading bets and users                   │
    │  ├─ Solution: separate:true + filter active/pending         │
    │  └─ Impact: 10+ queries → 2 queries (80% reduction)         │
    └─────────────────────────────────────────────────────────────┘

    ┌─────────────────────────────────────────────────────────────┐
    │ Priority 3: Optimize Connection Pool (1 hour)               │
    ├─────────────────────────────────────────────────────────────┤
    │  File: backend/src/config/database.ts                       │
    │                                                              │
    │  Configuration Changes:                                      │
    │  ├─ max: 10 → 15 (better throughput)                        │
    │  ├─ min: 2 → 3 (more warm connections)                      │
    │  ├─ acquire: 45000ms → 30000ms (fail faster)                │
    │  ├─ idle: 5000ms → 10000ms (keep alive longer)              │
    │  ├─ evict: 15000ms → 20000ms (reduce churn)                 │
    │  ├─ connectionTimeout: 30s → 20s (network timeout)           │
    │  ├─ query_timeout: ADD 30000ms (prevent runaway)             │
    │  └─ statement_timeout: ADD 30000ms (DB-level timeout)        │
    └─────────────────────────────────────────────────────────────┘

    ┌─────────────────────────────────────────────────────────────┐
    │ Priority 4: Add Query Monitoring (2 hours)                  │
    ├─────────────────────────────────────────────────────────────┤
    │  Create: backend/src/middleware/queryMonitoring.ts          │
    │                                                              │
    │  Features:                                                   │
    │  ├─ Slow query logging (>500ms)                             │
    │  ├─ Query count per request tracking                        │
    │  ├─ Connection pool utilization metrics                     │
    │  ├─ Query performance percentiles (p50/p95/p99)             │
    │  └─ Prometheus-compatible metrics                           │
    │                                                              │
    │  Endpoint: GET /api/monitoring/db-performance               │
    └─────────────────────────────────────────────────────────────┘

 ╔════════════════════════════════════════════════════════════════════════════╗
 ║ PHASE 3: VALIDATION (2 hours)                                              ║
 ╚════════════════════════════════════════════════════════════════════════════╝

    ┌─────────────────────────────────────────────────────────────┐
    │ Load Testing                                                 │
    ├─────────────────────────────────────────────────────────────┤
    │  Tool: autocannon (npm install -g autocannon)               │
    │                                                              │
    │  Tests:                                                      │
    │  ├─ GET /api/bets?limit=20 (50 concurrent, 30s)            │
    │  ├─ GET /api/events?limit=10 (50 concurrent, 30s)          │
    │  └─ GET /api/events/:id (50 concurrent, 30s)               │
    │                                                              │
    │  Metrics to Capture:                                         │
    │  ├─ Latency percentiles (p50, p95, p99)                     │
    │  ├─ Requests per second                                      │
    │  ├─ Error rate                                               │
    │  └─ Connection pool stats                                    │
    └─────────────────────────────────────────────────────────────┘

    ┌─────────────────────────────────────────────────────────────┐
    │ Success Criteria Validation                                  │
    ├─────────────────────────────────────────────────────────────┤
    │                                                              │
    │  Query Performance:                                          │
    │  ✓ p50 response time: <200ms                                │
    │  ✓ p95 response time: <500ms ⭐ PRIMARY TARGET              │
    │  ✓ p99 response time: <1000ms                               │
    │                                                              │
    │  Query Efficiency:                                           │
    │  ✓ Queries per request: 1-3 (was 10-50)                    │
    │  ✓ Sequential scans: <10% (was 40-60%)                     │
    │  ✓ Index usage: >90% (was 40-60%)                          │
    │                                                              │
    │  Connection Pool:                                            │
    │  ✓ Timeout errors: <1/hour (was 10-20/hour)                │
    │  ✓ Avg acquire time: <200ms (was 2-5 seconds)              │
    │  ✓ Pool utilization: <80% (was 95-100%)                    │
    └─────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────────────────────┐
│  ROLLBACK PLAN                                                               │
├──────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│  Triggers:                                                                   │
│  ├─ p95 response time increases >20%                                        │
│  ├─ Error rate increases >50%                                               │
│  ├─ Production incidents related to database                                │
│  └─ Connection pool exhaustion                                              │
│                                                                              │
│  Steps:                                                                      │
│  1. git revert HEAD~3 && npm run build && pm2 restart                       │
│  2. npm run migrate:undo                                                     │
│  3. Restore database.ts settings (max:10, acquire:45000)                    │
│  4. Verify rollback: curl /api/monitoring/health                            │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────────────────────┐
│  KEY FILES & LOCATIONS                                                       │
├──────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│  Documentation:                                                              │
│  ├─ /claudedocs/DATABASE_PERFORMANCE_OPTIMIZATION_PLAN.json                 │
│  ├─ /claudedocs/DATABASE_OPTIMIZATION_QUICK_START.md                        │
│  ├─ /claudedocs/DATABASE_OPTIMIZATION_SUMMARY.md                            │
│  └─ /claudedocs/DATABASE_OPTIMIZATION_VISUAL.txt (this file)                │
│                                                                              │
│  Migration:                                                                  │
│  └─ /backend/migrations/20251012000000-add-critical-performance-indexes.js  │
│                                                                              │
│  Files to Modify:                                                            │
│  ├─ /backend/src/config/database.ts (lines 10-26, 64-67)                    │
│  ├─ /backend/src/routes/bets.ts (line 31-52)                                │
│  ├─ /backend/src/routes/events.ts (lines 102-114, 153-164)                  │
│  └─ /backend/src/routes/fights.ts (line 44-55)                              │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────────────────────┐
│  TIMELINE: 3 DAYS, 12 HOURS                                                 │
├──────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│  DAY 1 (4 hours):                                                            │
│  ├─ Morning: Phase 1 - Measurement (2h)                                     │
│  └─ Afternoon: Phase 2 - Priority 1: Indexes (2h)                           │
│                                                                              │
│  DAY 2 (6 hours):                                                            │
│  ├─ Morning: Phase 2 - Priority 2: N+1 Fixes (3h)                           │
│  └─ Afternoon: Phase 2 - Priority 3 & 4: Pool + Monitoring (3h)             │
│                                                                              │
│  DAY 3 (2 hours):                                                            │
│  └─ Morning: Phase 3 - Validation & Documentation (2h)                      │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────────────────────┐
│  QUICK COMMANDS                                                              │
├──────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│  Verify indexes:                                                             │
│  $ psql $DATABASE_URL -c "\d+ bets" | grep idx_                             │
│                                                                              │
│  Run migration:                                                              │
│  $ npm run migrate                                                           │
│                                                                              │
│  Load test:                                                                  │
│  $ autocannon -c 50 -d 30 http://localhost:3000/api/events                  │
│                                                                              │
│  Check pool stats:                                                           │
│  $ curl http://localhost:3000/api/monitoring/health | jq                    │
│                                                                              │
│  Rollback migration:                                                         │
│  $ npm run migrate:undo                                                      │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘

╔══════════════════════════════════════════════════════════════════════════════╗
║  EXPECTED RESULTS SUMMARY                                                    ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ⭐ PRIMARY GOAL: p95 query time <500ms (from 1500-3000ms)                  ║
║                                                                              ║
║  📊 IMPROVEMENTS:                                                            ║
║  ├─ Query Speed:       80-85% faster                                        ║
║  ├─ Query Count:       95% reduction (20-50 → 1-3)                          ║
║  ├─ Connection Errors: 95% reduction (10-20/h → <1/h)                       ║
║  ├─ Sequential Scans:  85% reduction (40-60% → <10%)                        ║
║  └─ Throughput:        5x increase (<20 → >100 req/s)                       ║
║                                                                              ║
║  ✅ READY FOR DAYS 8-10 OF 15-DAY GALLOBETS SPRINT                          ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

